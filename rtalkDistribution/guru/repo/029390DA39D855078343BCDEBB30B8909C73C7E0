CBOC3A:INFOname=rtCompilernameSpace=rtalkdate=2013-08-12.18.28.22.0000author=nonetitle=RTALK Compilerrid=GAKRE8CAB3TUM000version=1subVersion=28type=rtalkparser=v2:LICENSECopyright (c) 2012 Roos Instruments Inc.
Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
and associated documentation files (the "Software"), to deal in the Software without restriction, 
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.:EXTENDSclass,super=Object,type=named,class=RtClass,modified=670615650,varCnt=9,instanceVariableNames=superClass;dictionaryArray;structure;name;attributes;subclasses;instances;classPool;timeStampclass,type=named,class=Object,modified=728967752class,super=Magnitude,type=named,class=Number,modified=571795337class,super=FixedSizeCollection,type=bytes,class=String,modified=571795337class,super=Object,type=named,class=RtMetaClass,modified=571795337,varCnt=1,instanceVariableNames=instanceClassclass,super=Object,type=named,class=RtCompiledMethod,modified=670615650,varCnt=9,instanceVariableNames=pbcByteCodeArray;jvmByteCodeArray;methodHandle;class;selector;sourceObject;info;attributes;timeStamp:CLASSESclass,super=Object,type=named,class=MCompilerEmitPbc,modified=671559480,varCnt=17,instanceVariableNames=instances;numberLocals;pushDepth;blockDepth;blockCount;hasBlock;nodes;evaluating;errorBlock;pbcBytes;pbcBlockInfo;codeBlocks;jumpTargets;targetClass;pbcRmtVarFlags;pbcBlockFlags;lineNumberclass,super=Object,type=named,class=McompilerParser,modified=671559480,varCnt=6,instanceVariableNames=item;scanner;errorBlock;compiler;temporaries;methodclass,super=Object,type=named,class=Compiler,modified=671559480class,super=Object,type=named,class=McompilerBase,modified=671559480,varCnt=5,instanceVariableNames=icStart;icEnd;position;endPosition;compilerclass,super=Object,type=named,class=McompilerSourceScanner,modified=671559480,varCnt=3,instanceVariableNames=source;errorBlock;nodes,classVariableNames=SpecialCharactersclass,super=McompilerBase,type=named,class=McompilerLeafNode,modified=671559480,varCnt=6,instanceVariableNames=valueclass,super=McompilerBase,type=named,class=McompilerNodes,modified=671559480,varCnt=5class,super=McompilerLeafNode,type=named,class=McompilerSymbolNode,modified=671559480,varCnt=6class,super=McompilerNodes,type=named,class=McompilerBlockNode,modified=671559480,varCnt=7,instanceVariableNames=arguments;statementsclass,super=McompilerNodes,type=named,class=McompilerEndNode,modified=671559480,varCnt=5class,super=McompilerNodes,type=named,class=McompilerPbcBlockNode,modified=671559480,varCnt=7,instanceVariableNames=arguments;statementsclass,super=McompilerLeafNode,type=named,class=McompilerLiteralNode,modified=671559480,varCnt=6class,super=McompilerNodes,type=named,class=McompilerAssignNode,modified=671559480,varCnt=7,instanceVariableNames=assignees;expressionclass,super=McompilerNodes,type=named,class=McompilerMethodNode,modified=671559480,varCnt=11,instanceVariableNames=selector;args;temps;prim;statements;apiclass,super=McompilerNodes,type=named,class=McompilerReturnNode,modified=671559480,varCnt=6,instanceVariableNames=expressionclass,super=McompilerNodes,type=named,class=McompilerPbcMessageNode,modified=671559480,varCnt=8,instanceVariableNames=arguments;node;selectorclass,super=McompilerLeafNode,type=named,class=McompilerObjectNode,modified=671559480,varCnt=8,instanceVariableNames=type;bindingclass,super=McompilerPbcMessageNode,type=named,class=McompilerPbcCascadeNode,modified=671559480,varCnt=8:METHODSclass,class=MCompilerEmitPbc,selector=primitive:,codeType=rtalk,modified=671559480,pbc=04010002230124030200000004230310000D62797465436F64654172726179240323032405230324064002343123062403020000001F230310010361743A2403230324064002343123062403020000003623031001023D3D240323030A014002343223052403020000004D230310010361743A240323031E0802010140023430240323031E010223021Eclass,class=MCompilerEmitPbc,selector=evaluate:in:to:notifying:ifFail:,codeType=rtalk,modified=671559480,pbc=0405000223062407020000000423071000036E657724072307240A2301400631446F6974202407020000001B23071001012C2407230723022407020000002D230710000F616C6C496E73745661724E616D6573240723072C022302230A240702000000432307100425636F6D70696C653A77697468496E7374616E6365733A6576616C756174696E673A666F723A2407230724092309240723071Eclass,class=MCompilerEmitPbc,selector=encodeUnsignedSmallInteger:,codeType=rtalk,modified=671530867,pbcclass,class=MCompilerEmitPbc,selector=encodeBinary:type:argument:,codeType=rtalk,modified=673907178,pbcclass,class=MCompilerEmitPbc,selector=evaluate:,codeType=rtalk,modified=671559480,pbc=060100028101230126012302240525012C01401033556E646566696E65644F626A65637415020D7072696D476574476C6F62616C002C012302240302000000152303100005636C6173732403230318000123052403020000003623031005206576616C756174653A696E3A746F3A6E6F74696679696E673A69664661696C3A240323031E05010080002C01240223021Fclass,class=MCompilerEmitPbc,selector=compilerError:at:in:for:,codeType=rtalk,modified=676852710,pbc=0404000223052408401A312D2D2D20636F6D70696C6174696F6E206572726F7220696E2023012406020000000B23061001012C24062306240923042406020000001F23061000046E616D652406230623092406020000003123061001012C24062306230824060200000043230610010972694C6F674D73673A240623052408400234314002343123022406020000005D23061001012D24062306400234302406020000007023061001046D61783A24062306230324060200000082230610020C636F707946726F6D3A746F3A24062306230824060200000094230610010972694C6F674D73673A240623051Eclass,class=MCompilerEmitPbc,selector=pbcCodeToDescription:,codeType=rtalk,modified=745202760,pbcclass,class=MCompilerEmitPbc,selector=initCompiler,codeType=rtalk,modified=704324519,pbc=0400000023011Eclass,class=McompilerPbcMessageNode,selector=inlineSelectors,codeType=rtalk,modified=704324624,pbc=04000000400000000065426966547275653A096966547275653A696646616C73653A09696646616C73653A09696646616C73653A6966547275653A096F723A09616E643A09746F3A646F3A0974696D65735265706561743A097768696C65547275653A097768696C6546616C73653A240223021Eclass,class=Compiler,selector=clearCodeCache,codeType=rtalk,modified=726201704,pbc=040000001600127072696D436C656172436F646543616368650A2F4D6973635072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Eclass,class=Compiler,selector=compile:in:,codeType=rtalk,modified=696329373,pbc=0602000381012301260223022601230324062502250123032404020000000C230410000D636F646547656E657261746F722404230418000123062404020000002D230410041C636F6D70696C653A696E3A6E6F74696679696E673A69664661696C3A240423041E05010080002C01240223021Fclass,class=Compiler,selector=evaluate:in:to:notifying:ifFail:,codeType=rtalk,modified=696329403,pbcclass,class=Compiler,selector=compile:in:notifying:ifFail:,codeType=rtalk,modified=696329383,pbcclass,class=Compiler,selector=positionsOf:in:notifying:ifFail:,codeType=rtalk,modified=696329419,pbcclass,class=Compiler,selector=evaluate:,codeType=rtalk,modified=696329392,pbc=060100028101230126012302240525012C01401033556E646566696E65644F626A65637415020D7072696D476574476C6F62616C002C01230224030200000015230310000D636F646547656E657261746F722403230318000123052403020000003623031005206576616C756174653A696E3A746F3A6E6F74696679696E673A69664661696C3A240323031E05010080002C01240223021Fclass,class=Compiler,selector=codeGenerator,codeType=rtalk,modified=706197561,pbc=040000002C014011334D436F6D70696C6572456D697450626315020D7072696D476574476C6F62616C00240223021Eclass,class=Compiler,selector=positionsOf:in:,codeType=rtalk,modified=696329411,pbc=0602000381012301260223022601230324062502250123032404020000000C230410000D636F646547656E657261746F722404230418000123062404020000002D2304100420706F736974696F6E734F663A696E3A6E6F74696679696E673A69664661696C3A240423041E05010080002C01240223021Fclass,class=McompilerSourceScanner,selector=specialChars,codeType=rtalk,modified=673907324,pbc=0400000023014012335370656369616C4368617261637465727315020F7072696D476574436C617373566172002402020000000B230210000569734E696C240223020A0123012402020000001F230210000C696E6974436C6173735661722402010123014012335370656369616C4368617261637465727315020F7072696D476574436C61737356617200240223021Eclass,class=McompilerSourceScanner,selector=initClassVar,codeType=rtalk,modified=676411386,pbc=0600000241002C012601230126022C0140043353657415020D7072696D476574476C6F62616C002402020000000B23021000036E6577240223014012335370656369616C4368617261637465727323021503117072696D436C6173735661724174507574003018010140000000002F4534370934340934330934320933330936330933380933370931323609363409313234093932093632093631093630240202000000582302100103646F3A240223011E05010140002301240323032601250125024012335370656369616C4368617261637465727315020F7072696D476574436C617373566172002403020000004023031001046164643A240323031Eclass,class=McompilerSourceScanner,selector=on:for:ifError:,codeType=rtalk,modified=673907378,pbc=04030000230424050200000004230510000C7370656369616C4368617273240523012302230323042405020000001A23051000036E65772405020000002623051003126F6E3A666F723A6572726F72426C6F636B3A240523051Einstance,class=MCompilerEmitPbc,selector=send:drop:,codeType=rtalk,modified=706315138,pbcinstance,class=MCompilerEmitPbc,selector=pbcCheckLocalVar:type:,codeType=rtalk,modified=705347805,pbcinstance,class=MCompilerEmitPbc,selector=loadFalse,codeType=rtalk,modified=704890352,pbc=0400000023012402020000000423021000097075736846616C736524022301240202000000142302100004706F7052240223011Einstance,class=MCompilerEmitPbc,selector=nodeBlock,codeType=rtalk,modified=704661157,pbc=040000002C014016334D636F6D70696C6572506263426C6F636B4E6F646515020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=compiledMethodClass,codeType=rtalk,modified=706099929,pbc=040000002C014011335274436F6D70696C65644D6574686F6415020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=insertLineNumber:,codeType=rtalk,modified=706314978,pbcinstance,class=MCompilerEmitPbc,selector=pushGlobal:,codeType=rtalk,modified=745203000,pbc=0401000223022403020000000423031000047075736824032301240323032405230224064003343634230624030200000023230310010B7075744E6578745062633A2403230624064002343123052403020000003A23031000086173537472696E6724030200000046230310000473697A652403020000005223031001012B24032303230624030200000064230310010B7075744E6578745062633A240323062406400334353623062403020000007B230310010B7075744E6578745062633A24032306240623052403020000008F23031000086173537472696E67240323032306240302000000A123031001117075744E657874506263537472696E673A240323021Einstance,class=MCompilerEmitPbc,selector=loadClassVar:,codeType=rtalk,modified=715018958,pbc=040100002301230224030200000006230310010D70757368436C6173735661723A24032302240302000000162303100004706F7052240323021Einstance,class=MCompilerEmitPbc,selector=loadSelf,codeType=rtalk,modified=704666927,pbc=0400000023012402020000000423021000087075736853656C6624022301240202000000142302100004706F7052240223011Einstance,class=MCompilerEmitPbc,selector=pushTOS,codeType=rtalk,modified=704921932,pbc=040000004003343439230124020200000007230210010B7075744E6578745062633A2402230124020200000017230210000470757368240223011Einstance,class=MCompilerEmitPbc,selector=dropTOS:,codeType=rtalk,modified=705349063,pbc=040100014002343023012403020000000723031001013D240323030A012302240323031E010123013124050802010323022403020000002D230310000764726F70544F532403400234312305020000003E1001012D312405010240023430020000004E1001023E3D240323030A0323021Einstance,class=MCompilerEmitPbc,selector=pop,codeType=rtalk,modified=671559480,pbc=04000001230124044002343123012402020000000B23021000097075736844657074682402020000001723021001012D24022302230424020200000029230210010A7075736844657074683A24024002343021032402020000003C23021001013C240223020A014015314E6567617469766520737461636B20646570746823012402020000005323021001066572726F723A240223021E080201012C012402010223011Einstance,class=MCompilerEmitPbc,selector=stackVarDrop:,codeType=rtalk,modified=705269098,pbc=04010001230224030200000004230310000F7062634C617374537461636B5661722403230323012403020000001623031001013D24032303090123022403020000002A230310000468616C7424030101210B24054002343240023431230224030200000046230310000F7062634C617374537461636B5661722403020000005223031001012D24032303230524030200000064230310020761743A7075743A240323031Einstance,class=MCompilerEmitPbc,selector=putNextPbcString:,codeType=rtalk,modified=704749364,pbc=0601000341002C0126012302260323012602180101250224030200000029230310000B6173427974654172726179240302000000352303100103646F3A240323021E050101400023012403230326012501210A2403020000001623031001046164643A240323031Einstance,class=MCompilerEmitPbc,selector=stackVarStore:,codeType=rtalk,modified=704852327,pbc=0401000123022405400334333623052403020000000B230310010B7075744E6578745062633A24032305240540023431230123022403020000002423031000097062635661725265662403020000003023031001012B2403020000003C23031001012D2403230323052403020000004E230310010B7075744E6578745062633A240323022403020000005E2303100003706F70240323021Einstance,class=MCompilerEmitPbc,selector=cleanUpTOS:,codeType=rtalk,modified=705958397,pbc=04010002230123022403020000000623031000097075736844657074682403020000001223031001012D240323032405230324064002343023062403020000002D23031001013E240323030A012305230224030200000043230310010864726F70544F533A240323031E01014002343023052403020000005B23031001013C240323030A0223022406230524030200000073230310000B7072696E74537472696E6724032303401231537461636B206572726F72202A2A203A202403020000008623031001012C2403230323062403020000009823031001066572726F723A2403080301022C012403010323021Einstance,class=MCompilerEmitPbc,selector=storeGlobal:,codeType=rtalk,modified=726030429,pbcinstance,class=MCompilerEmitPbc,selector=pbcMoveJumpScopeTo:,codeType=rtalk,modified=705347465,pbc=04010001210B240540023435230123022403020000000D230310000C7062634A756D7053636F70652403020000001923031001046D61783A2403230323052403020000002B230310020761743A7075743A240323021Einstance,class=MCompilerEmitPbc,selector=inBlock,codeType=rtalk,modified=671559480,pbc=040000004002343021042402020000000723021001013E240223021Einstance,class=MCompilerEmitPbc,selector=nodeAssign,codeType=rtalk,modified=671559480,pbc=040000002C014014334D636F6D70696C657241737369676E4E6F646515020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=nextLineNumber,codeType=rtalk,modified=704580159,pbc=040000004002343121112402020000000723021001012B24022302221123021Einstance,class=MCompilerEmitPbc,selector=nodeMethod,codeType=rtalk,modified=671559480,pbc=040000002C014014334D636F6D70696C65724D6574686F644E6F646515020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=returnSelf,codeType=rtalk,modified=704323744,pbc=0400000123012404400334333523042402020000000B230210010B7075744E6578745062633A2402230424044002343323012402020000002223021000097062635661725265662402020000002E23021001012D24022302230424020200000040230210010B7075744E6578745062633A24024003343330230124020200000053230210010B7075744E6578745062633A240223011Einstance,class=MCompilerEmitPbc,selector=pushInstance:,codeType=rtalk,modified=704392957,pbc=04010001230123022405400334333323052403020000000D230310010B7075744E6578745062633A240323052403020000001D230310010B7075744E6578745062633A240323022403020000002D23031000047075736824034002343021042403020000004023031001013D240323030901400334363421102403020000005723031001066269744F723A240323032210210F2405210F2403020000006F230310000473697A65240323032C03230524030200000083230310020761743A7075743A2403080201012C012403010223021Einstance,class=MCompilerEmitPbc,selector=pushNil,codeType=rtalk,modified=704967054,pbc=040000014002343123012404400334343423042402020000000E230210010B7075744E6578745062633A240223042402020000001E230210010B7075744E6578745062633A240223012402020000002E230210000470757368240223011Einstance,class=MCompilerEmitPbc,selector=pbcVarRef,codeType=rtalk,modified=704246949,pbc=0400000040023434210B24020200000007230210010361743A240223021Einstance,class=MCompilerEmitPbc,selector=testJumpTrue:,codeType=rtalk,modified=705491703,pbc=04010001230224030200000004230310000570757368522403230224054002343923052403020000001B230310010B7075744E6578745062633A2403230524052301230524030200000031230310010B7075744E6578745062633A24032305240302000000412303100003706F70240323021Einstance,class=MCompilerEmitPbc,selector=pbcVarInits,codeType=rtalk,modified=705349641,pbcinstance,class=MCompilerEmitPbc,selector=backJump,codeType=rtalk,modified=704660700,pbc=04000001230124020200000004230210000D6164644A756D70546172676574240223022404230423012402020000001A230210010C696E736572744C6162656C3A24022304240223021Einstance,class=MCompilerEmitPbc,selector=pushArgument:,codeType=rtalk,modified=704966981,pbc=04010001230123022405400334333523052403020000000D230310010B7075744E6578745062633A240323052403020000001D230310010B7075744E6578745062633A240323022403020000002D230310000470757368240323021Einstance,class=MCompilerEmitPbc,selector=header,codeType=rtalk,modified=705400549,pbcinstance,class=MCompilerEmitPbc,selector=startBlock,codeType=rtalk,modified=704248199,pbc=0400000040023430230124020200000007230210010A7075736844657074683A240223011Einstance,class=MCompilerEmitPbc,selector=pushTrue,codeType=rtalk,modified=704967099,pbc=040000014002343223012404400334343423042402020000000E230210010B7075744E6578745062633A240223042402020000001E230210010B7075744E6578745062633A240223012402020000002E230210000470757368240223011Einstance,class=MCompilerEmitPbc,selector=putNext4BytesPbc:,codeType=rtalk,modified=704588010,pbcinstance,class=MCompilerEmitPbc,selector=nodeMessage,codeType=rtalk,modified=704365071,pbc=040000002C014018334D636F6D70696C65725062634D6573736167654E6F646515020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=nodeReturn,codeType=rtalk,modified=671559480,pbc=040000002C014014334D636F6D70696C657252657475726E4E6F646515020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=sendSuper:drop:,codeType=rtalk,modified=744859205,pbcinstance,class=MCompilerEmitPbc,selector=jump,codeType=rtalk,modified=705162160,pbc=04000001230124020200000004230210000D6164644A756D705461726765742402230224044002343823012402020000001B230210010B7075744E6578745062633A2402230423012402020000002D230210010B7075744E6578745062633A2402230423012402020000003F23021001137062634D6F76654A756D7053636F7065546F3A24022304240223021Einstance,class=MCompilerEmitPbc,selector=dropTOS,codeType=rtalk,modified=704293987,pbc=040000004003343438230124020200000007230210010B7075744E6578745062633A24022301240202000000172302100003706F70240223011Einstance,class=MCompilerEmitPbc,selector=pushR,codeType=rtalk,modified=704967066,pbc=0400000123012404400334333523042402020000000B230210010B7075744E6578745062633A24022304240423012402020000001F230210000670626345617824022302230424020200000031230210010B7075744E6578745062633A2402230124020200000041230210000470757368240223011Einstance,class=MCompilerEmitPbc,selector=hasBlock,codeType=rtalk,modified=671559480,pbc=040000002106240223021Einstance,class=MCompilerEmitPbc,selector=pbcEdx,codeType=rtalk,modified=704233004,pbc=040000004002343123012402020000000723021000097062635661725265662402020000001323021001012D240223021Einstance,class=MCompilerEmitPbc,selector=checkVars,codeType=rtalk,modified=671559480,pbc=040000092C0124072C0124082C0124092107240202000000042302100009617267756D656E7473240223022404210724020200000018230210000B74656D706F7261726965732402230224052C0140043353657415020D7072696D476574476C6F62616C002402020000003323021000036E65772402230224064002343131240A23042402020000004D230210000473697A6524022302240B08010102230A240223022409230923042402020000006F230210010361743A2402230224072101240C230724020200000087230210000576616C756524022302230C240202000000992302100109696E636C756465733A240223020A032301240C401F3173616D65206E616D6520617320696E7374616E6365207661726961626C652307240202000000B42302100008706F736974696F6E24022302230C240202000000C623021002076572723A61743A240201032307240202000000D8230210000576616C7565240223022306240202000000EA2302100109696E636C756465733A240223020A042301240C4018316475706C696361746520617267756D656E74206E616D652307240202000001052302100008706F736974696F6E24022302230C2402020000011723021002076572723A61743A24020104230724020200000129230210000576616C75652402230223062402020000013B23021001046164643A2402230A40023431020000014C1001012B31240A0101230B020000015B1001013C240223020A024002343131240A230524020200000173230210000473697A6524022302240B08050106230A2402230224092309230524020200000195230210010361743A2402230224082101240C2308240202000001AD230210000576616C756524022302230C240202000001BF2302100109696E636C756465733A240223020A072301240C401F3173616D65206E616D6520617320696E7374616E6365207661726961626C652308240202000001DA2302100008706F736974696F6E24022302230C240202000001EC23021002076572723A61743A240201072308240202000001FE230210000576616C7565240223022306240202000002102302100109696E636C756465733A240223020A082301240C4019316475706C69636174652074656D706F72617279206E616D6523082402020000022B2302100008706F736974696F6E24022302230C2402020000023D23021002076572723A61743A2402010823082402020000024F230210000576616C75652402230223062402020000026123021001046164643A2402230A4002343102000002721001012B31240A0105230B02000002811001013C240223020A0623011Einstance,class=MCompilerEmitPbc,selector=err:at:,codeType=rtalk,modified=671559480,pbc=0402000023012302210924040200000008230410020C76616C75653A76616C75653A240423031Einstance,class=MCompilerEmitPbc,selector=loadContextTemporary:,codeType=rtalk,modified=705349559,pbc=040100002301230224030200000006230310011570757368436F6E7465787454656D706F726172793A24032302240302000000162303100004706F7052240323021Einstance,class=MCompilerEmitPbc,selector=pbcLclVarFlags,codeType=rtalk,modified=704233057,pbc=0400000040023433210B24020200000007230210010361743A240223021Einstance,class=MCompilerEmitPbc,selector=pushFalse,codeType=rtalk,modified=704295035,pbc=040000014002343323012404400334343423042402020000000E230210010B7075744E6578745062633A240223042402020000001E230210010B7075744E6578745062633A240223012402020000002E230210000470757368240223011Einstance,class=MCompilerEmitPbc,selector=nodeCascade,codeType=rtalk,modified=704365062,pbc=040000002C014018334D636F6D70696C6572506263436173636164654E6F646515020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=return,codeType=rtalk,modified=705935542,pbc=040000012301240202000000042302100007696E426C6F636B240223020A014003343331230124044003343335230424020200000022230210010B7075744E6578745062633A240223042404230124020200000036230210000670626345617824022302230424020200000048230210010B7075744E6578745062633A2402230424020200000058230210010B7075744E6578745062633A240240043431323821102402020000006B23021001066269744F723A24022302221008020101400334333023012404400334333523042402020000008D230210010B7075744E6578745062633A2402230424042301240202000000A12302100006706263456178240223022304240202000000B3230210010B7075744E6578745062633A24022304240202000000C3230210010B7075744E6578745062633A2402010223011Einstance,class=MCompilerEmitPbc,selector=loadGlobal:,codeType=rtalk,modified=715018933,pbc=040100002301230224030200000006230310010B70757368476C6F62616C3A24032302240302000000162303100004706F7052240323021Einstance,class=MCompilerEmitPbc,selector=pushClassVar:,codeType=rtalk,modified=745205121,pbcinstance,class=MCompilerEmitPbc,selector=loadTemporary:,codeType=rtalk,modified=704966652,pbc=040100002301230224030200000006230310010E7075736854656D706F726172793A24032302240302000000162303100004706F7052240323021Einstance,class=MCompilerEmitPbc,selector=nodeLiteral,codeType=rtalk,modified=671559480,pbc=040000002C014015334D636F6D70696C65724C69746572616C4E6F646515020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=pushSelf,codeType=rtalk,modified=704666880,pbcinstance,class=MCompilerEmitPbc,selector=stackVarPush:,codeType=rtalk,modified=704889943,pbc=0401000123022405400334333523052403020000000B230310010B7075744E6578745062633A24032305240540023431230123022403020000002423031000097062635661725265662403020000003023031001012B2403020000003C23031001012D2403230323052403020000004E230310010B7075744E6578745062633A240323022403020000005E230310000470757368240323021Einstance,class=MCompilerEmitPbc,selector=nodeVariable,codeType=rtalk,modified=671559480,pbc=040000002C014014334D636F6D70696C65724F626A6563744E6F646515020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=pushDepth,codeType=rtalk,modified=704288927,pbc=040000002103240223021Einstance,class=MCompilerEmitPbc,selector=testJumpTrue,codeType=rtalk,modified=704935883,pbc=04000002230124020200000004230210000D6164644A756D70546172676574240223022404230124020200000018230210000570757368522402230124054002343923052402020000002F230210010B7075744E6578745062633A2402230524052304230524020200000045230210010B7075744E6578745062633A24022305240202000000552302100003706F702402230423012402020000006723021001137062634D6F76654A756D7053636F7065546F3A24022304240223021Einstance,class=MCompilerEmitPbc,selector=nodeEnd,codeType=rtalk,modified=671559480,pbc=040000002C014011334D636F6D70696C6572456E644E6F646515020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=pbcEax,codeType=rtalk,modified=704233012,pbc=040000004002343223012402020000000723021000097062635661725265662402020000001323021001012D240223021Einstance,class=MCompilerEmitPbc,selector=nodes,codeType=rtalk,modified=671559480,pbc=040000002107240223021Einstance,class=MCompilerEmitPbc,selector=incBlockCount,codeType=rtalk,modified=704248659,pbc=040000004002343121052402020000000723021001012B2402230222054002343121042402020000001E23021001012B24022302220423011Einstance,class=MCompilerEmitPbc,selector=storeContextTemporary:,codeType=rtalk,modified=705955307,pbc=0401000123022403020000000423031000057075736852240323022405400334333823052403020000001B230310010B7075744E6578745062633A2403230524052301230524030200000031230310010B7075744E6578745062633A24032305240302000000412303100003706F702403230140063373746F72652302240302000000562303100214706263436865636B526D745661723A747970653A240323021Einstance,class=MCompilerEmitPbc,selector=endBlock,codeType=rtalk,modified=705494094,pbc=04000001210A24044002343523012402020000000B230210000E7062634D6178537461636B5661722402230223042402020000001D230210020761743A7075743A24024002343121042402020000003023021001012D2402230222044002343240023436210B2402020000004A230210010361743A24020200000056230210010361743A24022302220A4002343140023436210B24020200000070230210010361743A2402020000007C230210010361743A24022302220B23011Einstance,class=MCompilerEmitPbc,selector=testJumpFalse,codeType=rtalk,modified=705491723,pbc=04000002230124020200000004230210000D6164644A756D7054617267657424022302240423012402020000001823021000057075736852240223012405400334313023052402020000002F230210010B7075744E6578745062633A2402230524052304230524020200000045230210010B7075744E6578745062633A24022305240202000000552302100003706F702402230423012402020000006723021001137062634D6F76654A756D7053636F7065546F3A24022304240223021Einstance,class=MCompilerEmitPbc,selector=pbcJumpScope,codeType=rtalk,modified=704233037,pbc=0400000040023435210B24020200000007230210010361743A240223021Einstance,class=MCompilerEmitPbc,selector=pushContextTemporary:,codeType=rtalk,modified=704392808,pbc=04010001230123022405400334333723052403020000000D230310010B7075744E6578745062633A240323052403020000001D230310010B7075744E6578745062633A240323022403020000002D230310000470757368240323014005336C6F61642302240302000000422303100214706263436865636B526D745661723A747970653A240323021Einstance,class=MCompilerEmitPbc,selector=resolve:,codeType=rtalk,modified=745088103,pbcinstance,class=MCompilerEmitPbc,selector=insertLineNumber,codeType=rtalk,modified=706314953,pbc=0400000021112301240202000000062302100111696E736572744C696E654E756D6265723A240223011Einstance,class=MCompilerEmitPbc,selector=IC,codeType=rtalk,modified=704588045,pbc=040000002111240223021Einstance,class=MCompilerEmitPbc,selector=loadLiteral:,codeType=rtalk,modified=704841383,pbc=040100002301230224030200000006230310010C707573684C69746572616C3A24032302240302000000162303100004706F7052240323021Einstance,class=MCompilerEmitPbc,selector=testJumpFalse:,codeType=rtalk,modified=705491715,pbc=0401000123022403020000000423031000057075736852240323022405400334313023052403020000001B230310010B7075744E6578745062633A2403230524052301230524030200000031230310010B7075744E6578745062633A24032305240302000000412303100003706F70240323021Einstance,class=MCompilerEmitPbc,selector=evaluating,codeType=rtalk,modified=671559480,pbc=040000002108240223021Einstance,class=MCompilerEmitPbc,selector=byteCodesBytes,codeType=rtalk,modified=705930583,pbcinstance,class=MCompilerEmitPbc,selector=pushTemporary:,codeType=rtalk,modified=704846023,pbc=0401000123022405400334333523052403020000000B230310010B7075744E6578745062633A24032305240540023431230123022403020000002423031000097062635661725265662403020000003023031001012B2403020000003C23031001012D2403230323052403020000004E230310010B7075744E6578745062633A240323022403020000005E230310000470757368240323014005336C6F61642302240302000000732303100216706263436865636B4C6F63616C5661723A747970653A240323021Einstance,class=MCompilerEmitPbc,selector=popR,codeType=rtalk,modified=704654138,pbc=0400000123012404400334333623042402020000000B230210010B7075744E6578745062633A24022304240423012402020000001F230210000670626345617824022302230424020200000031230210010B7075744E6578745062633A24022301240202000000412302100003706F70240223011Einstance,class=MCompilerEmitPbc,selector=prolog,codeType=rtalk,modified=713145290,pbcinstance,class=MCompilerEmitPbc,selector=returnFallOutBlock,codeType=rtalk,modified=705489447,pbc=040000002301240202000000042302100005707573685224024003343330230124020200000017230210010B7075744E6578745062633A240223011Einstance,class=MCompilerEmitPbc,selector=pop:,codeType=rtalk,modified=652780422,pbc=0401000123022405230123022403020000000A23031000097075736844657074682403020000001623031001012D24032303230524030200000028230310010A7075736844657074683A240323021Einstance,class=MCompilerEmitPbc,selector=bcIndex,codeType=rtalk,modified=704846155,pbc=0400000040023430240223021Einstance,class=MCompilerEmitPbc,selector=loadInstance:,codeType=rtalk,modified=705349567,pbc=040100002301230224030200000006230310010D70757368496E7374616E63653A24032302240302000000162303100004706F7052240323021Einstance,class=MCompilerEmitPbc,selector=insertLabel:,codeType=rtalk,modified=705347488,pbc=040100012301230224054002343123052403020000000D230310010B7075744E6578745062633A240323052403020000001D230310010B7075744E6578745062633A240323021Einstance,class=MCompilerEmitPbc,selector=tosR,codeType=rtalk,modified=705875301,pbc=0400000123012404400334343923042402020000000B230210010B7075744E6578745062633A2402230424044003343336230424020200000022230210010B7075744E6578745062633A240223042404230124020200000036230210000670626345617824022302230424020200000048230210010B7075744E6578745062633A240223011Einstance,class=MCompilerEmitPbc,selector=compile:instances:evaluating:for:,codeType=rtalk,modified=705929273,pbcinstance,class=MCompilerEmitPbc,selector=storeClassVar:,codeType=rtalk,modified=745102199,pbcinstance,class=MCompilerEmitPbc,selector=loadNil,codeType=rtalk,modified=704890288,pbc=040000002301240202000000042302100007707573684E696C24022301240202000000142302100004706F7052240223011Einstance,class=MCompilerEmitPbc,selector=sendStack:drop:,codeType=rtalk,modified=706315147,pbc=040200012303240402000000042304100010696E736572744C696E654E756D626572240423022303240402000000162304100104706F703A24044003343136230324040200000029230410010B7075744E6578745062633A2404230223032404020000003B230410010B7075744E6578745062633A24042303240623012404020000004F230410000473697A6524042304230624040200000061230410010B7075744E6578745062633A2404230123032404020000007323041001117075744E657874506263537472696E673A240423031Einstance,class=MCompilerEmitPbc,selector=putNextPbc:,codeType=rtalk,modified=705268238,pbc=0401000023012403020000000423031000096973496E7465676572240323030901230224030200000018230310000468616C74240301012301210A2403020000002C23031001046164643A240323022403020000003C230310000E6E6578744C696E654E756D626572240323021Einstance,class=MCompilerEmitPbc,selector=pushLiteral:,codeType=rtalk,modified=704977069,pbcinstance,class=MCompilerEmitPbc,selector=undefinedAt:,codeType=rtalk,modified=671559480,pbc=04010000400A31756E646566696E65642301210924030200000009230310020C76616C75653A76616C75653A240323021Einstance,class=MCompilerEmitPbc,selector=storeInstance:,codeType=rtalk,modified=705955297,pbc=0401000123022403020000000423031000057075736852240323022405400334333423052403020000001B230310010B7075744E6578745062633A2403230524052301230524030200000031230310010B7075744E6578745062633A24032305240302000000412303100003706F7024034002343021042403020000005423031001013D240323030901400334363421102403020000006B23031001066269744F723A240323032210210F2405210F24030200000083230310000473697A65240323032C03230524030200000097230310020761743A7075743A2403080201012C012403010223021Einstance,class=MCompilerEmitPbc,selector=addJumpTarget,codeType=rtalk,modified=704580144,pbc=0400000040023431210D2402020000000723021001012B24022302220D23021Einstance,class=MCompilerEmitPbc,selector=startNewBlockWithArgs:,codeType=rtalk,modified=705929328,pbcinstance,class=MCompilerEmitPbc,selector=startCompile:instances:evaluating:for:,codeType=rtalk,modified=704974888,pbcinstance,class=MCompilerEmitPbc,selector=loadArgument:,codeType=rtalk,modified=705228739,pbc=040100002301230224030200000006230310010D70757368417267756D656E743A24032302240302000000162303100004706F7052240323021Einstance,class=MCompilerEmitPbc,selector=push,codeType=rtalk,modified=671559480,pbc=04000001230124044002343123012402020000000B23021000097075736844657074682402020000001723021001012B24022302230424020200000029230210010A7075736844657074683A240223011Einstance,class=MCompilerEmitPbc,selector=loadTrue,codeType=rtalk,modified=704890270,pbc=040000002301240202000000042302100008707573685472756524022301240202000000142302100004706F7052240223011Einstance,class=MCompilerEmitPbc,selector=pbcLastStackVar,codeType=rtalk,modified=704849509,pbc=0400000040023432210B24020200000007230210010361743A240223021Einstance,class=MCompilerEmitPbc,selector=pbcPriorCode,codeType=rtalk,modified=705494055,pbc=0400000040023436210B24020200000007230210010361743A240223021Einstance,class=MCompilerEmitPbc,selector=pbcMaxStackVar,codeType=rtalk,modified=704932447,pbc=0400000040023431210B24020200000007230210010361743A240223021Einstance,class=MCompilerEmitPbc,selector=storeTemporary:,codeType=rtalk,modified=704852912,pbc=0401000123022403020000000423031000057075736852240323022405400334333623052403020000001B230310010B7075744E6578745062633A24032305240540023431230123022403020000003423031000097062635661725265662403020000004023031001012B2403020000004C23031001012D2403230323052403020000005E230310010B7075744E6578745062633A240323022403020000006E2303100003706F702403230140063373746F72652302240302000000832303100216706263436865636B4C6F63616C5661723A747970653A240323021Einstance,class=MCompilerEmitPbc,selector=pbcConvertArray:endWith:,codeType=rtalk,modified=705935053,pbc=0602000901012C0126022C0126052C012606230126084001312C0140103352656164577269746553747265616D15020D7072696D476574476C6F62616C002404020000000E23041001036F6E3A240423042601250824040200000022230410000473697A652404230426034003343634230324040200000039230410010B7075744E6578745062633A24044002343025032404020000004C23041001013D240423040A014003343636230324064002343123062404020000006A230410010B7075744E6578745062633A240423062404020000007A230410010B7075744E6578745062633A24042303240423041E01014002343024042304260240033130302404230426051801012508240402000002682304100103646F3A24042501240402000002782304100008636F6E74656E74732404230426012303240640023430230624040200000293230410010B7075744E6578745062633A240423062406400234312501240402000002AA230410000473697A65240402000002B623041001012B240423042306240402000002C823041001117075744E6578743442797465735062633A240425052303240402000002DA230410010B7075744E6578745062633A240425012303240402000002EC23041001117075744E657874506263537472696E673A240423031E05010100012301240323032606400234312502240302000000B823031001012B2403230326022506240302000000CC23031000086973537472696E67240323030A022506240302000000E02303100008697353796D626F6C240323030A03250124052506240302000000F823031000086173537472696E672403230323052403020000010A230310010B6E657874507574416C6C3A24034003343636240323032605080401032501240525062403020000012B23031000086173537472696E672403230323052403020000013D230310010B6E657874507574416C6C3A240340033436352403230326050104010225062403020000015A23031000076973466C6F6174240323030A052501240525062403020000017223031000086173537472696E6724032303230524030200000184230310010B6E657874507574416C6C3A24034003343638240323032605010525062403020000019F23031000096973496E7465676572240323030A06250124052506240302000001B723031000086173537472696E67240323032305240302000001C9230310010B6E657874507574416C6C3A2403400334363724032303260501062506240302000001E4230310000B6973436861726163746572240323030A07250124052506240302000001FC230310000A617363696956616C75652403020000020823031000086173537472696E672403230323052403020000021A230310010B6E657874507574416C6C3A240340033436392403230326050107250325022403020000023723031001013D24032303090825012403020000024B23031000037461622403080901082C012403010923031Einstance,class=MCompilerEmitPbc,selector=pushDepth:,codeType=rtalk,modified=704288935,pbc=04010000230124032303220323021Einstance,class=MCompilerEmitPbc,selector=stackVarCreate,codeType=rtalk,modified=704932573,pbc=04000002210B2405400234324002343123012402020000000E230210000F7062634C617374537461636B5661722402020000001A23021001012B2402230223052402020000002C230210020761743A7075743A240223022404210B2405400234312304230124020200000049230210000E7062634D6178537461636B5661722402020000005523021001046D61783A24022302230524020200000067230210020761743A7075743A24022304240223021Einstance,class=MCompilerEmitPbc,selector=nodeSelector,codeType=rtalk,modified=671559480,pbc=040000002C014014334D636F6D70696C657253796D626F6C4E6F646515020D7072696D476574476C6F62616C00240223021Einstance,class=MCompilerEmitPbc,selector=pushBlockContext:,codeType=rtalk,modified=704661480,pbc=04010001230224030200000004230310000D696E63426C6F636B436F756E7424034003343234230224030200000017230310010B7075744E6578745062633A24032301230224030200000029230310010B7075744E6578745062633A2403210523022403020000003B230310010B7075744E6578745062633A2403230123022403020000004D230310011673746172744E6577426C6F636B57697468417267733A24032303240523022403020000006123031000047075736824032305240323031Einstance,class=MCompilerEmitPbc,selector=pbcCheckRmtVar:type:,codeType=rtalk,modified=705349043,pbcinstance,class=MCompilerEmitPbc,selector=compile:withInstances:evaluating:for:,codeType=rtalk,modified=704744445,pbc=0604000781002C0126012C0126022301260623022605230326042304260318020124062306220925062505250425032305240602000000482306100421636F6D70696C653A696E7374616E6365733A6576616C756174696E673A666F723A240623061E050102800023012404230426012302240423042602250225012C01400C334173736F63696174696F6E15020D7072696D476574476C6F62616C0024040200000027230410020A6B65793A76616C75653A240423041Finstance,class=McompilerPbcMessageNode,selector=genTimesRepeat,codeType=rtalk,modified=706201543,pbcinstance,class=McompilerPbcMessageNode,selector=selector,codeType=rtalk,modified=671559480,pbc=040000002108240223021Einstance,class=McompilerPbcMessageNode,selector=genOr,codeType=rtalk,modified=704660535,pbc=04000001230124020200000004230210000C6C6F616452656365697665722402210524020200000014230210000C746573744A756D70547275652402230224044002343121062402020000002B230210010361743A24020200000037230210000D6F7074696D697A65426C6F636B24022304210524020200000049230210010C696E736572744C6162656C3A24022C02240223021Einstance,class=McompilerPbcMessageNode,selector=selector:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220823021Einstance,class=McompilerPbcMessageNode,selector=loadReceiver,codeType=rtalk,modified=671559480,pbc=0400000021072402020000000423021000046C6F616424022107240202000000142302100009697343617363616465240223020A012105240202000000282302100004706F70522402080201012C012402010223011Einstance,class=McompilerPbcMessageNode,selector=receiver,codeType=rtalk,modified=671559480,pbc=040000002107240223021Einstance,class=McompilerPbcMessageNode,selector=arguments,codeType=rtalk,modified=671559480,pbc=040000002106240223021Einstance,class=McompilerPbcMessageNode,selector=hasUnoptimizedBlock,codeType=rtalk,modified=673907090,pbcinstance,class=McompilerPbcMessageNode,selector=symbol,codeType=rtalk,modified=671559480,pbc=04000000210824020200000004230210000576616C7565240202000000102302100008617353796D626F6C240223021Einstance,class=McompilerPbcMessageNode,selector=whoContains:,codeType=rtalk,modified=704665102,pbcinstance,class=McompilerPbcMessageNode,selector=load,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A7365744963537461727424022C02230124020200000016230210010867656E466C6F773A24022302090123012402020000002A230210000B6C6F6164436F6D707574652402010123012402020000003C23021000087365744963456E64240223011Einstance,class=McompilerPbcMessageNode,selector=emitSend,codeType=rtalk,modified=706201451,pbc=04000001210724020200000004230210000769735375706572240223020A012105240423012402020000001C230210000673796D626F6C2402230221062402020000002E230210000473697A6524022302230424020200000040230210020F73656E6453757065723A64726F703A24020802010121052404230124020200000058230210000673796D626F6C2402230221062402020000006A230210000473697A652402230223042402020000007C230210020A73656E643A64726F703A2402010223011Einstance,class=McompilerPbcMessageNode,selector=compute,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A7365744963537461727424022C03230124020200000016230210010867656E466C6F773A24022302090123012402020000002A230210000B6C6F6164436F6D707574652402010123012402020000003C23021000087365744963456E64240223011Einstance,class=McompilerPbcMessageNode,selector=receiver:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220723021Einstance,class=McompilerPbcMessageNode,selector=pushReceiver,codeType=rtalk,modified=671559480,pbc=04000000210724020200000004230210000470757368240223011Einstance,class=McompilerPbcMessageNode,selector=loadNoInline,codeType=rtalk,modified=705959387,pbcinstance,class=McompilerPbcMessageNode,selector=genIf:sense:blockCt:,codeType=rtalk,modified=704660756,pbcinstance,class=McompilerPbcMessageNode,selector=hasAssign,codeType=rtalk,modified=671559480,pbc=0600000281002C012601210724020200000004230210000968617341737369676E240223020A012C02240223021E01011801012106240202000000592302100103646F3A24022C03240223021E05010180002301240323032601250124030200000031230310000968617341737369676E240323030A022C02240323031F080301022C012403010323031Einstance,class=McompilerPbcMessageNode,selector=receiverOptTemp,codeType=rtalk,modified=582643951,pbc=0600000281012C0126012105240202000000042302100008686173426C6F636B2402020000001023021000036E6F742402230209012C03240223021E010121052402020000002D23021000056E6F64657324020200000039230210000B74656D706F726172696573240223022404210723042402020000004F2302100109696E636C756465733A2402230209022C03240223021E01021801012106240202000000A42302100103646F3A24022C02240223021E0501018000230124032303260125012403020000007C230310000968617341737369676E240323030A032C03240323031F080401032C012403010423031Einstance,class=McompilerPbcMessageNode,selector=categorize,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerPbcMessageNode,selector=hasSend,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerPbcMessageNode,selector=loadCompute,codeType=rtalk,modified=704365050,pbc=04000000230124020200000004230210000C6C6F61644E6F496E6C696E65240223021Einstance,class=McompilerPbcMessageNode,selector=push,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A73657449635374617274240223012402020000001423021000046C6F6164240221052402020000002423021000057075736852240223012402020000003423021000087365744963456E64240223011Einstance,class=McompilerPbcMessageNode,selector=genWhile:sense:,codeType=rtalk,modified=704661255,pbcinstance,class=McompilerPbcMessageNode,selector=arguments:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220623021Einstance,class=McompilerPbcMessageNode,selector=hasBlock,codeType=rtalk,modified=671559480,pbc=0600000281002C0126012107240202000000042302100008686173426C6F636B240223020A012C02240223021E01011801012106240202000000592302100103646F3A24022C03240223021E050101800023012403230326012501240302000000312303100008686173426C6F636B240323030A022C02240323031F080301022C012403010323031Einstance,class=McompilerPbcMessageNode,selector=genAnd,codeType=rtalk,modified=704660555,pbc=04000001230124020200000004230210000C6C6F616452656365697665722402210524020200000014230210000D746573744A756D7046616C73652402230224044002343121062402020000002B230210010361743A24020200000037230210000D6F7074696D697A65426C6F636B24022304210524020200000049230210010C696E736572744C6162656C3A24022C02240223021Einstance,class=McompilerPbcMessageNode,selector=genFlow:,codeType=rtalk,modified=677169545,pbcinstance,class=McompilerPbcMessageNode,selector=genToDo,codeType=rtalk,modified=706201562,pbcinstance,class=McompilerPbcMessageNode,selector=loadOptReceiver,codeType=rtalk,modified=582643498,pbcinstance,class=McompilerMethodNode,selector=hasUnoptimizedBlock,codeType=rtalk,modified=671559480,pbc=0600000281002C012601180101210A240202000000622302100103646F3A24022C03240223021E0501018001230124032303260125012403020000001423031000076973426C6F636B2403230324052501240302000000282303100013686173556E6F7074696D697A6564426C6F636B2403230323052403020000003A23031001017C240323030A012C02240323031F080201012C012403010223031Einstance,class=McompilerMethodNode,selector=arguments:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220723021Einstance,class=McompilerMethodNode,selector=apiDescriptor:,codeType=rtalk,modified=713126797,pbc=04010000230124032303220B23021Einstance,class=McompilerMethodNode,selector=selector,codeType=rtalk,modified=671559480,pbc=04000000210624020200000004230210000576616C7565240223021Einstance,class=McompilerMethodNode,selector=hasSend,codeType=rtalk,modified=671559480,pbc=0600000281002C012601180101210A2402020000003C2302100103646F3A24022C03240223021E05010180002301240323032601250124030200000014230310000768617353656E64240323030A012C02240323031F080201012C012403010223031Einstance,class=McompilerMethodNode,selector=position,codeType=rtalk,modified=671559480,pbc=040000002104240223021Einstance,class=McompilerMethodNode,selector=statements:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220A23021Einstance,class=McompilerMethodNode,selector=arguments,codeType=rtalk,modified=671559480,pbc=040000002107240223021Einstance,class=McompilerMethodNode,selector=whoContainsLiteral:,codeType=rtalk,modified=671559480,pbc=0601000481002C0126012C01260223012603180101210A240302000000522303100103646F3A24032C01240323031E050101800023012403230326022503250224030200000016230310011377686F436F6E7461696E734C69746572616C3A24032303260125012403020000002A230310000569734E696C2403230309012501240323031F080201012C012403010223031Einstance,class=McompilerMethodNode,selector=load,codeType=rtalk,modified=694660340,pbcinstance,class=McompilerMethodNode,selector=needsFrame,codeType=rtalk,modified=671559480,pbc=0400000040023430210824020200000007230210000473697A652402020000001323021001013E240223020A012C02240223021E01014003343136210724020200000033230210000473697A652402020000003F23021001013E240223020A022C02240223021E010223012402020000005C230210000768617353656E64240223020A032C02240223021E01032301240202000000792302100013686173556E6F7074696D697A6564426C6F636B240223020A042C02240223021E01042C03240223021Einstance,class=McompilerMethodNode,selector=temporaries,codeType=rtalk,modified=671559480,pbc=040000002108240223021Einstance,class=McompilerMethodNode,selector=primitive:,codeType=rtalk,modified=713126875,pbc=04010000230124032303220923031Einstance,class=McompilerMethodNode,selector=whoContains:,codeType=rtalk,modified=671559480,pbc=0601000481002C0126012C01260223012603180101210A2403020000004E2303100103646F3A24032302240323031E050101800023012403230326022503250224030200000016230310010C77686F436F6E7461696E733A2403230326010200000026230310000569734E696C2403230309012501240323031F080201012C012403010223031Einstance,class=McompilerMethodNode,selector=selector:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220623021Einstance,class=McompilerMethodNode,selector=push,codeType=rtalk,modified=671559480,pbc=040000002301240223021Einstance,class=McompilerMethodNode,selector=apiDescriptor,codeType=rtalk,modified=671559480,pbc=04000000210B240223021Einstance,class=McompilerMethodNode,selector=statements,codeType=rtalk,modified=671559480,pbc=04000000210A240223021Einstance,class=McompilerMethodNode,selector=primitive,codeType=rtalk,modified=713126815,pbc=040000002109240223021Einstance,class=McompilerMethodNode,selector=hasBlock,codeType=rtalk,modified=671559480,pbc=0600000281002C012601180101210A2402020000003C2302100103646F3A24022C03240223021E050101800023012403230326012501240302000000142303100008686173426C6F636B240323030A012C02240323031F080201012C012403010223031Einstance,class=McompilerMethodNode,selector=hasAssign,codeType=rtalk,modified=671559480,pbc=0600000281002C012601180101210A2402020000003C2302100103646F3A24022C03240223021E05010180002301240323032601250124030200000014230310000968617341737369676E240323030A012C02240323031F080201012C012403010223031Einstance,class=McompilerMethodNode,selector=temporaries:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220823021Einstance,class=McompilerSymbolNode,selector=push,codeType=rtalk,modified=671559480,pbc=040000002301240223021Einstance,class=McompilerSymbolNode,selector=isAssign,codeType=rtalk,modified=671559480,pbc=04000000400336393521062402020000000723021001023D3D240223021Einstance,class=McompilerSymbolNode,selector=isAssignOp,codeType=rtalk,modified=671559480,pbc=04000000400336393521062402020000000723021001023D3D240223021Einstance,class=McompilerSymbolNode,selector=isSymbol:,codeType=rtalk,modified=671559480,pbc=04010000230121062403020000000623031001023D3D240323031Einstance,class=McompilerSymbolNode,selector=isChar:,codeType=rtalk,modified=671559480,pbc=04010000230121062403020000000623031001023D3D240323031Einstance,class=McompilerSymbolNode,selector=isKeyword,codeType=rtalk,modified=671559480,pbc=0400000021062402020000000423021000086973537472696E67240223020A012106240202000000182302100008697353796D626F6C2402020000002423021000036E6F742402010123021Einstance,class=McompilerSymbolNode,selector=isSymbol,codeType=rtalk,modified=671559480,pbc=040000002106240202000000042302100008697353796D626F6C240223021Einstance,class=McompilerAssignNode,selector=hasUnoptimizedBlock,codeType=rtalk,modified=671559480,pbc=0400000121072402020000000423021000076973426C6F636B2402230224042107240202000000182302100013686173556E6F7074696D697A6564426C6F636B2402230223042402020000002A23021001017C240223020A012C02240223021E080201012C03240223021E010223011Einstance,class=McompilerAssignNode,selector=hasAssign,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerAssignNode,selector=assignees,codeType=rtalk,modified=671559480,pbc=040000002106240223021Einstance,class=McompilerAssignNode,selector=push,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A73657449635374617274240223012402020000001423021000046C6F6164240221052402020000002423021000057075736852240223012402020000003423021000087365744963456E64240223011Einstance,class=McompilerAssignNode,selector=isAssign,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerAssignNode,selector=whoContains:,codeType=rtalk,modified=671559480,pbc=040100012301210724030200000006230310010C77686F436F6E7461696E733A2403230324050200000016230310000569734E696C2403230309012305240323031E01012301230224030200000035230311010C77686F436F6E7461696E733A0E4D636F6D70696C65724E6F646573240323031Einstance,class=McompilerAssignNode,selector=load,codeType=rtalk,modified=671559480,pbc=0600000201002C012601230124020200000004230210000A73657449635374617274240221072402020000001423021000046C6F616424021801012106240202000000472302100103646F3A240223012402020000005723021000087365744963456E64240223011E05010100002301240323032601250124030200000034230310000573746F7265240323031Einstance,class=McompilerAssignNode,selector=hasSend,codeType=rtalk,modified=671559480,pbc=04000000210724020200000004230210000768617353656E64240223020A012C02240223021E01012C03240223021Einstance,class=McompilerAssignNode,selector=expression:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220723021Einstance,class=McompilerAssignNode,selector=hasBlock,codeType=rtalk,modified=671559480,pbc=040000002107240202000000042302100008686173426C6F636B240223020A012C02240223021E01012C03240223021Einstance,class=McompilerAssignNode,selector=whoContainsLiteral:,codeType=rtalk,modified=671559480,pbc=040100012301210724030200000006230310011377686F436F6E7461696E734C69746572616C3A24032303240523052403020000001A230310000569734E696C2403230309012305240323031E01012C01240323031Einstance,class=McompilerAssignNode,selector=assignees:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220623021Einstance,class=Number,selector=asHexString,codeType=rtalk,modified=671559480,pbc=040000022C01400C33577269746553747265616D15020D7072696D476574476C6F62616C0024054004343130302C01400733537472696E6715020D7072696D476574476C6F62616C002402020000001923021001046E65773A2402230223052402020000002B23021001036F6E3A240223022404230423012402020000004123021001097072696E744865783A2402020000004D2302100008636F6E74656E747324020200000059230210000A7472696D426C616E6B73240223021Einstance,class=McompilerPbcBlockNode,selector=hasUnoptimizedBlock,codeType=rtalk,modified=671559480,pbc=0600000281002C0126011801012107240202000000622302100103646F3A24022C03240223021E0501018001230124032303260125012403020000001423031000076973426C6F636B2403230324052501240302000000282303100013686173556E6F7074696D697A6564426C6F636B2403230323052403020000003A23031001017C240323030A012C02240323031F080201012C012403010223031Einstance,class=McompilerPbcBlockNode,selector=arguments:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220623021Einstance,class=McompilerPbcBlockNode,selector=isBlock,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerPbcBlockNode,selector=isNoArgBlock,codeType=rtalk,modified=671559480,pbc=0400000040023430210624020200000007230210000473697A652402020000001323021001013D240223021Einstance,class=McompilerPbcBlockNode,selector=statements:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220723021Einstance,class=McompilerPbcBlockNode,selector=pushReceiver,codeType=rtalk,modified=705399896,pbcinstance,class=McompilerPbcBlockNode,selector=arguments,codeType=rtalk,modified=671559480,pbc=040000002106240223021Einstance,class=McompilerPbcBlockNode,selector=loadReceiver,codeType=rtalk,modified=705920777,pbcinstance,class=McompilerPbcBlockNode,selector=whoContainsLiteral:,codeType=rtalk,modified=671559480,pbc=0601000481002C0126012C012602230126031801012107240302000000522303100103646F3A24032C01240323031E050101800023012403230326022503250224030200000016230310011377686F436F6E7461696E734C69746572616C3A24032303260125012403020000002A230310000569734E696C2403230309012501240323031F080201012C012403010223031Einstance,class=McompilerPbcBlockNode,selector=epilogue,codeType=rtalk,modified=671559480,pbc=04000000210524020200000004230210001272657475726E46616C6C4F7574426C6F636B240223011Einstance,class=McompilerPbcBlockNode,selector=argumentsToStack,codeType=rtalk,modified=671559480,pbc=040000042C012405210624020200000004230210000473697A6524022302240440023431312406230424070801010223062402230224052305210524020200000030230210010D6C6F6164417267756D656E743A24022305210624020200000042230210010361743A2402020000004E230210000573746F72652402230640023431020000005F1001012B31240601012307020000006E1001013C240223020A0223011Einstance,class=McompilerPbcBlockNode,selector=push,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A736574496353746172742402230124020200000014230210000C707573685265636569766572240223012402020000002423021000087365744963456E64240223011Einstance,class=McompilerPbcBlockNode,selector=whoContains:,codeType=rtalk,modified=671559480,pbc=0601000481002C0126012C0126022301260318010121072403020000004E2303100103646F3A24032503230224030200000060230311010C77686F436F6E7461696E733A0E4D636F6D70696C65724E6F646573240323031E050101800023012403230326022503250224030200000016230310010C77686F436F6E7461696E733A2403230326010200000026230310000569734E696C2403230309012501240323031F080201012C012403010223031Einstance,class=McompilerPbcBlockNode,selector=load,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A736574496353746172742402230124020200000014230210000C6C6F61645265636569766572240223012402020000002423021000087365744963456E64240223011Einstance,class=McompilerPbcBlockNode,selector=hasAssign,codeType=rtalk,modified=671559480,pbc=0600000281002C01260118010121072402020000003C2302100103646F3A24022C03240223021E05010180002301240323032601250124030200000014230310000968617341737369676E240323030A012C02240323031F080201012C012403010223031Einstance,class=McompilerPbcBlockNode,selector=optimizeBlock,codeType=rtalk,modified=677169498,pbcinstance,class=McompilerPbcBlockNode,selector=hasBlock,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerBase,selector=setIcEnd,codeType=rtalk,modified=671559480,pbc=040000002105240202000000042302100002494324022302220223011Einstance,class=McompilerBase,selector=isAssignOp,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=target:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220523021Einstance,class=McompilerBase,selector=isSuper,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=isAssign,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=setIcStart,codeType=rtalk,modified=671559480,pbc=040000002105240202000000042302100002494324022302220123011Einstance,class=McompilerBase,selector=position,codeType=rtalk,modified=694659197,pbc=040000002103240223021Einstance,class=McompilerBase,selector=addsConstantTo:,codeType=rtalk,modified=671559480,pbc=040100002C01240323031Einstance,class=McompilerBase,selector=compiler,codeType=rtalk,modified=671559480,pbc=040000002105240223021Einstance,class=McompilerBase,selector=endPosition,codeType=rtalk,modified=671559480,pbc=040000002104240223021Einstance,class=McompilerBase,selector=hasUnoptimizedBlock,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=isCascade,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=isSymbol,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=symbol,codeType=rtalk,modified=671559480,pbc=040000002C01240223021Einstance,class=McompilerBase,selector=isLessByte,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=genRelop:,codeType=rtalk,modified=671559480,pbc=040100002C01240323031Einstance,class=McompilerBase,selector=whoContains:,codeType=rtalk,modified=671559480,pbc=04010000210124030200000004230310000569734E696C240323030901210224030200000018230310000569734E696C2403010123030A022C01240323031E01022101210223012403020000003B230310020C6265747765656E3A616E643A240323030A032302240323031E01032C01240323031Einstance,class=McompilerBase,selector=isSelf,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=isVariable,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=position:,codeType=rtalk,modified=694659213,pbc=04010000230124032303220323021Einstance,class=McompilerBase,selector=compute,codeType=rtalk,modified=671559480,pbc=0400000023012402020000000423021000046C6F6164240223011Einstance,class=McompilerBase,selector=icEnd,codeType=rtalk,modified=694658955,pbc=040000002102240223021Einstance,class=McompilerBase,selector=compiler:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220523021Einstance,class=McompilerBase,selector=icStart,codeType=rtalk,modified=694658940,pbc=040000002101240223021Einstance,class=McompilerBase,selector=isPseudo,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=endPosition:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220423021Einstance,class=McompilerBase,selector=isChar:,codeType=rtalk,modified=671559480,pbc=040100002C03240323031Einstance,class=McompilerBase,selector=isSymbol:,codeType=rtalk,modified=671559480,pbc=040100002C03240323031Einstance,class=McompilerBase,selector=hasAssign,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=hasSend,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=isByte,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=isLeaf,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=isKeyword,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=push,codeType=rtalk,modified=582643346,pbc=04000000230124020200000004230210000A73657449635374617274240223012402020000001423021000046C6F6164240221052402020000002423021000057075736852240223012402020000003423021000087365744963456E64240223011Einstance,class=McompilerBase,selector=whoContainsLiteral:,codeType=rtalk,modified=671559480,pbc=040100002C01240323031Einstance,class=McompilerBase,selector=isReturn,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=isBlock,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=isInteger,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=hasBlock,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=firstArg,codeType=rtalk,modified=671559480,pbc=040000002301240223021Einstance,class=McompilerBase,selector=isLiteral,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=atEnd,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=McompilerBase,selector=target,codeType=rtalk,modified=671559480,pbc=040000002105240223021Einstance,class=McompilerBase,selector=isNoArgBlock,codeType=rtalk,modified=671559480,pbc=040000002C03240223021Einstance,class=RtClass,selector=recompile:,codeType=rtalk,modified=696329251,pbcinstance,class=RtClass,selector=compile:notifying:,codeType=rtalk,modified=714346389,pbcinstance,class=McompilerParser,selector=primary,codeType=rtalk,modified=582644615,pbcinstance,class=McompilerParser,selector=extendedProtocol:,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerParser,selector=scanner:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220223021Einstance,class=McompilerParser,selector=argumentMissing,codeType=rtalk,modified=671559480,pbc=04000000401131617267756D656E74206D697373696E6723012402020000000723021001046572723A240223011Einstance,class=McompilerParser,selector=binaryProtSeries:,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerParser,selector=binarySelector,codeType=rtalk,modified=671559480,pbc=040000012C0124042101240202000000042302100008697353796D626F6C2402230209012C01240223021E0101210124022302240421022402020000002923021000046E6578742402230222012304240223021Einstance,class=McompilerParser,selector=messagePattern,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerParser,selector=unarySelector,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerParser,selector=cascadeExtension:,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerParser,selector=javaApi:,codeType=rtalk,modified=713143963,pbcinstance,class=McompilerParser,selector=method,codeType=rtalk,modified=582644584,pbcinstance,class=McompilerParser,selector=keywordProtocol:,codeType=rtalk,modified=582644788,pbcinstance,class=McompilerParser,selector=statementSeries:,codeType=rtalk,modified=671559480,pbc=04010000080101022C01240301012301230224030200000010230310010A73746174656D656E743A2403230309022C01240323021Einstance,class=McompilerParser,selector=temporaries,codeType=rtalk,modified=582645009,pbcinstance,class=McompilerParser,selector=primitive:,codeType=rtalk,modified=713134650,pbc=040100022C0124054002333C2101240302000000072303100109697353796D626F6C3A2403230309014002343023012403020000001E230310010A7072696D69746976653A240323031E010121022403020000003323031000046E6578742403230322010200000043230310000969734B6579776F7264240323030A02210124030200000057230310000576616C756524030200000063230310000B61734C6F776572436173652403230324052305210124030200000079230310010676616C75653A24034007316A7072696D3A23052403020000008C23031001013D240323030A03400234312301240302000000A3230310010A7072696D69746976653A240323012302240302000000B5230310010E6A6176615072696D69746976653A240323031E01034008316A7274616C6B3A2305240302000000CD23031001013D240323030A04400234322301240302000000E4230310010A7072696D69746976653A240323012302240302000000F6230310010E6A6176615072696D69746976653A240323031E0104400A316A7669727475616C3A23052403020000010E23031001013D240323030A0540023433230124030200000125230310010A7072696D69746976653A2403230123022403020000013723031001086A6176614170693A240323031E01054009316A7374617469633A23052403020000014F23031001013D240323030A0640023434230124030200000166230310010A7072696D69746976653A2403230123022403020000017823031001086A6176614170693A240323031E0106230224062305401331756E6B6E6F776E206B6579776F7264202D202403020000019423031001012C240323032306240302000001A623031001046572723A24032102240302000001B623031000046E65787424032303220101024021316D697373696E67207072696D6974697665206E616D65206F72206E756D6265722302240302000001CF23031001046572723A24032102240302000001DF23031000046E657874240323032201230324064002333E2306240302000001FA2303100109697353796D626F6C3A240323030907400C316D697373696E6720223E2223022403020000021123031001046572723A2403010721022403020000022323031000046E6578742403230322012301240323031Einstance,class=McompilerParser,selector=unaryProtocol:,codeType=rtalk,modified=671559480,pbc=04010002230224030200000004230310000D756E61727953656C6563746F722403230324050200000014230310000569734E696C240323030A012C01240323031E010140014223012406230523062403020000003A230310010973656C6563746F723A24032306240621012403020000004E2303100008706F736974696F6E24032303230624030200000060230310010C656E64506F736974696F6E3A2403230624030200000070230310010A617267756D656E74733A240323031Einstance,class=McompilerParser,selector=compiler:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220423021Einstance,class=McompilerParser,selector=binaryProtocol:,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerParser,selector=statements,codeType=rtalk,modified=671559480,pbc=040000012C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002402020000000B23021000036E65772402230224042304230124020200000021230210011073746174656D656E745365726965733A24022304240223021Einstance,class=McompilerParser,selector=statement:,codeType=rtalk,modified=671559480,pbc=040100042C012407230224030200000004230310000A65787072657373696F6E2403230324050200000014230310000569734E696C240323030901230523012403020000002A23031001046164643A2403400336343621012403020000003D23031001076973436861723A240323030A0221022403020000005123031000046E6578742403230322012C02240323031E01022C03240323031E0101400336393421012403020000007A23031001076973436861723A240323030A0321012403020000008E2303100008706F736974696F6E2403230324072102240302000000A223031000046E6578742403230322012302240302000000B6230310000A65787072657373696F6E24032303240502000000C6230310000569734E696C240323030A044015316E6F2072657475726E2065787072657373696F6E2302240302000000DD23031001046572723A2403010423052104240302000000F1230310000A6E6F646552657475726E240302000000FD23031000036E657724032303240821042308240302000001132303100109636F6D70696C65723A24032308240823072308240302000001292303100109706F736974696F6E3A24032308240821012403020000013D2303100008706F736974696F6E2403230323082403020000014F230310010C656E64506F736974696F6E3A240323082403020000015F230310010B65787072657373696F6E3A2403230323012403020000017123031001046164643A240301032C03240323031Einstance,class=McompilerParser,selector=keywordPattern,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerParser,selector=ifError:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220323021Einstance,class=McompilerParser,selector=binaryPattern,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerParser,selector=err:,codeType=rtalk,modified=671559480,pbc=0401000121032405230121012403020000000A2303100008706F736974696F6E2403230323052403020000001C230310020C76616C75653A76616C75653A240323021Einstance,class=McompilerParser,selector=blockArguments,codeType=rtalk,modified=582644380,pbcinstance,class=McompilerParser,selector=token:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220123021Einstance,class=McompilerParser,selector=block,codeType=rtalk,modified=582644341,pbcinstance,class=McompilerParser,selector=expression,codeType=rtalk,modified=671559480,pbc=040000042C0124042C0124052101240202000000042302100008706F736974696F6E240223022406210124020200000018230210000A69735661726961626C65240223020A01210124022302240521022402020000003423021000046E6578742402230222010200000044230210000A697341737369676E4F70240223020A0221022402020000005823021000046E65787424022302220123012402020000006C230210000A65787072657373696F6E240223022404020000007C230210000569734E696C240223020A0340133165787072657373696F6E206D697373696E6723012402020000009323021001046572723A240201032304240202000000A52302100008697341737369676E240223020A0423052304240202000000BB230210000961737369676E656573240202000000C723021001046164643A24022304240223021E080501042104240202000000E2230210000A6E6F646541737369676E240202000000EE23021000036E657724022302240721042307240202000001042302100109636F6D70696C65723A240223072407230423072402020000011A230210010B65787072657373696F6E3A24022307240723062307240202000001302302100109706F736974696F6E3A2402230724072101240202000001442302100008706F736974696F6E24022302230724020200000156230210010C656E64506F736974696F6E3A24022307240723052C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C00240202000001732302100105776974683A24022302230724020200000185230210010A61737369676E6565733A240223021E0105080601022C0124020106080701012301240202000001A823021000077072696D61727924022302240502000001B8230210000569734E696C240223020A082C01240223021E080901082C0124020109010723052301240202000001E12302100111657874656E64656450726F746F636F6C3A24022302240402000001F1230210000569734E696C240223020A0A401E31636F6D70696C6572206E696C20657874656E64656450726F746F636F6C23012402020000020823021001066572726F723A2402010A21012402020000021A23021000056174456E6424022302090B400336343621012402020000023123021001076973436861723A24022302090C400336393321012402020000024823021001076973436861723A24022302090D400336343121012402020000025F23021001076973436861723A2402010D010C010B23020A0E2304240223021E010E2101240202000002822302100008697353796D626F6C24022302090F210124020200000296230210000A69735661726961626C652402010F23020A10401931696E636F72726563742073656C6563746F722075736167652301240202000002AF23021001046572723A24020811011040133173686F756C642062652073656C6563746F722301240202000002C623021001046572723A2402011123011Einstance,class=McompilerParser,selector=javaPrimitive:,codeType=rtalk,modified=713134361,pbcinstance,class=McompilerParser,selector=token,codeType=rtalk,modified=671559480,pbc=040000002101240223021Einstance,class=McompilerParser,selector=unaryProtSeries:,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerLeafNode,selector=isLeaf,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerLeafNode,selector=value:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220623021Einstance,class=McompilerLeafNode,selector=value,codeType=rtalk,modified=671559480,pbc=040000002106240223021Einstance,class=Object,selector=asPbcString,codeType=rtalk,modified=667300334,pbc=0400000023012402020000000423021000086173537472696E6724020200000010230210000B61734279746541727261792402020000001C230210000B6173486578537472696E67240223021Einstance,class=RtCompiledMethod,selector=jvmBytes:,codeType=rtalk,modified=677346572,pbc=04010000230124032303220223021Einstance,class=RtCompiledMethod,selector=recompile,codeType=rtalk,modified=709798551,pbc=040000022C012402230222022C012402230222012C01400933436F6D70696C657215020D7072696D476574476C6F62616C00240523012402020000001F2302100006736F7572636524022302230124020200000031230210000A636C6173734669656C6424022302230524020200000043230210020B636F6D70696C653A696E3A2402230224042C0123042402020000005923021001023D3D240223020A012C01240223021E01012301240523042402020000007A230210000576616C7565240202000000862302100008706263427974657324022302230524020200000098230210010970626342797465733A240223011Einstance,class=RtCompiledMethod,selector=pbcSource,codeType=rtalk,modified=705940954,pbcinstance,class=McompilerObjectNode,selector=storeGlobal,codeType=rtalk,modified=726030995,pbc=040000022C012405210824020200000004230210000D69734173736F63696174696F6E24022302090121082402230224050802010121082402020000002423021000036B6579240223022405010223052C014008335274436C61737315020D7072696D476574476C6F62616C0024020200000043230210010C636C6173734578697374733A240223020A0340163163616E27742061737369676E20746F20636C617373210321052402020000005C23021002076572723A61743A240201032108210524020200000070230210010C73746F7265476C6F62616C3A240223011Einstance,class=McompilerObjectNode,selector=binding,codeType=rtalk,modified=671559480,pbc=040000002108240223021Einstance,class=McompilerObjectNode,selector=type:binding:,codeType=rtalk,modified=671559480,pbc=040200002301240423042207230224042304220823031Einstance,class=McompilerObjectNode,selector=storeClassVar,codeType=rtalk,modified=715019480,pbc=040000002108210524020200000006230210010E73746F7265436C6173735661723A240223011Einstance,class=McompilerObjectNode,selector=mustBeLocal,codeType=rtalk,modified=671559480,pbc=040000002106240202000000042302100005666972737424020200000010230210000B69734C6F77657243617365240223020901401B316D7573742073746172742077697468206C6F7765722063617365210321052402020000002923021002076572723A61743A2402080201012C012402010223011Einstance,class=McompilerObjectNode,selector=isVariable,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerObjectNode,selector=isSuper,codeType=rtalk,modified=671559480,pbc=04000000400631737570657221062402020000000723021001013D240223021Einstance,class=McompilerObjectNode,selector=push,codeType=rtalk,modified=715022267,pbcinstance,class=McompilerObjectNode,selector=load,codeType=rtalk,modified=715022246,pbcinstance,class=McompilerObjectNode,selector=isSelf,codeType=rtalk,modified=671559480,pbc=0400000040053173656C6621062402020000000723021001013D240223021Einstance,class=McompilerObjectNode,selector=store,codeType=rtalk,modified=715019446,pbcinstance,class=McompilerObjectNode,selector=isPseudo,codeType=rtalk,modified=671559480,pbc=040000004005317472756521062402020000000723021001013D24022302090140063166616C736521062402020000001E23021001013D2402230209024004316E696C21062402020000003523021001013D24022302090340053173656C6621062402020000004C23021001013D240223020904400631737570657221062402020000006323021001013D2402010401030102010123020A052C02240223021E01052C03240223021Einstance,class=McompilerObjectNode,selector==,codeType=rtalk,modified=671559480,pbc=040100012C014012334D636F6D70696C65724C6561664E6F646515020D7072696D476574476C6F62616C0023012403020000000D230310010969734B696E644F663A240323030A0121062405230124030200000025230310000576616C75652403230323052403020000003723031001013D2403010123031Einstance,class=McompilerObjectNode,selector=type,codeType=rtalk,modified=671559480,pbc=040000002107240223021Einstance,class=McompilerReturnNode,selector=hasUnoptimizedBlock,codeType=rtalk,modified=671559480,pbc=0400000021062402020000000423021000076973426C6F636B240223020A012C02240223021E01012106240202000000212302100013686173556E6F7074696D697A6564426C6F636B240223021Einstance,class=McompilerReturnNode,selector=hasBlock,codeType=rtalk,modified=671559480,pbc=040000002106240202000000042302100008686173426C6F636B240223021Einstance,class=McompilerReturnNode,selector=push,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A73657449635374617274240223012402020000001423021000046C6F6164240221052402020000002423021000057075736852240223012402020000003423021000087365744963456E64240223011Einstance,class=McompilerReturnNode,selector=whoContains:,codeType=rtalk,modified=671559480,pbc=040100012C012405210124030200000004230310000569734E696C240323030901210224030200000018230310000569734E696C2403010123030A022C01240323031E01022101210223012403020000003B230310020C6265747765656E3A616E643A2403230309032C01240323031E0103230121062403020000005A230310010C77686F436F6E7461696E733A240323032405020000006A230310000569734E696C2403230309042305240323031E01042302240323031Einstance,class=McompilerReturnNode,selector=load,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A73657449635374617274240221062402020000001423021000046C6F61642402210524020200000024230210000672657475726E240223012402020000003423021000087365744963456E64240223021Einstance,class=McompilerReturnNode,selector=hasSend,codeType=rtalk,modified=671559480,pbc=04000000210624020200000004230210000768617353656E64240223021Einstance,class=McompilerReturnNode,selector=expression:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220623021Einstance,class=McompilerReturnNode,selector=hasAssign,codeType=rtalk,modified=671559480,pbc=04000000210624020200000004230210000968617341737369676E240223021Einstance,class=McompilerReturnNode,selector=isReturn,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerReturnNode,selector=whoContainsLiteral:,codeType=rtalk,modified=671559480,pbc=040100002301210624030200000006230310011377686F436F6E7461696E734C69746572616C3A240323031Einstance,class=McompilerSourceScanner,selector=getFloatForSAVE:integer:,codeType=rtalk,modified=697231658,pbcinstance,class=McompilerSourceScanner,selector=getSymbol:,codeType=rtalk,modified=582645259,pbcinstance,class=McompilerSourceScanner,selector=getFloatFor:integer:,codeType=rtalk,modified=697231606,pbcinstance,class=McompilerSourceScanner,selector=nextDigit:,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerSourceScanner,selector=getIdentifierOrKeyword,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerSourceScanner,selector=getFloatExponentFor:number:,codeType=rtalk,modified=697217324,pbc=04020003400336343521012404020000000723041001087065656B466F723A240423042407400334313023032404020000001E230410011267657456616C75655769746852616469783A2404230424062307240423040A0123062404020000003A23041000076E656761746564240423042406010123012404020000005023041000076173466C6F617424042304240823062404020000006423041000076173466C6F6174240423042308240402000000762304100109726169736564546F3A2404230423022404020000008823041001012A240423041Einstance,class=McompilerSourceScanner,selector=getNumberWithRadix:position:,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerSourceScanner,selector=nextApiWord,codeType=rtalk,modified=713143714,pbcinstance,class=McompilerSourceScanner,selector=getCharacterConstant,codeType=rtalk,modified=671559480,pbc=0400000121012402020000000423021000056174456E64240223020A01230124044012316D697373696E672063686172616374657221012402020000001F2302100008706F736974696F6E2402230223042402020000003123021002096572726F723A61743A240223021E0101210324020200000046230210000B6E6F64654C69746572616C2402020000005223021000036E657724022302240421012402020000006623021000046E65787424022302230424020200000078230210010676616C75653A240223042404210323042402020000008E2302100109636F6D70696C65723A240223042404400234312101240202000000A52302100008706F736974696F6E240202000000B123021001012D240223022304240202000000C32302100109706F736974696F6E3A240223021Einstance,class=McompilerSourceScanner,selector=getArrayConstant,codeType=rtalk,modified=673907394,pbcinstance,class=McompilerSourceScanner,selector=getSymbolOrArrayConstant,codeType=rtalk,modified=673907416,pbcinstance,class=McompilerSourceScanner,selector=getNumberOrSelector,codeType=rtalk,modified=582645113,pbcinstance,class=McompilerSourceScanner,selector=skipComment,codeType=rtalk,modified=582645229,pbc=0400000140033633342101240202000000072302100107736B6970546F3A24022302090123012404401331756E66696E697368656420636F6D6D656E74210124020200000022230210000473697A652402230223042402020000003423021002096572726F723A61743A2402080201012C012402010223011Einstance,class=McompilerSourceScanner,selector=getValueWithRadix:,codeType=rtalk,modified=671559480,pbc=040100042C012405400234302403230324062C03240323032407080101022C022403230324072305230123062403020000002523031001012A2403020000003123031001012B24032303240601012301230224030200000049230310010A6E65787444696769743A2403230324050200000059230310000569734E696C240323030A02230724032303090323022408400A316E6F2064696769747321012403020000007C2303100008706F736974696F6E2403230323082403020000008E23031002096572726F723A61743A240301032306240323031Einstance,class=McompilerSourceScanner,selector=error:at:,codeType=rtalk,modified=671559480,pbc=0402000023012302210224040200000008230410020C76616C75653A76616C75653A240423031Einstance,class=McompilerSourceScanner,selector=getExponentFor:number:,codeType=rtalk,modified=582645302,pbc=04020002400336343521012404020000000723041001087065656B466F723A240423042407400334313023032404020000001E230410011267657456616C75655769746852616469783A2404230424062307240423040A0123062404020000003A23041000076E656761746564240423042406010123062301240402000000522304100110726169736564546F496E74656765723A2404230423022404020000006423041001012A240423041Einstance,class=McompilerSourceScanner,selector=getBinarySelector,codeType=rtalk,modified=676575071,pbcinstance,class=McompilerSourceScanner,selector=on:for:errorBlock:,codeType=rtalk,modified=674045595,pbc=0403000023012C01400B335265616453747265616D15020D7072696D476574476C6F62616C002405020000000D23051001036F6E3A2405230522012302240523052203230324052305220223041Einstance,class=McompilerSourceScanner,selector=getString,codeType=rtalk,modified=582645472,pbcinstance,class=McompilerSourceScanner,selector=nextWord,codeType=rtalk,modified=706316027,pbcinstance,class=McompilerSourceScanner,selector=skipToIdentifierEnd,codeType=rtalk,modified=671559480,pbc=040000000801010221012402020000000823021000046E65787424020200000014230210000E6973416C7068614E756D657269632402230209034003342D3121012402020000002B2302100105736B69703A24022301240223021E080401032C0124020104010121012402020000004E23021000056174456E64240223020A022C01240223011Einstance,class=McompilerSourceScanner,selector=getNumber:radixOK:,codeType=rtalk,modified=582645349,pbcinstance,class=McompilerSourceScanner,selector=getColonOrLeftArrow,codeType=rtalk,modified=671559480,pbc=04000002210324020200000004230210000C6E6F646553656C6563746F722402020000001023021000036E657724022302240521032305240202000000262302100109636F6D70696C65723A24022305240521012402020000003A2302100008706F736974696F6E2402230223052402020000004C2302100109706F736974696F6E3A240223022404400336363121012402020000006323021001087065656B466F723A240223020A01400336393523042402020000007A230210010676616C75653A240223021E080201014003363538230424020200000094230210010676616C75653A240223021E010223011Einstance,class=McompilerSourceScanner,selector=next,codeType=rtalk,modified=676411623,pbcinstance,class=String,selector=pbcConvert,codeType=rtalk,modified=667335183,pbc=04000000230124020200000004230210000C7269486578546F42797465732402020000001023021000086173537472696E67240223021Einstance,class=String,selector=riRemoveChar:,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerEndNode,selector=atEnd,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerBlockNode,selector=hasUnoptimizedBlock,codeType=rtalk,modified=671559480,pbc=0600000281002C0126011801012107240202000000622302100103646F3A24022C03240223021E0501018001230124032303260125012403020000001423031000076973426C6F636B2403230324052501240302000000282303100013686173556E6F7074696D697A6564426C6F636B2403230323052403020000003A23031001017C240323030A012C02240323031F080201012C012403010223031Einstance,class=McompilerBlockNode,selector=arguments:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220623021Einstance,class=McompilerBlockNode,selector=isBlock,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerBlockNode,selector=isNoArgBlock,codeType=rtalk,modified=671559480,pbc=0400000040023430210624020200000007230210000473697A652402020000001323021001013D240223021Einstance,class=McompilerBlockNode,selector=statements:,codeType=rtalk,modified=671559480,pbc=04010000230124032303220723021Einstance,class=McompilerBlockNode,selector=pushReceiver,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerBlockNode,selector=arguments,codeType=rtalk,modified=671559480,pbc=040000002106240223021Einstance,class=McompilerBlockNode,selector=loadReceiver,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerBlockNode,selector=whoContainsLiteral:,codeType=rtalk,modified=671559480,pbc=0601000481002C0126012C012602230126031801012107240302000000522303100103646F3A24032C01240323031E050101800023012403230326022503250224030200000016230310011377686F436F6E7461696E734C69746572616C3A24032303260125012403020000002A230310000569734E696C2403230309012501240323031F080201012C012403010223031Einstance,class=McompilerBlockNode,selector=epilogue,codeType=rtalk,modified=671559480,pbc=04000000210524020200000004230210001272657475726E46616C6C4F7574426C6F636B240223011Einstance,class=McompilerBlockNode,selector=argumentsToStack,codeType=rtalk,modified=671559480,pbc=040000042C012405210624020200000004230210000473697A6524022302240440023431312406230424070801010223062402230224052305210524020200000030230210010D6C6F6164417267756D656E743A24022305210624020200000042230210010361743A2402020000004E230210000573746F72652402230640023431020000005F1001012B31240601012307020000006E1001013C240223020A0223011Einstance,class=McompilerBlockNode,selector=push,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A736574496353746172742402230124020200000014230210000C707573685265636569766572240223012402020000002423021000087365744963456E64240223011Einstance,class=McompilerBlockNode,selector=whoContains:,codeType=rtalk,modified=671559480,pbc=0601000481002C0126012C0126022301260318010121072403020000004E2303100103646F3A24032503230224030200000060230311010C77686F436F6E7461696E733A0E4D636F6D70696C65724E6F646573240323031E050101800023012403230326022503250224030200000016230310010C77686F436F6E7461696E733A2403230326010200000026230310000569734E696C2403230309012501240323031F080201012C012403010223031Einstance,class=McompilerBlockNode,selector=load,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A736574496353746172742402230124020200000014230210000C6C6F61645265636569766572240223012402020000002423021000087365744963456E64240223011Einstance,class=McompilerBlockNode,selector=hasAssign,codeType=rtalk,modified=671559480,pbc=0600000281002C01260118010121072402020000003C2302100103646F3A24022C03240223021E05010180002301240323032601250124030200000014230310000968617341737369676E240323030A012C02240323031F080201012C012403010223031Einstance,class=McompilerBlockNode,selector=optimizeBlock,codeType=rtalk,modified=677169498,pbcinstance,class=McompilerBlockNode,selector=hasBlock,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerPbcCascadeNode,selector=hasUnoptimizedBlock,codeType=rtalk,modified=671559480,pbc=0400000021072402020000000423021000076973426C6F636B240223020A012C02240223021E080201012301240202000000232302110013686173556E6F7074696D697A6564426C6F636B174D636F6D70696C65725062634D6573736167654E6F6465240223021E010223011Einstance,class=McompilerPbcCascadeNode,selector=categorize,codeType=rtalk,modified=671559480,pbc=0400000040023430210624020200000007230210000473697A652402020000001323021001013D240223020A012C03240223021E01012C02240223021Einstance,class=McompilerPbcCascadeNode,selector=push,codeType=rtalk,modified=671559480,pbc=04000000230124020200000004230210000A73657449635374617274240223012402020000001423021000046C6F6164240223012402020000002423021000087365744963456E64240223011Einstance,class=McompilerPbcCascadeNode,selector=whoContains:,codeType=rtalk,modified=671559480,pbcinstance,class=McompilerPbcCascadeNode,selector=pushReceiver,codeType=rtalk,modified=671559480,pbc=04000000210724020200000004230210000470757368240223011Einstance,class=McompilerPbcCascadeNode,selector=loadReceiver,codeType=rtalk,modified=671559480,pbc=0400000021072402020000000423021000046C6F616424022107240202000000142302100009697343617363616465240223020A012105240202000000282302100004746F735224020802010121052402020000003C230210000570757368522402010223011Einstance,class=McompilerPbcCascadeNode,selector=isCascade,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerPbcCascadeNode,selector=isSuper,codeType=rtalk,modified=671559480,pbc=04000000210724020200000004230210000769735375706572240223021Einstance,class=McompilerLiteralNode,selector=push,codeType=rtalk,modified=671559480,pbc=040000002106210524020200000006230210010C707573684C69746572616C3A240223011Einstance,class=McompilerLiteralNode,selector=load,codeType=rtalk,modified=671559480,pbc=040000002106210524020200000006230210010C6C6F61644C69746572616C3A240223011Einstance,class=McompilerLiteralNode,selector=isLiteral,codeType=rtalk,modified=671559480,pbc=040000002C02240223021Einstance,class=McompilerLiteralNode,selector=whoContainsLiteral:,codeType=rtalk,modified=671559480,pbc=04010000230121062403020000000623031001013D240323030A0123022403080201012C012403010223031Einstance,class=McompilerLiteralNode,selector=isByte,codeType=rtalk,modified=671559480,pbc=0400000021062402020000000423021000096973496E7465676572240223020A014002343040043432353521062402020000001E230210020C6265747765656E3A616E643A2402010123021Einstance,class=McompilerLiteralNode,selector=isInteger,codeType=rtalk,modified=671559480,pbc=0400000021062402020000000423021000096973496E7465676572240223021Einstance,class=RtMetaClass,selector=recompile:,codeType=rtalk,modified=696329345,pbcinstance,class=RtMetaClass,selector=compile:notifying:,codeType=rtalk,modified=714346406,pbc:SOURCE,type=classMethod,class=MCompilerEmitPbc,selector=primitive:,codeType=rtalkprimitive:arg1             "comment"          | tmp1 |          ((tmp1 := arg1 byteCodeArray) at:1) == 1             ifTrue:[^tmp1 at:2]              ifFalse:[^0]    :SOURCE,type=classMethod,class=MCompilerEmitPbc,selector=evaluate:in:to:notifying:ifFail:,codeType=rtalkevaluate:aString in:aClass to:arg3 notifying:arg4 ifFail:aBlock             "comment"          | tmp1 |               tmp1 := self new compile:('Doit ',aString)              withInstances:(aClass allInstVarNames)                 evaluating:true                     for:aClass.         ^tmp1    :SOURCE,type=classMethod,class=MCompilerEmitPbc,selector=encodeUnsignedSmallInteger:,codeType=rtalkencodeUnsignedSmallInteger: anInteger        "<modified:sys=GAKRE8CA,time=04/13/11 at 08:21:07 am>   "        "<modified:user=Roos Inst,time=06/18/08 at 02:07:29 pm>   "         "Private - encodes an integer as a ByteArray."         | array value index |         array := ByteArray new: 6.         index := 1.         value := anInteger.         [ value > 127 ]             whileTrue:                  [                  array at: index put: value \\ 128 + 128.                 value := value // 128.                 index := index + 1.                 ].         array at: index put: value.         ^array copyFrom: 1 to: index.    :SOURCE,type=classMethod,class=MCompilerEmitPbc,selector=encodeBinary:type:argument:,codeType=rtalkencodeBinary:arg1 type:arg2 argument:arg3         "<modified:sys=GAKRE8CA,time=05/10/11 at 08:26:18 pm>   "        "<modified:sys=GAKRE8CA,time=04/13/11 at 08:21:20 am>   "        "<modified:sys=GAKRE8CA,time=03/26/11 at 12:34:27 am>   "        "<modified:sys=GAKRE8CA,time=09/08/10 at 07:57:27 am>   "            "used by byte code scanner"          | tmp1 tmp2 |          tmp1 := ByteArray new:2.         arg3 <= 32             ifTrue:[tmp1 at:1 put:( (self binarySends at:arg1) at:1).                     tmp1 at:2  put:(((self binaryTypes at:arg2) bitShift:5) + ( arg3 - 1)).                     ^tmp1]             ifFalse:[ tmp1 at:1 put:16r47.                         tmp1 at:2 put:((self binaryTypes at:arg2) bitShift:5) + (self binaries at:arg1).                     ^tmp1,(self encodeUnsignedSmallInteger:arg3)]    :SOURCE,type=classMethod,class=MCompilerEmitPbc,selector=evaluate:,codeType=rtalkevaluate:arg1             "comment"          ^self evaluate:arg1 in:UndefinedObject to:nil notifying:(self class) ifFail:[^nil]    :SOURCE,type=classMethod,class=MCompilerEmitPbc,selector=compilerError:at:in:for:,codeType=rtalkcompilerError:aValue at:aInteger in:aString for:aClass        "<modified:sys=GAKRE8CA,time=06/13/11 at 10:38:30 pm>   "            "comment"              self riLogMsg:aValue,'--- compilation error in ',aClass name.             self riLogMsg:(aString copyFrom:1 to:(0 max:(aInteger - 1))).    :SOURCE,type=classMethod,class=MCompilerEmitPbc,selector=pbcCodeToDescription:,codeType=rtalkpbcCodeToDescription:aCol           "<modified:pgmr=mdr,time=08/12/13 at 05:46:00 pm>   "         "returns a new collection with each entry converted to                mnemonics"         | rtn pos line lineCount op args tmps bytes nb lb maxStack blocks sVars hex c lastPos|              aCol class = ByteArray             ifTrue:[hex := aCol asHexString]             ifFalse:[ hex := aCol ].         rtn := OrderedCollection new:(hex size).             c := hex.             pos := 1.             lastPos := 1.             lineCount := 1.             line := ' ',1 asString.             [pos <= c size] whileTrue:[                 lineCount := lineCount + ((pos - lastPos) / 2).                 lastPos := pos.                 line := ' ',lineCount asString.                 op := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                 pos := pos + 2.                 op = 16r00  ifTrue:[rtn add:(line asString,':','no op')].                 op = 16r01                     ifTrue:[                             nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.  " label"                         pos := pos + 2.                             rtn add:('label ',(nb asString))].                 op = 16r02  " line number "                     ifTrue:[                             nb := (c copyFrom:pos to:(pos + 7)) riHexConvert.                         pos := pos + 8.                          lastPos := pos.                            rtn add:('src line:',(nb asString))].                 op = 16r04  ifTrue:[ args := (c copyFrom:(pos) to:(pos + 1))riHexConvert.                                          tmps := (c copyFrom:(pos + 2) to:(pos + 5))riHexConvert.                                          rtn add:('args=',(args asString),' vars=',(tmps asString)).                                          pos := pos + 6].                 op = 16r05  ifTrue:[                                          rtn add:('Block #',(((c copyFrom:pos to:(pos + 1) )riHexConvert) asString),' args=',(((c copyFrom:(pos + 2) to:(pos + 3))riHexConvert) asString),                                             ((((c copyFrom:(pos + 4) to:(pos + 5))riHexConvert) > 127) ifTrue:[' non local rtn'] ifFalse:[' ']),                                             ' sVars=',(((c copyFrom:(pos + 6) to:(pos + 7))riHexConvert) asString)).                                          args := ((c copyFrom:(pos + 2) to:(pos + 3))riHexConvert).                                          pos := pos + 8.                                          lineCount := 0.].                 op = 16r06  ifTrue:[args := (c copyFrom:pos to:(pos + 1))riHexConvert.                                          tmps := (c copyFrom:(pos + 2) to:(pos + 5))riHexConvert.                                          blocks := (c copyFrom:(pos + 6) to:(pos + 7))riHexConvert.                                          sVars := (c copyFrom:(pos + 8) to:(pos + 9))riHexConvert.                                          rtn add:('RmtFrame args=',(args asString),' vars=',(tmps asString),' flags=',((blocks radix:16)asString),' sVars=',(sVars asString)).                                          pos := pos + 10].                 op = 16r8                     ifTrue:[                             nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                             rtn add:(line asString,':','jump to ',(nb asString))].                 op = 16r9                     ifTrue:[                             nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                             rtn add:(line asString,':','jump if true to ',(nb asString))].                 op = 16rA                     ifTrue:[                             nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                             rtn add:(line asString,':','jump if false to ',(nb asString))].                 op = 16r10                     ifTrue:[                            lb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.  " number of args "                          nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.  " size "                         pos := pos + 2.                         nb := nb * 2.  " size is number of bytes but c is in hex "                         rtn add:(line asString,':','perform ',((c copyFrom:pos to:(pos + nb - 1))asString pbcConvert)).                         pos := pos + nb].                 op = 16r11                     ifTrue:[                            lb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.  " number of args "                          nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.  " size "                         pos := pos + 2.                         nb := nb * 2.                         rtn add:(line asString,':','super perform ',((c copyFrom:pos to:(pos + nb - 1))asString pbcConvert)).                         pos := pos + nb.                         nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                          nb := nb * 2.                               rtn add:(line asString,':','super class ',((c copyFrom:pos to:(pos + nb - 1))asString pbcConvert)).                         pos := pos + nb].                 op = 16r13                     ifTrue:[                             lb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.  " number of args "                         nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                          nb := nb * 2.                               rtn add:(line asString,':','java ',((c copyFrom:pos to:(pos + nb - 1))asString pbcConvert)).                         pos := pos + nb.                         nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                          nb := nb * 2.                               rtn add:(line asString,':','java static ',((c copyFrom:pos to:(pos + nb - 1))asString pbcConvert)).                         pos := pos + nb].                 op = 16r14                     ifTrue:[                             lb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.  " number of args "                         nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                          nb := nb * 2.                               rtn add:(line asString,':','primitive ',((c copyFrom:pos to:(pos + nb - 1))asString pbcConvert)).                         pos := pos + nb].                 op = 16r15                     ifTrue:[                             lb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.  " number of args "                         nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                          nb := nb * 2.                               rtn add:(line asString,':','java ',((c copyFrom:pos to:(pos + nb - 1))asString pbcConvert)).                         pos := pos + nb.                         nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                          nb := nb * 2.                               rtn add:(line asString,':','java inline ',((c copyFrom:pos to:(pos + nb - 1))asString pbcConvert)).                         pos := pos + nb].                 op = 16r16                     ifTrue:[                             lb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.  " number of args "                         nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                          nb := nb * 2.                               rtn add:(line asString,':','primitive ',((c copyFrom:pos to:(pos + nb - 1))asString pbcConvert)).                         pos := pos + nb.                         nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                          nb := nb * 2.                               rtn add:(line asString,':','primitive class ',((c copyFrom:pos to:(pos + nb - 1))asString pbcConvert)).                         pos := pos + nb].                 op = 16r17                     ifTrue:[                          nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                           lb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.  " size "                         pos := pos + 2.                         lb = 0                            ifTrue:[lb := (c copyFrom:(pos) to:(pos + 7)) riHexConvert.                                      pos := pos + 8].      					lb := lb * 2.     					rtn add:(line asString,':','java api ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                         pos := pos + lb].                 (op = 16r18)                      ifTrue:[                             nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                            lb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                             rtn add:(line asString,':','push ',(nb asString),' arg block ',(lb asString))].                 op = 16r1E  ifTrue:[rtn add:(line asString,':','rtn')].                 op = 16r1F  ifTrue:[rtn add:(line asString,':','^rtn')].                 op = 16r21                     ifTrue:[                             nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                             rtn add:(line asString,':','push instance var ',(nb asString))].                 op = 16r22                     ifTrue:[                             nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                             rtn add:(line asString,':','pop => instance var ',(nb asString))].                 op = 16r23  " push var to stack"                     ifTrue:[                          nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                         pos := pos + 2.                         nb = (args + 1)                              ifTrue:[rtn add:(line asString,':','push self ')]                             ifFalse:[    (nb < (args + 1))                                  ifTrue:[rtn add:(line asString,':','push arg ',((nb) asString))]                                 ifFalse:[nb = (args + 2)  ifTrue:[rtn add:(line asString,':','push eax')].                                            nb = (args + 3)  ifTrue:[rtn add:(line asString,':','push edx')].                                            nb > (args + 3)                                                 ifTrue:[rtn add:(line asString,':','push var ',((nb - args - 3) asString))]]].].                 op = 16r24  " pop to var "                     ifTrue:[                         nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                         pos := pos + 2.                         nb = (args + 1)                              ifTrue:[rtn add:(line asString,':','pop self ')]                             ifFalse:[    (nb < (args + 1))                                  ifTrue:[rtn add:(line asString,':','pop arg ',((nb) asString))]                                 ifFalse:[nb = (args + 2)  ifTrue:[rtn add:(line asString,':','pop => eax')].                                            nb = (args + 3)  ifTrue:[rtn add:(line asString,':','pop => edx')].                                            nb > (args + 3)                                                 ifTrue:[rtn add:(line asString,':','pop => var ',((nb - args - 3) asString))]]].                          ].                 op = 16r25  " push from remote var "                     ifTrue:[                          nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                         pos := pos + 2.                         nb > (tmps - args - 1)                             ifFalse:[ rtn add:(line asString,':','push rmt var ',((nb) asString))]                             ifTrue:[                                 nb = tmps                                     ifTrue:[ rtn add:(line asString,':','push rmt self ')]                                     ifFalse:[rtn add:(line asString,':','push rmt arg ',((tmps  - nb) asString))]]                     ].                 op = 16r26 "pop to remote var "                     ifTrue:[                         nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                         pos := pos + 2.                         rtn add:(line asString,':','pop => rmt var ',((nb) asString))].                 op = 16r2C                     ifTrue:[                             nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.                           pos := pos + 2.                             nb = 1 ifTrue:[rtn add:(line asString,':','push nil ')].                         nb = 2 ifTrue:[rtn add:(line asString,':','push true ')].                         nb = 3 ifTrue:[rtn add:(line asString,':','push false ')].                         nb > 3 ifTrue:[rtn add:(line asString,':','push fixed object ',(nb asString))].].                 op = 16r30  ifTrue:[rtn add:(line asString,':','drop tos')].                 op = 16r31  ifTrue:[rtn add:(line asString,':','dup tos')].                 op = 16r40                     ifTrue:[                          lb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.  " size "                         pos := pos + 2.                         lb = 0                            ifTrue:[lb := (c copyFrom:(pos) to:(pos + 7)) riHexConvert.  " index "                                     pos := pos + 8].                          nb := (c copyFrom:pos to:(pos + 1)) riHexToBytes at:1.  " type"                         pos := pos + 2.                         lb := lb - 1 * 2.                         nb = 16r31 "string"                             ifTrue:[                                 rtn add:(line asString,':','push string ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                                 pos := pos + lb].                         nb = 16r32  " byte array "                             ifTrue:[                                 rtn add:(line asString,':','push bytes ',((c copyFrom:pos to:(pos + lb - 1))asString)).                                 pos := pos + lb].                         nb = 16r33  "symbol"                             ifTrue:[                                 rtn add:(line asString,':','push symbol ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                                 pos := pos + lb].                         nb = 16r34  " 64 bit integer "                             ifTrue:[                                 rtn add:(line asString,':','push 64 bit ',((c copyFrom:pos to:(pos + lb - 1)) pbcConvert)).                                 pos := pos + lb].                         nb = 16r35  " float "                             ifTrue:[                                 rtn add:(line asString,':','push Float ',((c copyFrom:pos to:(pos + lb - 1)) pbcConvert)).                                 pos := pos + lb].                        nb = 16r36  " char "                             ifTrue:[                                 rtn add:(line asString,':','push char ',(Character value:((c copyFrom:pos to:(pos + lb - 1))pbcConvert) asInteger)).                                 pos := pos + lb].                         nb = 16r37  " small Integer "                             ifTrue:[                                 rtn add:(line asString,':','push 32 bit ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                                 pos := pos + lb].                      nb = 16r38  " global "                             ifTrue:[                                 rtn add:(line asString,':','push global ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                                 pos := pos + lb].                         nb = 16r39  " nil "                             ifTrue:[                                 rtn add:(line asString,':','push nil ')].                         nb = 16r41 "Array of strings"                             ifTrue:[                                 rtn add:(line asString,':','push string array ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                                 pos := pos + lb].                         nb = 16r42 "Array of symbols"                             ifTrue:[                                 rtn add:(line asString,':','push symbol array ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                                 pos := pos + lb].                         nb = 16r43 "Array of integers"                             ifTrue:[                                 rtn add:(line asString,':','push int array ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                                 pos := pos + lb].                         nb = 16r44 "Array of floats"                             ifTrue:[                                 rtn add:(line asString,':','push float array ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                                 pos := pos + lb].                         nb = 16r45 "Array of chars"                             ifTrue:[                                 rtn add:(line asString,':','push char array ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                                 pos := pos + lb].                         nb = 16r46  " class var "                             ifTrue:[                                 rtn add:(line asString,':','push class var ',((c copyFrom:pos to:(pos + lb - 1))pbcConvert)).                                 pos := pos + lb].                                       ].                             ].         ^rtn :SOURCE,type=classMethod,class=MCompilerEmitPbc,selector=initCompiler,codeType=rtalkinitCompiler        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:41:59 pm>   "        "<modified:sys=GAKRE8CA,time=03/27/11 at 12:43:09 am>   "        "<modified:sys=GAKRE8CA,time=03/27/11 at 12:42:34 am>   "        "<modified:sys=GAKRE8CA,time=03/27/11 at 12:41:59 am>   "             "comment"    :SOURCE,type=classMethod,class=McompilerPbcMessageNode,selector=inlineSelectors,codeType=rtalkinlineSelectors        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:43:44 pm>   "        "<modified:sys=GAKRE8CA,time=05/10/11 at 08:23:18 pm>   "             "comment"         ^#(ifTrue: ifTrue:ifFalse: ifFalse: ifFalse:ifTrue: or: and: to:do: timesRepeat: whileTrue: whileFalse:)    :SOURCE,type=classMethod,class=Compiler,selector=clearCodeCache,codeType=rtalkclearCodeCache        "<modified:pgmr=mdr,time=01/04/13 at 06:41:43 pm>   "             "forces rebuild of call sites"     	<jprim: /MiscPrims primClearCodeCache>         ^self primitiveFailed    :SOURCE,type=classMethod,class=Compiler,selector=compile:in:,codeType=rtalkcompile:aString in:aClass        "<modified:sys=GAKRE8CA,time=01/25/12 at 08:49:33 am>   "        "<modified:sys=GAKRE8CA,time=05/10/11 at 09:50:27 am>   "             "returns Assoc selector, cm"         ^self  compile:aString in:aClass notifying:(self codeGenerator) ifFail:[^nil]    :SOURCE,type=classMethod,class=Compiler,selector=evaluate:in:to:notifying:ifFail:,codeType=rtalkevaluate:aString in:aClass to:aObject notifying:aRequestor ifFail:aBlock         "<modified:sys=GAKRE8CA,time=01/25/12 at 08:50:03 am>   "        "<modified:sys=GAKRE8CA,time=06/19/11 at 06:23:04 pm>   "        "<modified:sys=GAKRE8CA,time=06/19/11 at 10:45:53 am>   "        "<modified:sys=GAKRE8CA,time=05/11/11 at 10:24:40 am>   "        "<modified:user=Roos Inst,time=06/18/08 at 02:04:50 pm>   "            "comment"          | result compiler method src|         compiler := (self codeGenerator).         result := compiler new compile:(src := 'Doit ',aString)                      withInstances:(aClass allInstVarNames) evaluating:true for:aClass.         result key isSymbol             ifFalse:[aRequestor compilerError:(result value) at:(result key - 5) in:aString for:aClass.                       ^aBlock value].         method := result value.         aClass addSelector:(result key) withMethod:method.          result := aObject perform: #Doit.         aClass removeSelector:#Doit.         ^result    :SOURCE,type=classMethod,class=Compiler,selector=compile:in:notifying:ifFail:,codeType=rtalkcompile:aString in:aClass notifying:aObject ifFail:aBlock        "<modified:sys=GAKRE8CA,time=01/25/12 at 08:49:43 am>   "        "<modified:sys=GAKRE8CA,time=05/12/11 at 07:32:21 am>   "        "<modified:sys=GAKRE8CA,time=05/10/11 at 09:51:14 am>   "         " rtn assoc key, RtCompiledMethod "         | result compiler |         compiler := (self codeGenerator) new.         result := compiler compile:aString                      withInstances:(aClass allInstVarNames) evaluating:false for:aClass.         result key isSymbol             ifTrue:[^result]             ifFalse:[aObject compilerError:(result value) at:(result key) in:aString for:aClass.                       ^aBlock value].    :SOURCE,type=classMethod,class=Compiler,selector=positionsOf:in:notifying:ifFail:,codeType=rtalkpositionsOf:aString in:aClass notifying:aRequestor ifFail:aBlock         "<modified:sys=GAKRE8CA,time=01/25/12 at 08:50:19 am>   "            "comment"          | result compiler |        compiler :=(self codeGenerator) new.         result := compiler compile:aString                      withInstances:(aClass allInstVarNames) evaluating:false for:aClass.         result key isSymbol             ifTrue:[^compiler nodes]             ifFalse:[aRequestor compilerError:(result value) at:(result key) in:aString for:aClass.                       ^aBlock value].    :SOURCE,type=classMethod,class=Compiler,selector=evaluate:,codeType=rtalkevaluate:aString         "<modified:sys=GAKRE8CA,time=01/25/12 at 08:49:52 am>   "            "comment"         ^self evaluate:aString in:UndefinedObject                  to:nil notifying:(self codeGenerator) ifFail:[^nil]    :SOURCE,type=classMethod,class=Compiler,selector=codeGenerator,codeType=rtalkcodeGenerator        "<modified:sys=GAKRE8CA,time=05/18/12 at 01:59:21 pm>   "        "<modified:sys=GAKRE8CA,time=05/10/12 at 11:54:19 am>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 08:19:37 pm>   "        "<modified:sys=GAKRE8CA,time=01/06/12 at 12:12:50 am>   "             "return the generator"         ^MCompilerEmitPbc    :SOURCE,type=classMethod,class=Compiler,selector=positionsOf:in:,codeType=rtalkpositionsOf:aString in:aClass         "<modified:sys=GAKRE8CA,time=01/25/12 at 08:50:11 am>   "            "comment"         ^self positionsOf:aString in:aClass notifying:(self codeGenerator) ifFail:[^nil]    :SOURCE,type=classMethod,class=McompilerSourceScanner,selector=specialChars,codeType=rtalkspecialChars        "<modified:sys=GAKRE8CA,time=05/10/11 at 08:28:44 pm>   "             "comment"         SpecialCharacters isNil ifTrue:[self initClassVar].         ^SpecialCharacters    :SOURCE,type=classMethod,class=McompilerSourceScanner,selector=initClassVar,codeType=rtalkinitClassVar        "<modified:sys=GAKRE8CA,time=06/08/11 at 08:03:06 pm>   "        "<modified:sys=GAKRE8CA,time=06/02/11 at 03:01:32 pm>   "        "<modified:sys=GAKRE8CA,time=06/02/11 at 01:09:36 pm>   "             "comment"         SpecialCharacters := Set new.         #($/ $, $+ $* $! $? $& $% $~ $@ $| $\ $> $= $< )             do:[ :e | SpecialCharacters add:e]    :SOURCE,type=classMethod,class=McompilerSourceScanner,selector=on:for:ifError:,codeType=rtalkon:arg1 for:arg2 ifError:aBlock         "<modified:sys=GAKRE8CA,time=05/10/11 at 08:29:38 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:56:17 pm>   "            "comment"         self specialChars.         ^self new on:arg1 for:arg2 errorBlock:aBlock    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=send:drop:,codeType=rtalksend:arg1 drop:arg2         "<modified:sys=GAKRE8CA,time=05/19/12 at 10:38:58 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 06:50:39 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 06:48:01 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 12:21:26 am>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 10:28:42 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 09:04:40 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 06:33:38 pm>   "            "receiver and return are in eax,  arg2 is number of arguments, F7"          self insertLineNumber.         self pop:arg2.         self putNextPbc:16r23; putNextPbc:(self pbcEax).         self putNextPbc:16r10.         self putNextPbc:arg2.         self putNextPbc:arg1 size.         self putNextPbcString:arg1.         self putNextPbc:16r24; putNextPbc:(self pbcEax).    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcCheckLocalVar:type:,codeType=rtalkpbcCheckLocalVar:aInt type:aSym        "<modified:sys=GAKRE8CA,time=05/08/12 at 05:56:45 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:24:29 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 12:12:01 am>   "        "<modified:sys=GAKRE8CA,time=05/04/11 at 07:37:06 am>   "        "<modified:sys=GAKRE8CA,time=04/26/11 at 08:54:40 am>   "             "aInt is the local var index, aSym is #load or #store.             if the location is false then the var needs to be initialized.             if nil then var is not used"         | val |         val := (self pbcLclVarFlags at:aInt).         val isBoolean ifTrue:[^self]. " decision made "         aSym = #load             ifTrue:[self pbcLclVarFlags at:aInt put:false]             ifFalse:[ " this is a store, if in a block or past a jump then force an init"                     ((self pbcJumpScope ~= 0) | ( blockDepth ~=0))                         ifTrue:[self pbcLclVarFlags at:aInt put:false]                         ifFalse:[self pbcLclVarFlags at:aInt put:true].                 ]    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadFalse,codeType=rtalkloadFalse        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:52:32 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:31:48 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:31:24 pm>   "            "comment"          self pushFalse.         self popR    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodeBlock,codeType=rtalknodeBlock        "<modified:sys=GAKRE8CA,time=04/30/12 at 07:12:37 pm>   "            "comment"          ^McompilerPbcBlockNode    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=compiledMethodClass,codeType=rtalkcompiledMethodClass        "<modified:sys=GAKRE8CA,time=05/17/12 at 10:52:09 am>   "        "<modified:sys=GAKRE8CA,time=05/10/11 at 09:56:28 am>   "        "<modified:sys=GAKRE8CA,time=05/10/11 at 09:39:41 am>   "        "<modified:sys=GAKRE8CA,time=03/26/11 at 11:00:56 pm>   "        "<modified:sys=GAKRE8CA,time=09/08/10 at 07:53:25 am>   "            "needed for the translation"          ^RtCompiledMethod    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=insertLineNumber:,codeType=rtalkinsertLineNumber:aInt        "<modified:sys=GAKRE8CA,time=05/19/12 at 10:36:18 pm>   "        "<modified:sys=GAKRE8CA,time=05/17/12 at 11:47:29 pm>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 08:44:33 pm>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 08:44:22 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 02:21:54 pm>   "             "used by debugger to locate source code from pbc bytes.             msb first,  jvm limits to 16 bts"         | line |         line := aInt.         self putNextPbc:16r02.         self putNextPbc:0.         self putNextPbc:0.         self putNextPbc:((aInt bitShift:-8) bitAnd:16rFF).         self putNextPbc:(aInt bitAnd:16rFF).    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushGlobal:,codeType=rtalkpushGlobal:arg1            "<modified:pgmr=mdr,time=08/12/13 at 05:50:00 pm>   "        "push the value of the global             arg1 is the key for the global"         | key |         self push.      	key := arg1.     	"self 	putNextPbc:16r2C; putNextPbc:16r01;                		putNextPbc:16r40; putNextPbc:(key asString size + 1); putNextPbc:16r33;      			putNextPbcString:(key asString);     			putNextPbc:16r15; putNextPbc:16r02;      			putNextPbc:('primGetGlobal' size);putNextPbcString:'primGetGlobal';     			putNextPbc:0." 	self      putNextPbc:16r40; putNextPbc:(key asString size + 1); putNextPbc:16r38;      			putNextPbcString:(key asString). :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadClassVar:,codeType=rtalkloadClassVar:arg1         "<modified:pgmr=mdr,time=08/28/12 at 09:22:41 am>   "        "<modified:pgmr=mdr,time=08/28/12 at 09:22:16 am>   "            "class var named asr1"          self pushClassVar:arg1.         self popR    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadSelf,codeType=rtalkloadSelf        "<modified:sys=GAKRE8CA,time=04/30/12 at 08:48:47 pm>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 11:39:10 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:32:37 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:24:49 pm>   "            "0A"          self pushSelf.         self popR    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushTOS,codeType=rtalkpushTOS        "<modified:sys=GAKRE8CA,time=05/03/12 at 07:38:52 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:13:07 pm>   "            "dup "          self putNextPbc:16r31.         self push    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=dropTOS:,codeType=rtalkdropTOS:arg1         "<modified:sys=GAKRE8CA,time=05/08/12 at 06:17:43 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:13:33 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:42:03 am>   "            "drop stack element"         arg1 = 0         ifTrue:[^self].         arg1 timesRepeat:[self dropTOS].    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pop,codeType=rtalkpop            "comment"         self pushDepth:(self pushDepth - 1).         pushDepth < 0             ifTrue:[^self error:'Negative stack depth']    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=stackVarDrop:,codeType=rtalkstackVarDrop:aVar        "<modified:sys=GAKRE8CA,time=05/07/12 at 08:04:58 pm>   "        "<modified:sys=GAKRE8CA,time=05/07/12 at 09:09:22 am>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 11:32:20 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 11:15:59 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 08:52:36 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 06:52:04 pm>   "             "drop this one"         aVar = self pbcLastStackVar ifFalse:[self halt].         ^pbcBlockInfo at:2 put:(self pbcLastStackVar - 1)    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=putNextPbcString:,codeType=rtalkputNextPbcString:arg1         "<modified:sys=GAKRE8CA,time=05/01/12 at 07:42:44 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 07:40:49 pm>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 10:53:46 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 08:15:15 am>   "            "comment"          arg1 asByteArray do:[ :b | pbcBytes add:b].    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=stackVarStore:,codeType=rtalkstackVarStore:aInt        "<modified:sys=GAKRE8CA,time=05/03/12 at 12:18:47 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 12:15:06 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:46:39 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:45:17 am>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 06:54:48 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 06:51:35 pm>   "             "pop this var from the stack"         self putNextPbc:16r24; putNextPbc:( self pbcVarRef + aInt - 1).         self pop    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=cleanUpTOS:,codeType=rtalkcleanUpTOS:arg1         "<modified:sys=GAKRE8CA,time=05/15/12 at 07:33:17 pm>   "            "arg1 was the old stack depth so calling this method is used             to get the stack back where it was "          | tmp1 |         (tmp1 := self pushDepth - arg1) > 0             ifTrue:[^self dropTOS:tmp1].         tmp1 < 0             ifTrue:[self error:'Stack error ** : ',tmp1 printString]    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=storeGlobal:,codeType=rtalkstoreGlobal:arg1         "<modified:pgmr=mdr,time=01/02/13 at 07:07:15 pm>   "            "object in eax stored to global named arg1"         | key |     	key := arg1.     	self   pushNil;  " use nil as target class "     			putNextPbc:16r40; putNextPbc:(key asString size + 1); putNextPbc:16r33;      			putNextPbcString:(key asString);     			pushR;     			putNextPbc:16r15; putNextPbc:16r03;      			putNextPbc:('primGlobalAtPut') size; putNextPbcString:('primGlobalAtPut');     			putNextPbc:0;     			pop;pop;push; " adjust stack for args removed that were pushed officially and the return"     			dropTOS  " drop return "    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcMoveJumpScopeTo:,codeType=rtalkpbcMoveJumpScopeTo:aInt        "<modified:sys=GAKRE8CA,time=05/08/12 at 05:51:05 pm>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 05:50:22 pm>   "             "encountered a jmp to a label aInt so move the var to cover the farthest             current jump range. "         pbcBlockInfo at:5 put:(self pbcJumpScope max:aInt).    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=inBlock,codeType=rtalkinBlock            "comment"          ^blockDepth > 0    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodeAssign,codeType=rtalknodeAssign            "comment"          ^McompilerAssignNode    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nextLineNumber,codeType=rtalknextLineNumber        "<modified:sys=GAKRE8CA,time=04/29/12 at 08:42:39 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:11:19 pm>   "             "returns the label of the jump"         ^lineNumber := lineNumber + 1    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodeMethod,codeType=rtalknodeMethod            "comment"          ^McompilerMethodNode    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=returnSelf,codeType=rtalkreturnSelf        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:29:04 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:13:38 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:58:50 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:56:37 pm>   "            "49"          self putNextPbc:16r23; putNextPbc:(self pbcVarRef - 3).         self putNextPbc:16r1E    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushInstance:,codeType=rtalkpushInstance:arg1         "<modified:sys=GAKRE8CA,time=04/27/12 at 04:42:37 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:32:11 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:49:10 am>   "            "95"          self putNextPbc:16r21; putNextPbc:arg1.         self push.                         (blockDepth = 0)                             ifFalse:[ " needs to show usage of self in block"                                  pbcBlockFlags := pbcBlockFlags bitOr:16r40.                                  pbcRmtVarFlags at:(pbcRmtVarFlags size) put:false].    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushNil,codeType=rtalkpushNil        "<modified:sys=GAKRE8CA,time=05/04/12 at 08:10:54 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:29:13 pm>   "            "0D"          self putNextPbc:16r2C; putNextPbc:16r01.         self push    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcVarRef,codeType=rtalkpbcVarRef        "<modified:sys=GAKRE8CA,time=04/26/12 at 12:09:09 am>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:30:05 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:17:42 pm>   "             "location for eax and edx             eax := var ref -2 and edx is var ref -1.             for the main code this is args + 4,             for blocks its block args + 4 "         ^pbcBlockInfo at:4    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=testJumpTrue:,codeType=rtalktestJumpTrue:aInt        "<modified:sys=GAKRE8CA,time=05/10/12 at 09:55:03 am>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 05:49:26 pm>   "        "<modified:sys=GAKRE8CA,time=05/07/12 at 07:49:01 pm>   "        "<modified:sys=GAKRE8CA,time=05/06/12 at 08:35:05 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 11:31:32 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:28:55 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:19:43 pm>   "            "1B if true jump to a label numbered aInt.  bool in eax         used be genWhile inline backjump"         self pushR.         self putNextPbc:16r09; putNextPbc:aInt;pop.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcVarInits,codeType=rtalkpbcVarInits        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:27:21 pm>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:03:00 pm>   "        "<modified:sys=GAKRE8CA,time=05/07/12 at 07:51:21 pm>   "        "<modified:sys=GAKRE8CA,time=05/05/12 at 11:14:58 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 01:58:10 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 01:57:32 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 12:05:53 am>   "               "  make sure all tmps are initialized before use                 maybe look for pop push pairs"         | varCnt argCnt cTmp index sVarCnt|          varCnt := nodes temporaries size.         argCnt := (nodes arguments size).         sVarCnt := (self pbcLclVarFlags size - varCnt) max:0.         " now add the var inits, ignore the stack vars as they are always valid"          self hasBlock not             ifTrue:[  " non remote context "                 1 to:varCnt do:[ :vi |                     " push nil, pop var "                     (self pbcLclVarFlags  at:vi) = false                              ifTrue:[ self putNextPbc:16r2C; putNextPbc:16r01;putNextPbc:16r24;putNextPbc:(argCnt + 3 + vi)]]]             ifFalse:[ " remote context "             " first the vars which are used before assigned "                 1 to:(pbcRmtVarFlags  size - argCnt - 1)                      do:[ :vi |  " skip args and self at end of var array "                     " push nil, pop var "                     (pbcRmtVarFlags  at:vi) = false                         ifTrue:[ self putNextPbc:16r2C; putNextPbc:16r01;putNextPbc:16r26; putNextPbc:vi]].                  " if self is used in rmt context then copy "                  (pbcRmtVarFlags at:(pbcRmtVarFlags size)) isNil                     ifFalse:[self putNextPbc:16r23; putNextPbc:(argCnt + 1); putNextPbc:16r26;putNextPbc:(pbcRmtVarFlags size)].                  " if args are used then args are placed in reverse order with arg1 being at self - 1 etc "                  1 to:argCnt do:[ :i |                     ((pbcRmtVarFlags at:(pbcRmtVarFlags size - i)) isNil)                         ifFalse:[self     putNextPbc:16r23; putNextPbc:i;                                              putNextPbc:16r26; putNextPbc:(pbcRmtVarFlags size - i)]]]    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=backJump,codeType=rtalkbackJump        "<modified:sys=GAKRE8CA,time=04/30/12 at 07:05:00 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 04:35:42 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:55:40 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:12:25 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 02:14:32 pm>   "            "this is a back  jump target  1D             insert a label at this point"         | label |         label := self addJumpTarget.         self insertLabel:label.         ^label    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushArgument:,codeType=rtalkpushArgument:arg1         "<modified:sys=GAKRE8CA,time=05/04/12 at 08:09:41 am>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 05:14:49 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:25:53 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:47:37 am>   "            "59,  push arg onto stack"         self putNextPbc:16r23; putNextPbc:arg1.             self push    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=header,codeType=rtalkheader        "<modified:sys=GAKRE8CA,time=05/09/12 at 08:35:49 am>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:34:35 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:57:17 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 01:57:51 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 01:57:18 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:45:03 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:43:04 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:25:44 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:17:10 pm>   "             "build the main header array"         | vars args |         args := nodes arguments size.         blockCount > 0             ifFalse:[ vars := (self pbcMaxStackVar).                         self putNextPbc:16r04; putNextPbc:args; putNextPbc:(vars // 256); putNextPbc:(vars \\ 256)]             ifTrue:[ vars := nodes temporaries size + args + 1.                         self putNextPbc:16r06; putNextPbc:args; putNextPbc:(vars // 256); putNextPbc:(vars \\ 256);                                 putNextPbc:(pbcBlockFlags bitOr:1); putNextPbc:(self pbcMaxStackVar)]    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=startBlock,codeType=rtalkstartBlock        "<modified:sys=GAKRE8CA,time=04/26/12 at 12:29:59 am>   "            "clear the stack"          self pushDepth:0.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushTrue,codeType=rtalkpushTrue        "<modified:sys=GAKRE8CA,time=05/04/12 at 08:11:39 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:30:11 pm>   "            "0F"          self putNextPbc:16r2C; putNextPbc:16r02.         self push    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=putNext4BytesPbc:,codeType=rtalkputNext4BytesPbc:aInt1        "<modified:sys=GAKRE8CA,time=04/29/12 at 10:53:30 pm>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 06:05:23 pm>   "            "insert 4 byte integer"           self putNextPbc:((aInt1 bitAnd:16rFF000000) bitShift:-24).          self putNextPbc:((aInt1 bitAnd:16rFF0000) bitShift:-16).          self putNextPbc:((aInt1 bitAnd:16rFF00) bitShift:-8).          self putNextPbc:(aInt1 bitAnd:16rFF).    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodeMessage,codeType=rtalknodeMessage        "<modified:sys=GAKRE8CA,time=04/27/12 at 08:57:51 am>   "            "comment"          ^McompilerPbcMessageNode    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodeReturn,codeType=rtalknodeReturn            "comment"          ^McompilerReturnNode    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=sendSuper:drop:,codeType=rtalksendSuper:arg1 drop:arg2         "<modified:pgmr=mdr,time=08/08/13 at 06:20:05 pm>   "          " super send, uses the target class as the starting point"          self pop:arg2.         self insertLineNumber.         self putNextPbc:16r23; putNextPbc:(self pbcEax).         self putNextPbc:16r11; putNextPbc:arg2.         self putNextPbc:(arg1 size).         self putNextPbcString:arg1.         self putNextPbc:(targetClass  symbol) size.         self putNextPbcString:(targetClass  symbol).         self putNextPbc:16r24; putNextPbc:(self pbcEax).   :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=jump,codeType=rtalkjump        "<modified:sys=GAKRE8CA,time=05/06/12 at 02:22:40 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:29:29 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:49:00 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 02:09:16 pm>   "            "1A, used by inline generator"          | target |         target := self addJumpTarget.         self putNextPbc:16r08.         self putNextPbc:target.         self pbcMoveJumpScopeTo:target.         ^target    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=dropTOS,codeType=rtalkdropTOS        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:13:07 pm>   "            "comment"          self putNextPbc:16r30.         self pop.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushR,codeType=rtalkpushR        "<modified:sys=GAKRE8CA,time=05/04/12 at 08:11:06 am>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 08:51:49 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:28:06 pm>   "            "push eax to stack, 06"          self putNextPbc:16r23; putNextPbc:(self pbcEax).         self push    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=hasBlock,codeType=rtalkhasBlock            "comment"          ^hasBlock    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcEdx,codeType=rtalkpbcEdx        "<modified:sys=GAKRE8CA,time=04/25/12 at 08:16:44 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:32:10 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:18:12 pm>   "             "comment"         ^self pbcVarRef - 1    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=checkVars,codeType=rtalkcheckVars            "comment"          | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 |          tmp1 := nodes arguments.         tmp2 := nodes temporaries.         tmp3 := Set new.         1 to:(tmp1 size) do:[ :tmp6 |         tmp4 := tmp1 at:tmp6.         (instances includes:(tmp4 value))             ifTrue:[                 self err:'same name as instance variable'  at:tmp4 position].         (tmp3 includes:(tmp4 value))             ifTrue:[                 self err:'duplicate argument name'  at:tmp4 position].             tmp3 add:(tmp4 value)].         1 to:(tmp2 size) do:[ :tmp6 |             tmp5 := tmp2 at:tmp6.             (instances includes:(tmp5 value))                 ifTrue:[self err:'same name as instance variable' at:(tmp5 position)]    .             (tmp3 includes:(tmp5 value))                 ifTrue:[self err:'duplicate temporary name' at:(tmp5 position)].             tmp3 add:(tmp5 value)].    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=err:at:,codeType=rtalkerr:arg1 at:arg2             "comment"         errorBlock value:arg1 value:arg2    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadContextTemporary:,codeType=rtalkloadContextTemporary:arg1         "<modified:sys=GAKRE8CA,time=05/08/12 at 06:25:59 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:52:52 am>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:39:46 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:19:42 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:19:31 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:44:30 am>   "            "71 "          self pushContextTemporary:arg1.         self popR    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcLclVarFlags,codeType=rtalkpbcLclVarFlags        "<modified:sys=GAKRE8CA,time=04/25/12 at 08:17:37 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:31:36 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:17:22 pm>   "             " flags which indicate access order, nil unused, false if used before assigned "         ^pbcBlockInfo at:3    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushFalse,codeType=rtalkpushFalse        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:30:35 pm>   "            "11"          self putNextPbc:16r2C; putNextPbc:16r03.         self push    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodeCascade,codeType=rtalknodeCascade        "<modified:sys=GAKRE8CA,time=04/27/12 at 08:57:42 am>   "            "comment"          ^McompilerPbcCascadeNode    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=return,codeType=rtalkreturn        "<modified:sys=GAKRE8CA,time=05/15/12 at 01:12:22 pm>   "        "<modified:sys=GAKRE8CA,time=05/09/12 at 08:35:00 am>   "        "<modified:sys=GAKRE8CA,time=05/05/12 at 10:54:57 pm>   "        "<modified:sys=GAKRE8CA,time=05/04/12 at 08:12:20 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:59:02 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:57:54 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:55:39 pm>   "            "48, 4B inBlock"         self inBlock             ifTrue:[self putNextPbc:16r23 ; putNextPbc:(self pbcEax); putNextPbc:16r1F. pbcBlockFlags := pbcBlockFlags bitOr:16r80]             ifFalse:[self putNextPbc:16r23 ; putNextPbc:(self pbcEax); putNextPbc:16r1E]    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadGlobal:,codeType=rtalkloadGlobal:arg1         "<modified:pgmr=mdr,time=08/28/12 at 09:22:16 am>   "            "global named asr1"          self pushGlobal:arg1.         self popR    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushClassVar:,codeType=rtalkpushClassVar:arg1         "<modified:pgmr=mdr,time=08/12/13 at 06:25:21 pm>   "        "push value of the class var,  62, 68.             arg1 is the name (symbol ) of the class var"         | key |          self push.      	key := arg1.     	" need to have self in the block "     	(blockDepth = 0)     		ifTrue:[self pushSelf;pop]     		ifFalse:[     			pbcBlockFlags := pbcBlockFlags bitOr:16r40.  " needs self in block"     			pbcRmtVarFlags at:(pbcRmtVarFlags size) put:false.     			self putNextPbc:16r25; putNextPbc:(pbcRmtVarFlags size)].       	self 	 			putNextPbc:16r40; putNextPbc:(targetClass symbol asString size + 1);putNextPbc:16r33;      			putNextPbcString:(targetClass symbol asString);    			putNextPbc:16r40; putNextPbc:(key asString size + 1); putNextPbc:16r33;      			putNextPbcString:(key asString);     			putNextPbc:16r15; putNextPbc:16r03;      			putNextPbc:('primGetClassVar' size);putNextPbcString:'primGetClassVar';     			putNextPbc:0 :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadTemporary:,codeType=rtalkloadTemporary:arg1         "<modified:sys=GAKRE8CA,time=05/04/12 at 08:04:12 am>   "            "BB"          self pushTemporary:arg1.         self popR.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodeLiteral,codeType=rtalknodeLiteral            "comment"          ^McompilerLiteralNode    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushSelf,codeType=rtalkpushSelf        "<modified:sys=GAKRE8CA,time=04/30/12 at 08:48:00 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 08:47:14 pm>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 11:39:50 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:32:18 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:36:36 pm>   "            "0B"          self push.         (blockDepth = 0)             ifTrue:[self putNextPbc:16r23; putNextPbc:(self pbcVarRef - 3)]             ifFalse:[ " in remote block self is at vars + args + 1 "                                 pbcBlockFlags := pbcBlockFlags bitOr:16r40.                                 pbcRmtVarFlags at:(pbcRmtVarFlags size) put:false.                                 self putNextPbc:16r25; putNextPbc:(pbcRmtVarFlags size)]    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=stackVarPush:,codeType=rtalkstackVarPush:aInt        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:45:43 am>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 06:54:19 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 06:51:35 pm>   "             "copy this var to the stack"         self putNextPbc:16r23 ; putNextPbc:( self pbcVarRef + aInt - 1).         self push.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodeVariable,codeType=rtalknodeVariable            "comment"          ^McompilerObjectNode    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushDepth,codeType=rtalkpushDepth        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:48:47 am>   "            "current stack depth"          ^ pushDepth    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=testJumpTrue,codeType=rtalktestJumpTrue        "<modified:sys=GAKRE8CA,time=05/03/12 at 11:31:23 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:28:37 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:50:07 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:20:21 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 02:11:31 pm>   "            "will patch the label later  1B, bool in eax"          | target |         target := self addJumpTarget.         self pushR.         self putNextPbc:16r09;putNextPbc:target;pop.         self pbcMoveJumpScopeTo:target.         ^target    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodeEnd,codeType=rtalknodeEnd            "comment"          ^McompilerEndNode    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcEax,codeType=rtalkpbcEax        "<modified:sys=GAKRE8CA,time=04/25/12 at 08:16:52 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:32:10 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:18:12 pm>   "             "comment"         ^self pbcVarRef - 2    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodes,codeType=rtalknodes            "comment"          ^nodes    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=incBlockCount,codeType=rtalkincBlockCount        "<modified:sys=GAKRE8CA,time=04/26/12 at 12:37:39 am>   "            "comment"          blockCount := blockCount + 1.         blockDepth := blockDepth + 1.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=storeContextTemporary:,codeType=rtalkstoreContextTemporary:arg1         "<modified:sys=GAKRE8CA,time=05/15/12 at 06:41:47 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 10:36:48 am>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 11:39:33 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:40:56 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:48:05 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:46:41 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:54:17 am>   "            "object in eax stored,  7E"          self pushR.         self putNextPbc:16r26; putNextPbc:arg1;pop.             self pbcCheckRmtVar:arg1 type:#store.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=endBlock,codeType=rtalkendBlock        "<modified:sys=GAKRE8CA,time=05/10/12 at 10:34:54 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 11:20:27 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 11:02:11 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:58:22 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 08:14:19 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:38:49 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:34:17 pm>   "        "<modified:sys=GAKRE8CA,time=01/06/12 at 12:21:31 am>   "            "restore bytes and return"         pbcBytes at:5 put:(self pbcMaxStackVar).         blockDepth := blockDepth - 1.         pbcBytes := (pbcBlockInfo at:6)  at:2.         pbcBlockInfo := (pbcBlockInfo at:6) at:1.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=testJumpFalse,codeType=rtalktestJumpFalse        "<modified:sys=GAKRE8CA,time=05/10/12 at 09:55:23 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 11:31:06 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:29:04 pm>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 11:40:13 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:49:50 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:20:31 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 02:11:09 pm>   "            "will patch the label later, 1C  bool in eax"          | target |         target := self addJumpTarget.         self pushR.         self putNextPbc:16r0A;putNextPbc:target;pop.         self pbcMoveJumpScopeTo:target.         ^target    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcJumpScope,codeType=rtalkpbcJumpScope        "<modified:sys=GAKRE8CA,time=04/25/12 at 08:17:17 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:22:55 pm>   "        "<modified:sys=GAKRE8CA,time=04/25/12 at 05:18:30 pm>   "             "When a jump is encountered set to the farest target             current jump range.  This is used to determine is var assignments             are vaild.             Look at all var to see if they are valid or not.             if the value is an integer set it to this location"         ^pbcBlockInfo at:5    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushContextTemporary:,codeType=rtalkpushContextTemporary:arg1         "<modified:sys=GAKRE8CA,time=04/27/12 at 04:40:08 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:28:17 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:27:10 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:48:29 am>   "            "77"         self putNextPbc:16r25; putNextPbc:arg1.         self push.             self pbcCheckRmtVar:arg1 type:#load.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=resolve:,codeType=rtalkresolve:arg1         "<modified:pgmr=mdr,time=08/11/13 at 09:55:03 am>   "         "comment"          | tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tGlobal|         arg1 isVariable             ifFalse:[self error:'not Variable '].         tmp2 := arg1 value.         (tmp2 at:1) isLowerCase             ifTrue:[         		tmp1 := nodes arguments.         		1 to:tmp1 size do:[ :tmp5 |             		(tmp2 = (tmp1 at:tmp5) value )                 		ifTrue:[                     		hasBlock                         		ifFalse:[tmp3 := #stackArg.                                     		tmp4 := tmp5]                         		ifTrue:[tmp3 := #contextArg.                                     		tmp4 := numberLocals + 1 - tmp5].                     		^arg1 type:tmp3 binding:tmp4]].         		tmp1 := nodes temporaries.         		1 to:(tmp1 size) do:[ :tmp5 |             		(tmp2 = (tmp1 at:tmp5)value )                 		ifTrue:[                     		hasBlock                         		ifFalse:[tmp3 := #stackTemp.                                    			tmp4 := tmp5]                         		ifTrue:[ tmp3 := #contextTemp.                                    			tmp4 := tmp5].                      ^arg1 type:tmp3 binding:tmp4]].         		1 to:(instances size) do:[ :tmp5 |             		(tmp2 = (instances at:tmp5))                 		ifTrue:[^arg1 type:#instance binding:tmp5]]]             ifFalse:[  " look for vars starting with lower case, class vars first"                 	(targetClass hasClassVarNamed:tmp2 asSymbol)                         		ifTrue:[^arg1 type:#classVar binding:(tmp2 asSymbol)].            		" must be a global  or a script.  If script we wll add the var"     			(Object globals includesKey:(tmp2 asSymbol))     						ifTrue:[^arg1 type:#global binding:(tmp2 asSymbol)]     						ifFalse:[      							((targetClass isMetaClass) and:[targetClass instanceClass isScript])     								ifTrue:[  targetClass instanceClass addClassVarName:tmp2.     											^arg1 type:#classVar binding:(tmp2 asSymbol)]     								ifFalse:[     									self riLogMsg:('Missing global ',(tmp2 asString)).         								^self undefinedAt:(arg1 position)]].     				].         self undefinedAt:(arg1 position)  :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=insertLineNumber,codeType=rtalkinsertLineNumber        "<modified:sys=GAKRE8CA,time=05/19/12 at 10:35:53 pm>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 08:45:19 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 02:21:54 pm>   "             "used by debugger to locate source code from pbc bytes,                 msb fi"         self insertLineNumber:lineNumber.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=IC,codeType=rtalkIC        "<modified:sys=GAKRE8CA,time=04/29/12 at 10:54:05 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 08:47:21 am>   "            "current instruction location"          ^lineNumber    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadLiteral:,codeType=rtalkloadLiteral:arg1         "<modified:sys=GAKRE8CA,time=05/02/12 at 09:16:23 pm>   "            "comment"         self pushLiteral:arg1.         self popR    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=testJumpFalse:,codeType=rtalktestJumpFalse:aInt        "<modified:sys=GAKRE8CA,time=05/10/12 at 09:55:15 am>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 05:49:35 pm>   "        "<modified:sys=GAKRE8CA,time=05/06/12 at 08:34:26 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 11:31:14 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:29:14 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:19:00 pm>   "            "1C if false jump to a label numbered aInt.  bool in eax                 used by inline code generator back jumps"         self pushR.         self putNextPbc:16r0A ; putNextPbc:aInt;pop.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=evaluating,codeType=rtalkevaluating            "comment"          ^evaluating    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=byteCodesBytes,codeType=rtalkbyteCodesBytes        "<modified:sys=GAKRE8CA,time=05/15/12 at 11:49:43 am>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 11:24:54 am>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:55:01 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 11:23:50 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 06:38:20 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:16:36 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:04:31 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:59:26 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 12:03:05 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:25:42 pm>   "        "<modified:sys=GAKRE8CA,time=05/11/11 at 09:09:35 am>   "            "need to collect the bytecodes into a single array.             adds the header bytes to each code block             if primitive add the primitive code"          | tmp1 size index bytes|         size := 0.         " set pbc bytes to new collection to get preamble stuff "         pbcBytes := OrderedCollection new.         self header. " first the header "         self prolog.  " then the primitive if any "         self pbcVarInits.  " insert code to initialize vars to nil  which are access before set "         1 to:(codeBlocks size) do:[ :i | (codeBlocks at:i) isNil ifFalse:[ size := size + ((codeBlocks at:i) at:2)size]].         size := size + pbcBytes size.         tmp1 := (ByteArray new:size).         index := 1.         tmp1 replaceFrom:index to:(index + (pbcBytes size) - 1)                                  with:pbcBytes startingAt:1.         index := (index + pbcBytes size).         1 to:(codeBlocks size) do:[ :i | (codeBlocks at:i) isNil                  ifFalse:[ bytes := ((codeBlocks at:i) at:2).                               (bytes at:1) = 5 ifTrue:[ bytes at:4 put:pbcBlockFlags].  " add block flags "                             tmp1 replaceFrom:index to:(index + bytes size - 1)                                  with:bytes startingAt:1.                             index := (index + bytes size)]].         ^tmp1    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushTemporary:,codeType=rtalkpushTemporary:arg1         "<modified:sys=GAKRE8CA,time=05/02/12 at 10:33:43 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 08:47:25 pm>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 11:38:55 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:29:58 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:37:45 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:50:07 am>   "            "C2"          self putNextPbc:16r23 ; putNextPbc:( self pbcVarRef + arg1 - 1).         self push.         self pbcCheckLocalVar:arg1 type:#load.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=popR,codeType=rtalkpopR        "<modified:sys=GAKRE8CA,time=04/30/12 at 05:15:38 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 05:14:29 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:27:36 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:27:14 pm>   "            "pop top of stack to eax"          self putNextPbc:16r24; putNextPbc:(self pbcEax).         self pop    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=prolog,codeType=rtalkprolog        "<modified:pgmr=mdr,time=08/06/12 at 02:50:07 pm>   "        "<modified:pgmr=mdr,time=08/06/12 at 02:46:42 pm>   "        "<modified:pgmr=mdr,time=08/06/12 at 02:45:28 pm>   "        "<modified:pgmr=mdr,time=08/06/12 at 02:36:52 pm>   "        "<modified:pgmr=mdr,time=08/06/12 at 10:59:53 am>   "        "<modified:pgmr=mdr,time=08/06/12 at 09:54:43 am>   "        "<modified:sys=GAKRE8CA,time=05/09/12 at 08:17:44 am>   "        "<modified:sys=GAKRE8CA,time=05/04/12 at 10:30:28 am>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 10:29:30 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:56:36 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:55:25 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:26:43 pm>   "            "comment"         | prim stm |         nodes primitive = 1  " regular java primitive call "             ifTrue:[                 prim := nodes apiDescriptor.  " api name then class name "                 self putNextPbc:16r16; putNextPbc:(nodes arguments size) ;                                          putNextPbc:((prim at:2) size);putNextPbcString:(prim at:2) ;      									putNextPbc:((prim at:1) size);putNextPbcString:(prim at:1)].         nodes primitive = 2	" call to arbitrary java static with rtalk objects as args "             ifTrue:[                 prim := nodes apiDescriptor.  " api name then class name "                 self putNextPbc:16r13; putNextPbc:(nodes arguments size) ;                                          putNextPbc:((prim at:2) size);putNextPbcString:(prim at:2) ;      									putNextPbc:((prim at:1) size);putNextPbcString:(prim at:1)].         nodes primitive = 4  " generic java static "             ifTrue:[         		stm := ReadWriteStream on:''.                 prim := nodes apiDescriptor.  " api name then class name "     			" make a tab separated string of the values in prim plus leading 's' "     			stm nextPutAll:'s'.         		prim do:[ :tmp1 |                 	stm tab; nextPutAll:tmp1].                 self putNextPbc:16r17; putNextPbc:(nodes arguments size).                 stm := stm contents.         		self putNextPbc:0; putNext4BytesPbc:(stm size).         		self putNextPbcString:stm].         nodes primitive = 3  " generic java virtual "             ifTrue:[         		stm := ReadWriteStream on:''.                 prim := nodes apiDescriptor.  " api name then class name "     			" make a tab separated string of the values in prim plus leading 'v' "     			stm nextPutAll:'v'.         		prim do:[ :tmp1 |                 	stm tab; nextPutAll:tmp1].                 self putNextPbc:16r17; putNextPbc:(nodes arguments size).                 stm := stm contents.         		self putNextPbc:0; putNext4BytesPbc:(stm size).         		self putNextPbcString:stm].    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=returnFallOutBlock,codeType=rtalkreturnFallOutBlock        "<modified:sys=GAKRE8CA,time=05/10/12 at 09:17:27 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:34:45 pm>   "            "4A"          self pushR.         self putNextPbc:16r1E    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pop:,codeType=rtalkpop:aInt         "<modified:sys=GAKRE8CA,time=09/08/10 at 07:53:42 am>   "            "comment"         self pushDepth:(self pushDepth - aInt).    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=bcIndex,codeType=rtalkbcIndex        "<modified:sys=GAKRE8CA,time=05/02/12 at 10:35:55 pm>   "             "used as part of jump scope and valid vars"         ^0    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadInstance:,codeType=rtalkloadInstance:arg1         "<modified:sys=GAKRE8CA,time=05/08/12 at 06:26:07 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:51:54 am>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 11:40:46 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:41:50 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 04:19:56 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:44:56 am>   "            "8B"          self pushInstance:arg1.         self popR    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=insertLabel:,codeType=rtalkinsertLabel:aInt        "<modified:sys=GAKRE8CA,time=05/08/12 at 05:51:28 pm>   "        "<modified:sys=GAKRE8CA,time=05/06/12 at 08:50:27 am>   "        "<modified:sys=GAKRE8CA,time=05/06/12 at 08:37:03 am>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 07:03:04 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 04:39:00 pm>   "             "insert a jump target label"         self putNextPbc:16r01;putNextPbc:aInt.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=tosR,codeType=rtalktosR        "<modified:sys=GAKRE8CA,time=05/14/12 at 08:28:21 pm>   "        "<modified:sys=GAKRE8CA,time=05/14/12 at 08:24:18 pm>   "            "copy top of stack to eax"              self putNextPbc:16r31; putNextPbc:16r24; putNextPbc:(self pbcEax).    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=compile:instances:evaluating:for:,codeType=rtalkcompile:arg1 instances:arg2  evaluating:arg5 for:arg6         "<modified:sys=GAKRE8CA,time=05/15/12 at 11:27:53 am>   "        "<modified:sys=GAKRE8CA,time=05/14/12 at 08:45:28 pm>   "        "<modified:sys=GAKRE8CA,time=05/10/12 at 09:42:51 am>   "        "<modified:sys=GAKRE8CA,time=05/10/12 at 09:40:59 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:34:35 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:42:54 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:41:22 am>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 10:59:21 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 10:54:43 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 10:53:11 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:05:38 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:01:37 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 01:56:56 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:21:16 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:19:29 pm>   "            "does the compile,  translates to pbc and returns assoc of selector. RtCompiledMethod"          | cm |         self startCompile:arg1 instances:arg2  evaluating:arg5 for:arg6.         numberLocals := (nodes arguments size) + (nodes temporaries size).          codeBlocks := Array new:27.  " this an array of pairs pbcBlockInfo and pbcBytes "         pbcBytes := OrderedCollection new.  " current pbc byte collector "         pbcBlockInfo := Array new:8.   " current block info for pbc bytes"             pbcBlockInfo at:3 put:(Array new:(nodes temporaries size)).  " local var flags forn non remote context vars "             pbcBlockInfo at:4 put:(nodes arguments size + 4).  " var ref location of var 1 "             pbcBlockInfo at:5 put:0.  " jump scope "         codeBlocks at:1 put:(Array with:pbcBlockInfo with:pbcBytes).         jumpTargets := lineNumber := 0.         pbcBlockFlags := 0.             "     16r40     self used in remote context                    16r01      blocks present                     16r80      return in block present             "         self checkVars.         hasBlock := nodes hasUnoptimizedBlock.         hasBlock                     ifTrue:[    pbcRmtVarFlags := Array new:(numberLocals + 1).                             pbcBlockInfo at:1 put:0.                             pbcBlockInfo at:2 put:0.]             ifFalse:[ pbcBlockInfo at:2 put:(nodes temporaries size).  " last var push top of temp var array "                             pbcBlockInfo at:1 put:(nodes temporaries size).  " max var push top of temp var array "].         nodes load.         (hasBlock = (blockCount > 0))             ifFalse:[self error:'Internal compiler error.'].              cm := RtCompiledMethod new.         cm classField:arg6; selector:nodes selector.         cm sourceObject:arg1.         cm pbcBytes:(self byteCodesBytes).         ^Association key:(nodes selector) value:cm    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=storeClassVar:,codeType=rtalkstoreClassVar:arg1         "<modified:pgmr=mdr,time=08/11/13 at 01:49:59 pm>   "     "<modified:pgmr=mdr,time=08/28/12 at 09:26:12 am>   "            "object in eax stored to class var named arg1"         | key |     	key := arg1.     	self   pushSelf;     			putNextPbc:16r40; putNextPbc:(targetClass symbol asString size + 1);putNextPbc:16r33;      			putNextPbcString:(targetClass symbol asString);    			putNextPbc:16r40; putNextPbc:(key asString size + 1);putNextPbc:16r33;      			putNextPbcString:(key asString);     			pushR;     			putNextPbc:16r15; putNextPbc:16r04;      			putNextPbc:('primClassVarAtPut') size; putNextPbcString:('primClassVarAtPut');     			putNextPbc:0;     			pop;pop;push; " adjust stack for args removed that were pushed officially and the return"     			dropTOS  " drop the return value "  :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadNil,codeType=rtalkloadNil        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:51:28 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:32:25 pm>   "            "comment"          self pushNil.         self popR    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=sendStack:drop:,codeType=rtalksendStack:arg1 drop:arg2         "<modified:sys=GAKRE8CA,time=05/19/12 at 10:39:07 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 06:53:17 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 06:50:50 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 06:48:09 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 12:21:36 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 12:20:08 am>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 10:28:42 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 09:04:40 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 06:33:38 pm>   "            "assumes receiver and result are on the stack, arg2 is number of arguments"          self insertLineNumber.         self pop:arg2.         self putNextPbc:16r10.         self putNextPbc:arg2.         self putNextPbc:arg1 size.         self putNextPbcString:arg1.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=putNextPbc:,codeType=rtalkputNextPbc:arg1         "<modified:sys=GAKRE8CA,time=05/07/12 at 07:50:38 pm>   "        "<modified:sys=GAKRE8CA,time=04/29/12 at 10:53:46 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 08:15:15 am>   "            "comment"      arg1 isInteger ifFalse:[self halt].         pbcBytes add:arg1.         self nextLineNumber    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushLiteral:,codeType=rtalkpushLiteral:tmp1         "<modified:sys=GAKRE8CA,time=05/04/12 at 10:57:49 am>   "        "<modified:sys=GAKRE8CA,time=05/04/12 at 10:47:26 am>   "        "<modified:sys=GAKRE8CA,time=05/04/12 at 10:42:48 am>   "        "<modified:sys=GAKRE8CA,time=05/04/12 at 10:19:07 am>   "        "<modified:sys=GAKRE8CA,time=05/04/12 at 08:10:32 am>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 06:20:32 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 07:45:21 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 07:39:09 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 05:53:30 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 05:08:11 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 12:01:03 am>   "            "can be sent by a node but would be an assoc, 19 AE"         | tString tmp2|         tmp1 isAssociation ifTrue:[self halt].         self push.         tmp1 isString  " handles strings and symbols "             ifTrue:[                 self putNextPbc:16r40.                 tString := tmp1 asString.                 tmp2 := tString size + 1.                 ((tmp2 = 0) | (tmp2 > 255))                       ifTrue:[self putNextPbc:0.  self putNext4BytesPbc:tmp2]                       ifFalse:[self putNextPbc:tmp2].                 tmp1 isSymbol                             ifTrue:[self putNextPbc:16r33]                             ifFalse:[self putNextPbc:16r31].                  self putNextPbcString:tString.                 ^self].          tmp1 isByteArray              ifTrue:[                 self putNextPbc:16r40.                 tmp2 := tmp1 size + 1.                 ((tmp2 = 0) | (tmp2 > 255))                       ifTrue:[self putNextPbc:0.  self putNext4BytesPbc:tmp2]                       ifFalse:[self putNextPbc:tmp2].                 self putNextPbc:16r32.                 self putNextPbcString:tmp1.                 ^self].          tmp1 isFloat              ifTrue:[    self putNextPbc:16r40.                         self putNextPbc:(tmp1 asString size + 1).                                     self putNextPbc:16r35.                         self putNextPbcString:tmp1 asString.                         ^self].           tmp1 isInteger              ifTrue:[self putNextPbc:16r40.                         self putNextPbc:(tmp1 asString size + 1).                                     self putNextPbc:16r34.                         self putNextPbcString:tmp1 asString.                         ^self].          tmp1 isCharacter             ifTrue:[ self putNextPbc:16r40;                          putNextPbc:(tmp1 asciiValue asString size + 1);                               putNextPbc:16r36;                         putNextPbcString:tmp1 asciiValue asString.                     ^self].         tmp1 isArray ifTrue:[self pbcConvertArray:tmp1 endWith:''].    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=undefinedAt:,codeType=rtalkundefinedAt:arg1             "comment"          errorBlock value:'undefined' value:arg1    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=storeInstance:,codeType=rtalkstoreInstance:arg1         "<modified:sys=GAKRE8CA,time=05/15/12 at 06:41:37 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 10:36:22 am>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:43:25 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:06:32 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:42:46 am>   "            "object in eax is stored  9D"          self pushR.         self putNextPbc:16r22; putNextPbc:arg1;pop.     " needs to show usage of self in block"                         (blockDepth = 0)                             ifFalse:[                                   pbcBlockFlags := pbcBlockFlags bitOr:16r40.                                  pbcRmtVarFlags at:(pbcRmtVarFlags size) put:false].    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=addJumpTarget,codeType=rtalkaddJumpTarget        "<modified:sys=GAKRE8CA,time=04/29/12 at 08:42:24 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:11:19 pm>   "             "returns the label of the jump"         ^jumpTargets := jumpTargets + 1    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=startNewBlockWithArgs:,codeType=rtalkstartNewBlockWithArgs:aInt        "<modified:sys=GAKRE8CA,time=05/15/12 at 11:28:48 am>   "        "<modified:sys=GAKRE8CA,time=05/10/12 at 10:38:30 am>   "        "<modified:sys=GAKRE8CA,time=05/10/12 at 10:30:56 am>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:51:14 pm>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:45:52 pm>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:25:15 pm>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:22:44 pm>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:15:38 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 11:00:28 pm>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:42:36 am>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:11:30 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:07:22 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:28:26 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 07:18:50 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 12:36:40 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 12:32:27 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 12:29:35 am>   "            "start a new block and save prior block info and pbc bytes.             return the ending lable"          | tmp |         tmp := pbcBlockInfo.         pbcBlockInfo := Array new:8.             pbcBlockInfo at:1 put:0.  " top of local var space,  max temp "             pbcBlockInfo at:2 put:0.  " top of local var space,  no locals in blocks except stackTemps "             pbcBlockInfo at:3 put:(Array new:0).  " local var flags "             pbcBlockInfo at:4 put:( 4 + aInt).  " var ref "             pbcBlockInfo at:5 put:0.  " jump scope "             pbcBlockInfo at:6 put:(Array with:tmp with:pbcBytes). " save prior code state "         pbcBytes := OrderedCollection new.         codeBlocks at:(blockCount + 1)  put:(Array with:pbcBlockInfo with:pbcBytes).         " header "         self putNextPbc:16r05.         self putNextPbc:blockCount.         self putNextPbc:aInt.         self putNextPbc:0; putNextPbc:0.  " place holders for flags and stack vars 4,5"         ^blockCount    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=startCompile:instances:evaluating:for:,codeType=rtalkstartCompile:arg1 instances:arg2  evaluating:arg5 for:arg6         "<modified:sys=GAKRE8CA,time=05/04/12 at 10:21:28 am>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:00:00 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 06:18:47 pm>   "            "builds the node tree"         instances := arg2.         evaluating := arg5.         blockCount := blockDepth := pushDepth := 0.         targetClass := arg6.         nodes := (McompilerParser new)                         compiler:self;                         scanner:(McompilerSourceScanner on:arg1 for:self ifError:errorBlock);                         ifError:errorBlock;                         method    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadArgument:,codeType=rtalkloadArgument:arg1         "<modified:sys=GAKRE8CA,time=05/07/12 at 08:52:19 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:54:04 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:25:04 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:43:54 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 08:46:38 am>   "            "comment"          self pushArgument:arg1.         self popR    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=push,codeType=rtalkpush            "comment"          self pushDepth:(self pushDepth + 1)    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=loadTrue,codeType=rtalkloadTrue        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:51:10 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 01:32:04 pm>   "            "comment"          self pushTrue.         self popR    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcLastStackVar,codeType=rtalkpbcLastStackVar        "<modified:sys=GAKRE8CA,time=05/02/12 at 11:31:49 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 06:49:47 pm>   "             "location of the last assigned stack var.             these are vars created on the stack by inlining but             need to be put into the localVar space.  The initial value             is the top of the stak "         ^pbcBlockInfo at:2    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcPriorCode,codeType=rtalkpbcPriorCode        "<modified:sys=GAKRE8CA,time=05/10/12 at 10:34:15 am>   "             "When a block is created remember where the caller was"         ^pbcBlockInfo at:6    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcMaxStackVar,codeType=rtalkpbcMaxStackVar        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:34:07 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 11:31:49 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 06:49:47 pm>   "             "max index for a stack var"         ^pbcBlockInfo at:1    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=storeTemporary:,codeType=rtalkstoreTemporary:arg1         "<modified:sys=GAKRE8CA,time=05/03/12 at 12:28:32 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:59:29 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:49:05 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:47:18 am>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:30:32 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:07:50 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:07:33 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 11:54:36 am>   "            "CA,  Object in eax stored to a temporary"          self pushR.         self putNextPbc:16r24; putNextPbc:( self pbcVarRef + arg1 - 1).         self pop.         self pbcCheckLocalVar:arg1 type:#store.    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcConvertArray:endWith:,codeType=rtalkpbcConvertArray:aArray endWith:aString        "<modified:sys=GAKRE8CA,time=05/15/12 at 01:04:13 pm>   "        "<modified:sys=GAKRE8CA,time=05/04/12 at 11:35:28 am>   "        "<modified:sys=GAKRE8CA,time=05/04/12 at 11:29:03 am>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 05:59:36 pm>   "             "converts an Array literal, for now all elements are the same type.             empty arrays?"         | stm index aSize tmp2 type |         stm := ReadWriteStream on:''.         aSize := aArray size.         self putNextPbc:16r40.         aSize = 0  ifTrue:[self putNextPbc:16r01; putNextPbc:16r42. ^self].  " empty symbol array "         index := 0.         type := '00'.         aArray do:[ :tmp1 |                 index := index + 1.                 tmp1 isString ifTrue:[                         tmp1 isSymbol                             ifTrue:[stm nextPutAll:(tmp1 asString). type := 16r42]                             ifFalse:[stm nextPutAll:(tmp1 asString).  type := 16r41]].                 tmp1 isFloat ifTrue:[stm nextPutAll:(tmp1 asString). type := 16r44].  " 64 bit float "                 tmp1 isInteger                      ifTrue:[stm nextPutAll:(tmp1 asString). type := 16r43].  " 64 bits "                 tmp1 isCharacter ifTrue:[stm nextPutAll:(tmp1 asciiValue asString).  type := 16r45].                 index = aSize ifFalse:[stm tab]].           stm := stm contents.         self putNextPbc:0; putNext4BytesPbc:(stm size + 1).         self putNextPbc:type.         self putNextPbcString:stm    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushDepth:,codeType=rtalkpushDepth:arg1         "<modified:sys=GAKRE8CA,time=04/26/12 at 11:48:55 am>   "            "restore depth"         pushDepth := arg1    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=stackVarCreate,codeType=rtalkstackVarCreate        "<modified:sys=GAKRE8CA,time=05/03/12 at 10:36:13 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 11:32:15 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 10:57:51 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 10:32:57 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 08:52:29 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 06:51:35 pm>   "             "bump and return  the next slot"         | rtn |         rtn := pbcBlockInfo at:2 put:(self pbcLastStackVar + 1).         pbcBlockInfo at:1 put:(self pbcMaxStackVar max:rtn).         ^rtn    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=nodeSelector,codeType=rtalknodeSelector            "comment"          ^McompilerSymbolNode    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pushBlockContext:,codeType=rtalkpushBlockContext:argCount        "<modified:sys=GAKRE8CA,time=04/30/12 at 07:18:00 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 12:33:09 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 12:31:47 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 12:28:00 am>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:16:58 pm>   "            "push block onto stack  4C, D , E"         | label |         self incBlockCount.         " in the calling code we put getting the block "         self putNextPbc:16r18.         self putNextPbc:argCount.         self putNextPbc:blockCount.         " now start the block and set the frame type "         label :=  self startNewBlockWithArgs:argCount.         self push.                                ^label    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=pbcCheckRmtVar:type:,codeType=rtalkpbcCheckRmtVar:aInt type:aSym        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:17:23 pm>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 05:58:26 pm>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 05:57:37 pm>   "        "<modified:sys=GAKRE8CA,time=05/06/12 at 02:22:15 pm>   "        "<modified:sys=GAKRE8CA,time=05/02/12 at 02:23:19 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 12:12:21 am>   "        "<modified:sys=GAKRE8CA,time=05/10/11 at 12:01:38 pm>   "        "<modified:sys=GAKRE8CA,time=04/26/11 at 09:02:01 am>   "        "<modified:sys=GAKRE8CA,time=04/26/11 at 08:08:17 am>   "        "<modified:sys=GAKRE8CA,time=04/26/11 at 08:05:27 am>   "             "aInt is the rmtvar index, aSym is #load or #store.             if the location is false the var needs to be initialized"              | val |         val := (pbcRmtVarFlags at:aInt).          val isBoolean ifTrue:[^self].         aSym = #load             ifTrue:[pbcRmtVarFlags at:aInt put:false]             ifFalse:[ " this is a store, if in a block or past a jump then force an init"                     ((self pbcJumpScope ~= 0) | ( blockDepth ~=0))                         ifTrue:[pbcRmtVarFlags at:aInt put:false]                         ifFalse:[pbcRmtVarFlags at:aInt put:true].                 ]    :SOURCE,type=instanceMethod,class=MCompilerEmitPbc,selector=compile:withInstances:evaluating:for:,codeType=rtalkcompile:arg1 withInstances:arg2 evaluating:arg3 for:arg4         "<modified:sys=GAKRE8CA,time=05/01/12 at 06:20:45 pm>   "            "returns an assoc of key and RtCompiledMethod"          errorBlock := [:tmp3 :tmp4 | ^Association key:tmp4 value:tmp3].         ^self compile:arg1 instances:arg2  evaluating: arg3 for:arg4    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=genTimesRepeat,codeType=rtalkgenTimesRepeat        "<modified:sys=GAKRE8CA,time=05/18/12 at 03:05:43 pm>   "        "<modified:sys=GAKRE8CA,time=05/17/12 at 11:50:50 pm>   "        "<modified:sys=GAKRE8CA,time=05/16/12 at 04:02:26 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 04:00:30 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 02:38:57 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 01:59:59 pm>   "            "handlers timesrepeat, if cacade return"          | tmp1 tmp2 label count |         node push.         compiler pushTOS.         count := compiler stackVarCreate.         compiler stackVarStore:count.         tmp1 := compiler jump.          label := compiler backJump.         (arguments at:1) optimizeBlock.         compiler              pushLiteral:1;             stackVarPush:count;             sendStack:#- drop:1;             pushTOS;             stackVarStore:count;             insertLabel:tmp1;             pushLiteral:0;             sendStack:#>= drop:1;             popR;             testJumpFalse:label.          compiler pop.         self isCascade             ifTrue:[compiler stackVarPush:count].             compiler stackVarDrop:count.         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=selector,codeType=rtalkselector            "comment"      ^ selector    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=genOr,codeType=rtalkgenOr        "<modified:sys=GAKRE8CA,time=04/30/12 at 07:02:15 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:33:11 pm>   "            "comment"          | tmp1 |          self loadReceiver.         tmp1 := compiler testJumpTrue.         (arguments at:1) optimizeBlock.         compiler insertLabel:tmp1.         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=selector:,codeType=rtalkselector:arg1             "comment"         selector := arg1    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=loadReceiver,codeType=rtalkloadReceiver            "comment"          node load.         node isCascade             ifTrue:[compiler popR]    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=receiver,codeType=rtalkreceiver            "comment"      ^ node    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=arguments,codeType=rtalkarguments            "comment"      ^ arguments    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=hasUnoptimizedBlock,codeType=rtalkhasUnoptimizedBlock        "<modified:sys=GAKRE8CA,time=05/10/11 at 08:24:50 pm>   "            "comment"          | tmp1 tmp2 |          node hasUnoptimizedBlock             ifTrue:[^true].         arguments do:[:tmp2 | tmp2 hasUnoptimizedBlock                                         ifTrue:[^true]].         (node isBlock             or:[((arguments detect:[:tmp2 | tmp2 isBlock] ifNone:[nil])notNil)])                 ifFalse:[^false].          (self class inlineSelectors includes:(tmp1 := selector value))                             ifFalse:[^true].         arguments last isBlock                 ifFalse:[^true].         ((tmp1 = #whileTrue:) | (tmp1 = #whileFalse:))             ifTrue:[node isNoArgBlock                         ifFalse:[^true]]             ifFalse:[node isBlock                                 ifTrue:[^true]].         (tmp1 = #to:do:)             ifTrue:[                 ^(arguments at:2) isBlock not].         arguments do:[:tmp2 |                  tmp2 isNoArgBlock                     ifFalse:[^true]].         ^false    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=symbol,codeType=rtalksymbol            "comment"          ^selector value asSymbol    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=whoContains:,codeType=rtalkwhoContains:arg1         "<modified:sys=GAKRE8CA,time=04/30/12 at 08:18:22 pm>   "            "arg1 is a line number"          | tmp1 tmp2 |         (icStart isNil  or:[icEnd isNil])                             ifTrue:[^nil].                    (arg1 between:icStart and:icEnd)                             ifFalse:[^nil].         node isCascade             ifTrue:[(tmp1 := node whoContains:arg1)                         isNil   ifFalse:[^tmp1]].         arguments do:[:tmp2 |                 (tmp1 := tmp2 whoContains:arg1)                     isNil ifFalse:[^tmp1]].         (tmp1 := node whoContains:arg1)             isNil ifFalse:[^tmp1].         ^self    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=load,codeType=rtalkload            "comment"          self setIcStart.         (self genFlow:true)             ifFalse:[self loadCompute].         self setIcEnd.    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=emitSend,codeType=rtalkemitSend        "<modified:sys=GAKRE8CA,time=05/18/12 at 03:04:11 pm>   "        "<modified:sys=GAKRE8CA,time=05/17/12 at 11:52:35 pm>   "            "comment"         node isSuper             ifTrue:[compiler sendSuper:self symbol  drop:arguments size]             ifFalse:[compiler send:self symbol  drop:arguments size]    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=compute,codeType=rtalkcompute            "comment"          self setIcStart.         (self genFlow:false)             ifFalse:[                  self loadCompute].         self setIcEnd    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=receiver:,codeType=rtalkreceiver:arg1             "comment"         node := arg1    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=pushReceiver,codeType=rtalkpushReceiver            "comment"          node push    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=loadNoInline,codeType=rtalkloadNoInline        "<modified:sys=GAKRE8CA,time=05/15/12 at 07:49:47 pm>   "        "<modified:sys=GAKRE8CA,time=05/07/12 at 09:09:02 am>   "        "<modified:sys=GAKRE8CA,time=05/03/12 at 11:06:35 pm>   "            "comment"          | tmp1 tmp2 tmp3 rcvr|          self categorize             ifFalse:[^self loadOptReceiver].         self pushReceiver.         rcvr := compiler stackVarCreate.         compiler stackVarStore:rcvr.  " save the rcvr in a var till later "         arguments do:[ :tmp3  |                 tmp3 hasSend                     ifTrue:[                         tmp1 := compiler pushDepth.                         tmp3 load.                         compiler cleanUpTOS:tmp1.                         compiler pushR]                     ifFalse:[tmp3 push]].         compiler stackVarPush:rcvr; popR.  " move the rcvr to eax "         self emitSend.         self isCascade             ifTrue:[compiler stackVarPush:rcvr].  " needs something on stack so use the rcvr "         compiler stackVarDrop:rcvr.  " release the var "    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=genIf:sense:blockCt:,codeType=rtalkgenIf:arg1 sense:arg2 blockCt:arg3         "<modified:sys=GAKRE8CA,time=04/30/12 at 07:05:56 pm>   "        "<modified:sys=GAKRE8CA,time=06/17/11 at 02:39:13 pm>   "            "comment"          | tmp1 tmp2 |         self loadReceiver.         arg3   == 2             ifTrue:[         arguments first isNoArgBlock             ifFalse:[^false]].         arg2             ifTrue:[tmp1 := compiler testJumpFalse]             ifFalse:[tmp1 := compiler testJumpTrue].         (arguments at:1) optimizeBlock.         (arg3 == 2) | arg1             ifTrue:[tmp2 := compiler jump].         compiler insertLabel:tmp1.         arg3 == 2             ifTrue:[((arguments at:2) optimizeBlock)]             ifFalse:[arg1 ifTrue:[compiler  loadNil]].         (arg3 == 2) | arg1                 ifTrue:[    compiler insertLabel:tmp2].                ^true    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=hasAssign,codeType=rtalkhasAssign            "comment"          | tmp1 |          node hasAssign             ifTrue:[^true].         arguments do:[ :tmp1 |             tmp1 hasAssign                 ifTrue:[^true]].         ^false    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=receiverOptTemp,codeType=rtalkreceiverOptTemp        "<modified:user=Roos Inst,time=06/18/08 at 01:32:31 pm>   "            "comment"          | tmp1 |          compiler hasBlock not             ifFalse:[^false].         (compiler nodes temporaries includes:node)             ifFalse:[^false].                      arguments do:[:tmp1 |             tmp1 hasAssign                 ifTrue:[^false]].                      ^true    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=categorize,codeType=rtalkcategorize            "comment"          | tmp1 tmp2 |         arguments size = 0             ifTrue:[^false].         node isBlock             ifTrue:[^false].         node isLiteral             ifTrue:[^false].         (node isVariable             and:[(selector value = 'self')                             or:[(compiler nodes arguments includes:node)                                             or:[self receiverOptTemp]]])                                                         ifTrue:[^false].         node  isLeaf             ifTrue:[                 tmp1 := arguments size.                 arguments do:[:tmp2 |                     (tmp2 isLeaf                         or:[tmp2 isBlock])                             ifTrue:[tmp1 := tmp1 - 1]].         tmp1 = 0  ifTrue:[^false]].         node hasAssign             ifFalse:[                 tmp1 := arguments size.                 arguments do:[:tmp2 |                     (tmp2 isBlock                         or:[tmp2 isLiteral])                             ifTrue:[tmp1 := tmp1 - 1].                     tmp2 isVariable                         ifTrue:[                             (compiler nodes arguments                                  includes:tmp2)                                     ifTrue:[tmp1 := tmp1 - 1]                                     ifFalse:[((compiler hasBlock not)                                         and:[(compiler nodes temporaries includes:tmp2)])                                                     ifTrue:[tmp1 := tmp1 - 1]]]].         tmp1 = 0             ifTrue:[^false]].         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=hasSend,codeType=rtalkhasSend            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=loadCompute,codeType=rtalkloadCompute        "<modified:sys=GAKRE8CA,time=04/27/12 at 08:57:30 am>   "        "<modified:sys=GAKRE8CA,time=04/26/12 at 09:47:18 pm>   "            "comment"          ^self loadNoInline    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=push,codeType=rtalkpush            "comment"          self setIcStart.         self load.         compiler pushR.         self setIcEnd    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=genWhile:sense:,codeType=rtalkgenWhile:arg1 sense:arg2         "<modified:sys=GAKRE8CA,time=04/30/12 at 07:14:15 pm>   "        "<modified:sys=GAKRE8CA,time=04/27/12 at 04:54:33 pm>   "            "comment"          | tmp1 tmp2 label |         node isNoArgBlock             ifFalse:[^false].         tmp1 := compiler jump.         label := compiler backJump.         ((arguments at:1)optimizeBlock).         compiler insertLabel:tmp1.         node optimizeBlock.         arg2             ifTrue:[(compiler testJumpTrue:label)]             ifFalse:[(compiler testJumpFalse:label)].         arg1             ifTrue:[compiler loadNil].         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=arguments:,codeType=rtalkarguments:arg1             "comment"         arguments := arg1    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=hasBlock,codeType=rtalkhasBlock            "comment"          | tmp1 |          node hasBlock             ifTrue:[^true].         arguments do:[ :tmp1 |             tmp1 hasBlock                 ifTrue:[^true]].         ^false    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=genAnd,codeType=rtalkgenAnd        "<modified:sys=GAKRE8CA,time=04/30/12 at 07:02:35 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:24:30 pm>   "            "comment"          | tmp1 |          self loadReceiver.         tmp1 := compiler testJumpFalse.         (arguments at:1) optimizeBlock.         compiler insertLabel:tmp1.         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=genFlow:,codeType=rtalkgenFlow:arg1         "<modified:sys=GAKRE8CA,time=06/17/11 at 02:39:05 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:33:59 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:31:31 pm>   "            "comment"          | tmp1 tmp2 |         arguments size = 0             ifTrue:[^false].         (self isCascade              and:[node isBlock])                         ifTrue:[^false].         (tmp2 := arguments last)             isBlock             ifFalse:[^false].         (tmp1 := selector value)          isSymbol             ifFalse:[                 tmp1 := tmp1 asSymbol.                 self error:'found non-symbol'].         tmp1 == #to:do:             ifTrue:[^self genToDo].         tmp2 isNoArgBlock             ifFalse:[^false].          tmp1 == #ifTrue:             ifTrue:[^self genIf:arg1 sense:true blockCt:1].          tmp1 == #ifFalse:             ifTrue:[^self genIf:arg1 sense:false blockCt:1].          tmp1 == #ifTrue:ifFalse:             ifTrue:[^self genIf:arg1 sense:true blockCt:2].          tmp1 == #ifFalse:ifTrue:             ifTrue:[^self genIf:arg1 sense:false blockCt:2].         tmp1 == #and:             ifTrue:[^self genAnd].         tmp1 == #or:             ifTrue:[^self genOr].         tmp1 == #whileTrue:             ifTrue:[^self genWhile:arg1 sense:true].         tmp1 == #whileFalse:             ifTrue:[^self genWhile:arg1 sense:false].         tmp1 == #timesRepeat:             ifTrue:[^self genTimesRepeat].         ^false    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=genToDo,codeType=rtalkgenToDo        "<modified:sys=GAKRE8CA,time=05/18/12 at 03:06:02 pm>   "        "<modified:sys=GAKRE8CA,time=05/17/12 at 11:52:08 pm>   "        "<modified:sys=GAKRE8CA,time=05/16/12 at 04:36:24 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 03:59:45 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 02:39:19 pm>   "        "<modified:sys=GAKRE8CA,time=05/15/12 at 02:09:56 pm>   "            "handles the from to by 1.  is cascade returns the last index + 1"          | tmp1 tmp2 label label2 index max|          ((tmp1 := arguments at:2)             arguments size = 1)             ifFalse:[compiler  err:'needs one argument'                         at:(tmp1 position)].         node push.        " push start int and create iVar1 "         compiler pushTOS.  " dup end for use later "         index := compiler stackVarCreate.         compiler stackVarStore:index.         (arguments at:1) push.         " push end arg and create iVar2"         max := compiler stackVarCreate.         compiler stackVarStore:max.         label := compiler jump.         label2 := compiler backJump.  " start of loop target "         compiler stackVarPush:index; popR. " put into eax "         (tmp1 arguments at:1)store.  " store eax into block arg"         tmp1 optimizeBlock.         compiler stackVarPush:index.         compiler pushLiteral:1.         compiler  sendStack:#+ drop:1.  " increment index "         compiler pushTOS.         compiler stackVarStore:index.  " save index "         compiler insertLabel:label.         " compare eax which holds the current index to max "         compiler stackVarPush:max.         compiler sendStack:#< drop:1; popR.         compiler testJumpFalse:label2.       " if this is a cascade node we return the index var "         self isCascade             ifTrue:[compiler pushTemporary:index].         compiler pop; stackVarDrop:max ;stackVarDrop:index.         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcMessageNode,selector=loadOptReceiver,codeType=rtalkloadOptReceiver        "<modified:user=Roos Inst,time=06/18/08 at 01:24:58 pm>   "            "comment"          | tmp1 tmp2 |          arguments do:[ :tmp2 |             tmp2 hasSend                 ifTrue:[                     tmp1 := compiler pushDepth.                     tmp2 load.                     compiler cleanUpTOS:tmp1.                     compiler pushR]                 ifFalse:[tmp2 push]].                               tmp1 := compiler pushDepth.         self loadReceiver.         self emitSend.    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=hasUnoptimizedBlock,codeType=rtalkhasUnoptimizedBlock            "comment"          | tmp1 |         statements do:[ :tmp1 | ((tmp1 isBlock)                                             | (tmp1 hasUnoptimizedBlock))                                     ifTrue:[^true]].         ^false    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=arguments:,codeType=rtalkarguments:arg1             "comment"          args := arg1    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=apiDescriptor:,codeType=rtalkapiDescriptor:arg1         "<modified:pgmr=mdr,time=08/06/12 at 09:41:53 am>   "            "words defining the api call     		structure defined by prim iv"          api := arg1    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=selector,codeType=rtalkselector            "comment"          ^selector value    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=hasSend,codeType=rtalkhasSend            "comment"          | tmp1 |          statements do:[ :tmp1 |             tmp1 hasSend                 ifTrue:[^true] ].         ^false    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=position,codeType=rtalkposition            "comment"      ^ endPosition    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=statements:,codeType=rtalkstatements:arg1             "comment"          statements := arg1    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=arguments,codeType=rtalkarguments            "comment"      ^ args    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=whoContainsLiteral:,codeType=rtalkwhoContainsLiteral:arg1             "comment"          | tmp1 tmp2 |          statements do:[ :tmp2 |             (tmp1 := tmp2 whoContainsLiteral:arg1).             tmp1    isNil             ifFalse:[^tmp1]].         ^nil    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=load,codeType=rtalkload        "<modified:sys=GAKRE8CA,time=01/06/12 at 01:12:20 am>   "            "got rid of 5000 byte limit"          | tmp1 tmp2 tmp3 |         self setIcStart.         tmp2 := statements size.         1 to:(tmp2 - 1) do:[ :tmp3 |                 (statements at:tmp3)compute].         tmp2 = 0             ifTrue:[compiler returnSelf]             ifFalse:[                 tmp1 := statements at:tmp2.                 tmp1 load.                 tmp1 isReturn                     ifFalse:[                         compiler evaluating                             ifTrue:[compiler return]                             ifFalse:[compiler returnSelf]]].    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=needsFrame,codeType=rtalkneedsFrame            "comment"         (temps size > 0)             ifTrue:[^true].         (args size > 16)             ifTrue:[^true].         (self hasSend)             ifTrue:[^true].         self hasUnoptimizedBlock             ifTrue:[^true].         ^false    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=temporaries,codeType=rtalktemporaries            "comment"      ^ temps    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=primitive:,codeType=rtalkprimitive:aInt        "<modified:pgmr=mdr,time=08/06/12 at 09:43:11 am>   "            "comment"         ^prim := aInt    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=whoContains:,codeType=rtalkwhoContains:arg1             "comment"         | tmp1 tmp2 |          statements do:[ :tmp2 |             (tmp1 := tmp2 whoContains:arg1)                 isNil             ifFalse:[^tmp1]].         ^self    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=selector:,codeType=rtalkselector:arg1             "comment"         selector := arg1    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=push,codeType=rtalkpush            "comment"          ^self    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=apiDescriptor,codeType=rtalkapiDescriptor            "comment"          ^api    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=statements,codeType=rtalkstatements            "comment"      ^ statements    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=primitive,codeType=rtalkprimitive        "<modified:pgmr=mdr,time=08/06/12 at 09:42:11 am>   "            "integer for api structure"          ^prim    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=hasBlock,codeType=rtalkhasBlock            "comment"          | tmp1 |          statements do:[ :tmp1 |             tmp1 hasBlock                 ifTrue:[^true] ].         ^false    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=hasAssign,codeType=rtalkhasAssign            "comment"          | tmp1 |          statements do:[ :tmp1 |             tmp1 hasAssign                 ifTrue:[^true] ].         ^false    :SOURCE,type=instanceMethod,class=McompilerMethodNode,selector=temporaries:,codeType=rtalktemporaries:arg1             "comment"          temps := arg1    :SOURCE,type=instanceMethod,class=McompilerSymbolNode,selector=push,codeType=rtalkpush         " comment "         ^self    :SOURCE,type=instanceMethod,class=McompilerSymbolNode,selector=isAssign,codeType=rtalkisAssign            "comment"          ^value ==$_    :SOURCE,type=instanceMethod,class=McompilerSymbolNode,selector=isAssignOp,codeType=rtalkisAssignOp            "comment"          ^value ==$_    :SOURCE,type=instanceMethod,class=McompilerSymbolNode,selector=isSymbol:,codeType=rtalkisSymbol:arg1             "comment"          ^value == arg1    :SOURCE,type=instanceMethod,class=McompilerSymbolNode,selector=isChar:,codeType=rtalkisChar:arg1             "comment"          ^value == arg1    :SOURCE,type=instanceMethod,class=McompilerSymbolNode,selector=isKeyword,codeType=rtalkisKeyword            "comment"          ^value isString             and:[value isSymbol not]    :SOURCE,type=instanceMethod,class=McompilerSymbolNode,selector=isSymbol,codeType=rtalkisSymbol            "comment"          ^value isSymbol    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=hasUnoptimizedBlock,codeType=rtalkhasUnoptimizedBlock            "comment"          expression isBlock | expression hasUnoptimizedBlock             ifTrue:[^true]              ifFalse:[^false]    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=hasAssign,codeType=rtalkhasAssign            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=assignees,codeType=rtalkassignees            "comment"      ^ assignees    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=push,codeType=rtalkpush            "comment"          self setIcStart.         self load.         compiler pushR.         self setIcEnd    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=isAssign,codeType=rtalkisAssign            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=whoContains:,codeType=rtalkwhoContains:arg1             "comment"          | tmp1 |          (tmp1 := expression whoContains:arg1)             isNil                  ifFalse:[^tmp1].         ^super whoContains:arg1    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=load,codeType=rtalkload            "comment"          | tmp1 |          self setIcStart.         expression load.         assignees do:[ :tmp1 | tmp1 store].         self setIcEnd.    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=hasSend,codeType=rtalkhasSend            "comment"         expression hasSend             ifTrue:[^true].         ^false    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=expression:,codeType=rtalkexpression:arg1             "comment"          expression := arg1    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=hasBlock,codeType=rtalkhasBlock            "comment"         expression hasBlock             ifTrue:[^true].         ^false    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=whoContainsLiteral:,codeType=rtalkwhoContainsLiteral:arg1             "comment"          | tmp1 |          tmp1 := expression whoContainsLiteral:arg1.         tmp1 isNil             ifFalse:[^tmp1].         ^nil    :SOURCE,type=instanceMethod,class=McompilerAssignNode,selector=assignees:,codeType=rtalkassignees:arg1             "comment"         assignees := arg1    :SOURCE,type=instanceMethod,class=Number,selector=asHexString,codeType=rtalkasHexString     "         This method returns a string containing the hexadecimal          representation of the receiver.  JB 97.03.28     "         | strm |              strm := WriteStream on: (String new: 100).         ^(self printHex: strm) contents trimBlanks    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=hasUnoptimizedBlock,codeType=rtalkhasUnoptimizedBlock            "comment"          | tmp1 |          statements do:[:tmp1 |             ((tmp1 isBlock) | (tmp1 hasUnoptimizedBlock))                 ifTrue:[^true]].         ^false    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=arguments:,codeType=rtalkarguments:arg1             "comment"         arguments := arg1    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=isBlock,codeType=rtalkisBlock            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=isNoArgBlock,codeType=rtalkisNoArgBlock            "comment"          ^arguments size = 0    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=statements:,codeType=rtalkstatements:arg1             "comment"          statements := arg1    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=pushReceiver,codeType=rtalkpushReceiver        "<modified:sys=GAKRE8CA,time=05/09/12 at 08:24:56 am>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 07:16:25 pm>   "            "comment"          | tmp1 tmp2 tmp3 tmp4 tmp5 |          self setIcStart.          ((tmp3 := arguments size) < 3)             ifFalse:[compiler err:'too many arguments'at:(self position)].                  tmp1 := compiler pushBlockContext:tmp3.         tmp5 := compiler pushDepth.         compiler startBlock.         self argumentsToStack.         self  optimizeBlock.         tmp4 := statements size.         tmp4 = 0             ifTrue:[self epilogue]             ifFalse:[         (statements  at:tmp4)isReturn                 ifFalse:[self epilogue]].         compiler endBlock;             pushDepth:tmp5.         self setIcEnd.     .    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=arguments,codeType=rtalkarguments            "comment"      ^ arguments    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=loadReceiver,codeType=rtalkloadReceiver        "<modified:sys=GAKRE8CA,time=05/15/12 at 09:06:17 am>   "        "<modified:sys=GAKRE8CA,time=05/09/12 at 08:25:07 am>   "        "<modified:sys=GAKRE8CA,time=05/08/12 at 06:18:36 pm>   "        "<modified:sys=GAKRE8CA,time=04/30/12 at 07:15:51 pm>   "            "comment"          | tmp1 tmp2 tmp3 tmp4 tmp5 |          self setIcStart.          ((tmp3 := arguments size) < 3)             ifFalse:[compiler err:'too many arguments'at:(self position)].                  tmp1 := compiler pushBlockContext:tmp3.         tmp5 := compiler pushDepth.         compiler startBlock.         self argumentsToStack.         self  optimizeBlock.         tmp4 := statements size.         tmp4 = 0             ifTrue:[self epilogue]             ifFalse:[         (statements  at:tmp4)isReturn                 ifFalse:[self epilogue]].         compiler endBlock;                     pushDepth:tmp5;popR.         self setIcEnd.    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=whoContainsLiteral:,codeType=rtalkwhoContainsLiteral:arg1             "comment"          | tmp1 tmp2 |          statements do:[ :tmp2 |             (tmp1 := tmp2 whoContainsLiteral:arg1).             tmp1    isNil             ifFalse:[^tmp1]].         ^nil    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=epilogue,codeType=rtalkepilogue            "comment"          compiler returnFallOutBlock    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=argumentsToStack,codeType=rtalkargumentsToStack            "comment"          | tmp1 tmp2 |          tmp1 := arguments size.         1 to:tmp1 do:[ :tmp2 |                 compiler loadArgument:tmp2.                 (arguments at:tmp2)store]    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=push,codeType=rtalkpush            "comment"          self setIcStart.         self pushReceiver.         self setIcEnd    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=whoContains:,codeType=rtalkwhoContains:arg1             "comment"         | tmp1 tmp2 |          statements do:[ :tmp2 |             (tmp1 := tmp2 whoContains:arg1)                 isNil             ifFalse:[^tmp1]].         ^super whoContains:arg1    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=load,codeType=rtalkload            "comment"          self setIcStart.         self loadReceiver.         self setIcEnd    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=hasAssign,codeType=rtalkhasAssign            "comment"          | tmp1 |          statements do:[:tmp1 |             tmp1 hasAssign                 ifTrue:[^true]].         ^false    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=optimizeBlock,codeType=rtalkoptimizeBlock        "<modified:sys=GAKRE8CA,time=06/17/11 at 02:38:18 pm>   "            "comment"          | tmp1 tmp2 tmp3 tmp4 |              tmp2 := statements size.         tmp3 := compiler pushDepth.         1 to:(tmp2 - 1) do:[ :tmp4 |                 (statements at:tmp4) compute].         tmp2 = 0             ifTrue:[compiler loadNil]             ifFalse:[tmp1 := statements at:tmp2.                         tmp1 load].         compiler cleanUpTOS:tmp3    :SOURCE,type=instanceMethod,class=McompilerPbcBlockNode,selector=hasBlock,codeType=rtalkhasBlock            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerBase,selector=setIcEnd,codeType=rtalksetIcEnd            "comment"          icEnd := compiler IC    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isAssignOp,codeType=rtalkisAssignOp            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=target:,codeType=rtalktarget:arg1             "comment"         compiler := arg1    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isSuper,codeType=rtalkisSuper            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isAssign,codeType=rtalkisAssign            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=setIcStart,codeType=rtalksetIcStart            "comment"          icStart := compiler IC    :SOURCE,type=instanceMethod,class=McompilerBase,selector=position,codeType=rtalkposition        "<modified:sys=GAKRE8CA,time=01/06/12 at 12:53:17 am>   "            "start of source code,  used by debugger"      ^ position    :SOURCE,type=instanceMethod,class=McompilerBase,selector=addsConstantTo:,codeType=rtalkaddsConstantTo:arg1             "comment"         ^nil    :SOURCE,type=instanceMethod,class=McompilerBase,selector=compiler,codeType=rtalkcompiler            "comment"      ^ compiler    :SOURCE,type=instanceMethod,class=McompilerBase,selector=endPosition,codeType=rtalkendPosition            "comment"      ^ endPosition    :SOURCE,type=instanceMethod,class=McompilerBase,selector=hasUnoptimizedBlock,codeType=rtalkhasUnoptimizedBlock            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isCascade,codeType=rtalkisCascade            "comment"            ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isSymbol,codeType=rtalkisSymbol            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=symbol,codeType=rtalksymbol            "comment"         ^nil    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isLessByte,codeType=rtalkisLessByte            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=genRelop:,codeType=rtalkgenRelop:arg1             "comment"         ^nil    :SOURCE,type=instanceMethod,class=McompilerBase,selector=whoContains:,codeType=rtalkwhoContains:arg1             "comment"          (icStart isNil  or:[icEnd isNil])                             ifTrue:[^nil].                    (arg1 between:icStart and:icEnd)                             ifTrue:[^self].         ^nil    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isSelf,codeType=rtalkisSelf            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isVariable,codeType=rtalkisVariable            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=position:,codeType=rtalkposition:arg1         "<modified:sys=GAKRE8CA,time=01/06/12 at 12:53:33 am>   "            "end of source code, used by debugger"         position := arg1    :SOURCE,type=instanceMethod,class=McompilerBase,selector=compute,codeType=rtalkcompute            "comment"          self load    :SOURCE,type=instanceMethod,class=McompilerBase,selector=icEnd,codeType=rtalkicEnd        "<modified:sys=GAKRE8CA,time=01/06/12 at 12:49:15 am>   "            "used by who contains"      ^ icEnd    :SOURCE,type=instanceMethod,class=McompilerBase,selector=compiler:,codeType=rtalkcompiler:arg1             "comment"         compiler := arg1    :SOURCE,type=instanceMethod,class=McompilerBase,selector=icStart,codeType=rtalkicStart        "<modified:sys=GAKRE8CA,time=01/06/12 at 12:49:00 am>   "            "used by whoContains"      ^ icStart    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isPseudo,codeType=rtalkisPseudo            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=endPosition:,codeType=rtalkendPosition:arg1             "comment"         endPosition := arg1    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isChar:,codeType=rtalkisChar:arg1             "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isSymbol:,codeType=rtalkisSymbol:arg1             "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=hasAssign,codeType=rtalkhasAssign            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=hasSend,codeType=rtalkhasSend            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isByte,codeType=rtalkisByte            "comment"            ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isLeaf,codeType=rtalkisLeaf            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isKeyword,codeType=rtalkisKeyword            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=push,codeType=rtalkpush        "<modified:user=Roos Inst,time=06/18/08 at 01:22:26 pm>   "            "comment"          self setIcStart.         self load.         compiler pushR.         self setIcEnd    :SOURCE,type=instanceMethod,class=McompilerBase,selector=whoContainsLiteral:,codeType=rtalkwhoContainsLiteral:arg1             "comment"         ^nil    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isReturn,codeType=rtalkisReturn            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isBlock,codeType=rtalkisBlock            "comment"           ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isInteger,codeType=rtalkisInteger            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=hasBlock,codeType=rtalkhasBlock            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=firstArg,codeType=rtalkfirstArg            "comment"          ^self    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isLiteral,codeType=rtalkisLiteral            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=atEnd,codeType=rtalkatEnd            "comment"          ^false    :SOURCE,type=instanceMethod,class=McompilerBase,selector=target,codeType=rtalktarget            "comment"      ^ compiler    :SOURCE,type=instanceMethod,class=McompilerBase,selector=isNoArgBlock,codeType=rtalkisNoArgBlock            "comment"          ^false    :SOURCE,type=instanceMethod,class=RtClass,selector=recompile:,codeType=rtalkrecompile: aSymbol        "<modified:sys=GAKRE8CA,time=01/25/12 at 08:47:31 am>   "        "<modified:sys=GAKRE8CA,time=01/16/12 at 05:53:29 pm>   "             "Private - Recompile the method named              aSymbol defined in the receiver."         | result method source |         method := self compiledMethodAt: aSymbol.         result := Compiler             compile: (source := self sourceCodeAt: aSymbol)             in: self.         result == nil             ifTrue: [^self]             ifFalse: [                 result key == aSymbol                     ifFalse: [                         self error:                             'Lost Source code for ', aSymbol].                 self                     addSelector: aSymbol                     withMethod: result value].    :SOURCE,type=instanceMethod,class=RtClass,selector=compile:notifying:,codeType=rtalkcompile: codeString notifying: requestor        "<modified:pgmr=mdr,time=08/20/12 at 01:33:08 pm>   "        "<modified:sys=GAKRE8CA,time=07/19/12 at 08:55:25 pm>   "        "<modified:sys=GAKRE8CA,time=07/19/12 at 08:54:53 pm>   "        "<modified:sys=GAKRE8CA,time=01/25/12 at 08:47:53 am>   "        "<modified:sys=GAKRE8CA,time=09/08/10 at 07:24:14 am>   "        "<modified:sys=GAKRE8CA,time=08/30/10 at 03:08:49 pm>   "             "Compile the method contained in codeString.              The class to use for resolving variables is the receiver.              If there are no errors, add the method to the recevier              messageDictionary and answer the Association with the              message selector as the key and the compiled method              as the value.  If there is an error the requestor is sent              a message by the compiler identitfying the error and              this method answers nil.     		 if successful add to code history     			"          | answer |         answer := Compiler             compile: codeString             in: self             notifying: requestor             ifFail: [^nil].         self methodDictionary             at: answer key  put: answer value.     	RtCodeDef addMethodHistory: answer value  forPackage:requestor.         ^answer    :SOURCE,type=instanceMethod,class=McompilerParser,selector=primary,codeType=rtalkprimary        "<modified:user=Roos Inst,time=06/18/08 at 01:43:35 pm>   "            "comment"          | tmp1 tmp2 |          (item isVariable or:[item isLiteral])             ifTrue:[                 tmp1 := item.                 item := scanner next.                 ^tmp1].         (item isChar:$[)             ifTrue:[^self block].         (item isChar:$()             ifFalse:[^nil].         tmp2 := item position.         item := scanner next.         (tmp1 := self expression)isNil             ifTrue:[self err:'missing expression'].         (item isChar:$))             ifFalse:[self err:'missing ")"'].         item := scanner next.         tmp1 position:tmp2;             endPosition:(item position).         ^tmp1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=extendedProtocol:,codeType=rtalkextendedProtocol:arg1             "comment"          | tmp1 tmp2 |          tmp2 :=              self binaryProtSeries:(self unaryProtSeries:arg1).         item isKeyword             ifTrue:[                 tmp1 := compiler nodeMessage new                     compiler:compiler;                     position:tmp2 position;                     receiver:tmp2.                 tmp2 := self keywordProtocol:tmp1].         tmp2 == arg1             ifFalse:[                 [tmp1 := tmp2.                   (tmp2 := self cascadeExtension:tmp1)isNil                  ] whileFalse:[].         tmp2 := tmp1].         ^tmp2    :SOURCE,type=instanceMethod,class=McompilerParser,selector=scanner:,codeType=rtalkscanner:arg1             "comment"         scanner := arg1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=argumentMissing,codeType=rtalkargumentMissing            "comment"          self err:'argument missing'    :SOURCE,type=instanceMethod,class=McompilerParser,selector=binaryProtSeries:,codeType=rtalkbinaryProtSeries:arg1             "comment"          | tmp1 tmp2 |          tmp1 := arg1.         [tmp2 := tmp1.           item isSymbol] whileTrue:[             tmp1 := compiler nodeMessage new                 compiler:compiler;                 position:tmp2 position;                 receiver:tmp2.             self binaryProtocol:tmp1    ].         ^tmp1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=binarySelector,codeType=rtalkbinarySelector            "comment"          | tmp1 |          item isSymbol             ifFalse:[^nil].         tmp1 := item.         item := scanner next.         ^tmp1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=messagePattern,codeType=rtalkmessagePattern            "comment"          | tmp1 tmp2 |          (tmp1 := self keywordPattern)isNil             ifTrue:[                 (tmp1 := self binaryPattern)isNil                     ifTrue:[                         tmp1 := compiler nodeMethod new                             compiler:compiler.                 (tmp2 := self unarySelector) isNil                     ifTrue:[self err:'message pattern missing'].                 tmp1 selector:tmp2;                     arguments:#()]].         ^tmp1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=unarySelector,codeType=rtalkunarySelector            "comment"          | tmp1 |          item isVariable             ifFalse:[^nil].         tmp1 := compiler nodeSelector new             compiler:compiler;             value:(item value asSymbol);             position:(item position).         item := scanner next.         ^tmp1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=cascadeExtension:,codeType=rtalkcascadeExtension:arg1             "comment"          | tmp1 tmp2 tmp3 |          (item isChar:$;) ifFalse:[^nil].         tmp3 := item position.         item := scanner next.         tmp1 := compiler nodeCascade new.         tmp1 compiler:compiler;                 position:(arg1 position);                 endPosition:tmp3;                 receiver:(arg1 receiver);                 selector:(arg1 selector);                 arguments:(arg1 arguments).         tmp2 := compiler nodeMessage new                         compiler:compiler;                         position:(item position);                         receiver:tmp1.         (self unaryProtocol:tmp2)             isNil ifTrue:[                 (self binaryProtocol:tmp2)                     isNil                         ifTrue:[(self keywordProtocol:tmp2)                                 isNil                                     ifTrue:[self err:'bad cascade protocol']]].         ^tmp2    :SOURCE,type=instanceMethod,class=McompilerParser,selector=javaApi:,codeType=rtalkjavaApi:arg1        "<modified:pgmr=mdr,time=08/06/12 at 02:27:59 pm>   "        "<modified:pgmr=mdr,time=08/06/12 at 02:27:12 pm>   "        "<modified:pgmr=mdr,time=08/06/12 at 01:50:09 pm>   "             "problematic as I need to use get word until I get     		a string that ends in > a trailing > or I run out.     		this is because the items can have non allowed characters"         | defs tmp|         defs :=OrderedCollection new.     	[tmp := scanner nextApiWord.     	 (tmp isString and:[(tmp at:(tmp size)) ~= $>])     		ifFalse:[     		  tmp isString     			ifTrue:[defs add:(tmp copyFrom:1 to:(tmp size - 1))].     		  false]     		ifTrue:[true]]  whileTrue:[ defs add:tmp].  " run until I get to the end"     	arg1 apiDescriptor:(defs asArray).     	item := scanner next.    :SOURCE,type=instanceMethod,class=McompilerParser,selector=method,codeType=rtalkmethod        "<modified:user=Roos Inst,time=06/18/08 at 01:43:04 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:42:38 pm>   "            "comment"          | tmp1 |          item := scanner next.         (tmp1 := self messagePattern) isNil             ifTrue:[^nil].         tmp1 temporaries:self temporaries.         self primitive:tmp1.         method := OrderedCollection new.         tmp1 position:(item position).         self statementSeries:method.         tmp1                 statements:method;                 endPosition:(item position).         (item isChar:$.)             ifTrue:[item := scanner next].         item atEnd                     ifTrue:[^tmp1].         (tmp1 statements isEmpty)             ifFalse:[                 tmp1 statements last isReturn                     ifTrue:[self err:'code follows "^ expression"']].         (item isChar:$))             ifTrue:[self err:'too many )s'].         (item isChar:$])             ifTrue:[self err:'too many ]s'].         self err:'invalid receiver'    :SOURCE,type=instanceMethod,class=McompilerParser,selector=keywordProtocol:,codeType=rtalkkeywordProtocol:arg1         "<modified:user=Roos Inst,time=06/18/08 at 01:46:28 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:40:15 pm>   "            "comment"          | tmp1 tmp2 tmp3 |          item isKeyword             ifFalse:[^nil].         tmp1 := String new.         tmp3 := OrderedCollection new.         [true] whileTrue:[             item isKeyword                 ifFalse:[                 arg1 arguments:tmp3;                         endPosition:(item position);                         selector:(                             compiler nodeSelector new                                 compiler:compiler;                                 value:tmp1 asSymbol).                     ^arg1].             tmp1 := tmp1,(item value).             item := scanner next.             (tmp2 := self primary) isNil                 ifTrue:[self argumentMissing].             tmp2 := self binaryProtSeries:(self unaryProtSeries:tmp2).             tmp3 add:tmp2].    :SOURCE,type=instanceMethod,class=McompilerParser,selector=statementSeries:,codeType=rtalkstatementSeries:arg1             "comment"          [self statement:arg1]             whileTrue:[]    :SOURCE,type=instanceMethod,class=McompilerParser,selector=temporaries,codeType=rtalktemporaries        "<modified:user=Roos Inst,time=06/18/08 at 01:50:09 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:41:51 pm>   "            "comment"          temporaries := OrderedCollection new.         (item isSymbol:#|)             ifTrue:[                 [item := scanner next.                  item isVariable] whileTrue:[                     item mustBeLocal.                     temporaries add:item].         (item isSymbol:#|)                 ifFalse:[self err:'missing "|"' ].         item := scanner next].         ^temporaries    :SOURCE,type=instanceMethod,class=McompilerParser,selector=primitive:,codeType=rtalkprimitive:arg1         "<modified:pgmr=mdr,time=08/06/12 at 11:52:46 am>   "        "<modified:pgmr=mdr,time=08/06/12 at 09:40:50 am>   "        "<modified:pgmr=mdr,time=08/06/12 at 01:10:13 am>   "        "<modified:pgmr=mdr,time=08/06/12 at 01:09:10 am>   "        "<modified:sys=GAKRE8CA,time=05/18/12 at 08:40:10 pm>   "        "<modified:sys=GAKRE8CA,time=05/14/12 at 09:32:11 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 07:00:07 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:39:18 pm>   "            "comment"          | tmp1 |          (item isSymbol:#<)             ifFalse:[^arg1 primitive:0].         (item := scanner next)isKeyword             ifTrue:[                 tmp1 := item value asLowerCase.                 item value:tmp1.                 ( tmp1 = 'jprim:')                     ifTrue:[	arg1 primitive:1.     							^self javaPrimitive:arg1].                 ( tmp1 = 'jrtalk:')                     ifTrue:[ arg1 primitive:2.     							^self javaPrimitive:arg1].                 ( tmp1 = 'jvirtual:')                     ifTrue:[arg1 primitive:3.     							^self javaApi:arg1].                 ( tmp1 = 'jstatic:')                     ifTrue:[arg1 primitive:4.     						   ^self javaApi:arg1].                 self err:'unknown keyword - ',tmp1.                 item := scanner next].         self err:'missing primitive name or number'.         ((item := scanner next) isSymbol:#>)                 ifFalse:[self err:'missing ">"'].         item := scanner next.         ^arg1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=unaryProtocol:,codeType=rtalkunaryProtocol:arg1             "comment"          | tmp1 |          (tmp1 := self unarySelector)             isNil                 ifTrue:[^nil].             ^(arg1 selector:tmp1;                 endPosition:(item position);                 arguments:#())    :SOURCE,type=instanceMethod,class=McompilerParser,selector=compiler:,codeType=rtalkcompiler:arg1             "comment"         compiler := arg1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=binaryProtocol:,codeType=rtalkbinaryProtocol:arg1             "comment"          | tmp1 tmp2 |          (tmp1 := self binarySelector)             isNil ifTrue:[^nil].         (tmp2 := self primary)             isNil ifTrue:[self err:'missing primary'].         tmp2 := self unaryProtSeries:tmp2.         arg1 selector:tmp1;                 endPosition:item position;                 arguments:(Array with:tmp2).         ^arg1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=statements,codeType=rtalkstatements            "comment"          | tmp1 |          tmp1 := OrderedCollection new.         self statementSeries:tmp1.         ^tmp1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=statement:,codeType=rtalkstatement:arg1             "comment"          | tmp1 tmp2 tmp3 |         (tmp1 := self expression) isNil             ifFalse:[                     arg1 add:tmp1.                 (item isChar:$.)                     ifTrue:[                         item := scanner next.                         ^true].                     ^false].         (item isChar:$^)             ifTrue:[                 tmp3 := item position.                 item := scanner next.                 (tmp1 := self expression) isNil                     ifTrue:[self err:'no return expression'].                 arg1 add:(compiler nodeReturn new                     compiler:compiler;                     position:tmp3;                     endPosition:(item position);                     expression:tmp1)].         ^false    :SOURCE,type=instanceMethod,class=McompilerParser,selector=keywordPattern,codeType=rtalkkeywordPattern            "comment"          | tmp1 tmp2 |          tmp2 := String new.         tmp1 := OrderedCollection new.         [item isKeyword]                      whileTrue:[                         tmp2 := tmp2,(item value).                         item := scanner next.                         item isVariable                             ifFalse:[                                 self argumentMissing].                         item mustBeLocal.                         tmp1 add:item.                         item := scanner next].         tmp1 isEmpty             ifTrue:[^nil].         ^(compiler nodeMethod new             compiler:compiler;             arguments:tmp1;             selector:(                 compiler nodeSelector new                     value:(tmp2 asSymbol))                 )    :SOURCE,type=instanceMethod,class=McompilerParser,selector=ifError:,codeType=rtalkifError:arg1             "comment"         errorBlock := arg1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=binaryPattern,codeType=rtalkbinaryPattern            "comment"          | tmp1 tmp2 |         item isSymbol             ifFalse:[^nil].         tmp1 := item.         (item := scanner next)           isVariable             ifFalse:[^self argumentMissing].         item mustBeLocal.         tmp2 := compiler nodeMethod new             compiler:compiler;             selector:tmp1;             arguments:(Array with:item).         item := scanner next.         ^tmp2    :SOURCE,type=instanceMethod,class=McompilerParser,selector=err:,codeType=rtalkerr:arg1             "comment"          errorBlock value:arg1 value:(item position)    :SOURCE,type=instanceMethod,class=McompilerParser,selector=blockArguments,codeType=rtalkblockArguments        "<modified:user=Roos Inst,time=06/18/08 at 01:39:40 pm>   "            "comment"          | tmp1 |          tmp1 := OrderedCollection new.         [item isChar:$:] whileTrue:[             item := scanner next.             item isVariable                 ifFalse:[self argumentMissing].             item mustBeLocal.             tmp1 add:item.             (temporaries includes:item)                     ifFalse:[temporaries add:item].             item := scanner next].         (item isSymbol:#|)             ifTrue:[item := scanner next]             ifFalse:[                 tmp1 isEmpty                     ifFalse:[self err:'missing "|"']].         ^tmp1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=token:,codeType=rtalktoken:arg1             "comment"         item := arg1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=block,codeType=rtalkblock        "<modified:user=Roos Inst,time=06/18/08 at 01:39:01 pm>   "            "comment"          | tmp1 tmp2 |          tmp1 := compiler nodeBlock new                         compiler:compiler;                         position:(item position).         item := scanner next.         tmp1 arguments:(self blockArguments).         tmp2 := OrderedCollection new.         self statementSeries:tmp2.         tmp1 statements:tmp2.         (item isChar:$])             ifFalse:[self err:'missing "]"'].         item := scanner next.         tmp1 endPosition:(item position).         ^tmp1    :SOURCE,type=instanceMethod,class=McompilerParser,selector=expression,codeType=rtalkexpression            "comment"          | tmp1 tmp2 tmp3 |          tmp3 := item position.         item isVariable             ifTrue:[                 tmp2 := item.                 (item := scanner next)isAssignOp                     ifTrue:[                         item := scanner next.                         (tmp1 := self expression)isNil                             ifTrue:[self err:'expression missing'].                         tmp1 isAssign                             ifTrue:[(tmp1 assignees) add:tmp2.                                         ^tmp1]                     ifFalse:[             ^compiler nodeAssign new             compiler:compiler;             expression:tmp1;             position:tmp3;             endPosition:(item position);             assignees:(OrderedCollection with:tmp2)]]]             ifFalse:[         (tmp2 := self primary) isNil             ifTrue:[^nil]].         (tmp1 := self extendedProtocol:tmp2)isNil             ifTrue:[self error:'compiler nil extendedProtocol'].         (item atEnd             or:[((item isChar:$.)                 or:[(item isChar:$])                        or:[item isChar:$)]])])             ifTrue:[^tmp1].         (item isSymbol             or:[item isVariable])                         ifTrue:[self err:'incorrect selector usage']                         ifFalse:[self err:'should be selector']    :SOURCE,type=instanceMethod,class=McompilerParser,selector=javaPrimitive:,codeType=rtalkjavaPrimitive:aNode         "<modified:pgmr=mdr,time=08/06/12 at 11:47:56 am>   "        "<modified:pgmr=mdr,time=08/06/12 at 11:37:40 am>   "        "<modified:sys=GAKRE8CA,time=05/19/12 at 10:03:07 pm>   "        "<modified:sys=GAKRE8CA,time=05/19/12 at 12:16:18 am>   "        "<modified:sys=GAKRE8CA,time=05/18/12 at 08:44:34 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 07:09:09 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 07:06:54 pm>   "        "<modified:sys=GAKRE8CA,time=05/01/12 at 07:04:35 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:45:13 pm>   "            "collects the className and apiName"          | rtn tmp|          rtn := Array new:2.         rtn at:1 put:scanner nextWord.         rtn at:2 put:scanner nextWord.         tmp := rtn at:2.     	tmp isString     		ifFalse:[self err:'missing > or space before >'.     					^aNode].         (tmp at:(tmp size)) = $>             ifTrue:[ rtn at:2 put:(tmp copyFrom:1 to:( tmp size - 1))]             ifFalse:[    item := scanner next.                         (item isSymbol:#>)                             ifFalse:[self err:'missing ">"']].         item := scanner next.         ^aNode apiDescriptor:rtn    :SOURCE,type=instanceMethod,class=McompilerParser,selector=token,codeType=rtalktoken            "comment"      ^ item    :SOURCE,type=instanceMethod,class=McompilerParser,selector=unaryProtSeries:,codeType=rtalkunaryProtSeries:arg1             "comment"          | tmp1 tmp2 |          tmp1 := arg1.         [ tmp2 := tmp1.             item isVariable] whileTrue:[                (tmp1 :=  compiler nodeMessage new)                            compiler:compiler;                            position:(tmp2 position);                         receiver:tmp2.                     self unaryProtocol:tmp1].         ^tmp1    :SOURCE,type=instanceMethod,class=McompilerLeafNode,selector=isLeaf,codeType=rtalkisLeaf            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerLeafNode,selector=value:,codeType=rtalkvalue:arg1             "comment"         value := arg1    :SOURCE,type=instanceMethod,class=McompilerLeafNode,selector=value,codeType=rtalkvalue            "comment"      ^ value    :SOURCE,type=instanceMethod,class=Object,selector=asPbcString,codeType=rtalkasPbcString        "<modified:sys=GAKRE8CA,time=02/23/11 at 09:12:14 am>   "             "converts to string then to hex bytes"         ^self asString asByteArray asHexString    :SOURCE,type=instanceMethod,class=RtCompiledMethod,selector=jvmBytes:,codeType=rtalkjvmBytes:aByteArray        "<modified:sys=GAKRE8CA,time=06/19/11 at 03:49:32 pm>   "             "byteArray"         jvmByteCodeArray := aByteArray    :SOURCE,type=instanceMethod,class=RtCompiledMethod,selector=recompile,codeType=rtalkrecompile        "<modified:sys=GAKRE8CA,time=06/28/12 at 09:21:33 pm>   "        "<modified:sys=GAKRE8CA,time=05/21/12 at 09:54:24 am>   "             "recompile the pbc bytes and nil the java bytes.             return the pbcByteArray"     	| rtn |         jvmByteCodeArray := nil.         pbcByteCodeArray := nil.         rtn := (Compiler             compile: (self source)             in: self classField).         rtn  == nil ifTrue: [^nil].     	self pbcBytes:(rtn value pbcBytes)    :SOURCE,type=instanceMethod,class=RtCompiledMethod,selector=pbcSource,codeType=rtalkpbcSource        "<modified:sys=GAKRE8CA,time=05/15/12 at 02:42:34 pm>   "        "<modified:sys=GAKRE8CA,time=12/22/11 at 03:30:26 pm>   "        "<modified:sys=GAKRE8CA,time=12/22/11 at 03:16:53 pm>   "             "text version of the PBC"         | list |         list := ReadWriteStream on:''.         (MCompilerEmitPbc pbcCodeToDescription:pbcByteCodeArray)             do:[ :l | list nextPutAll:l;cr].         ^list contents    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=storeGlobal,codeType=rtalkstoreGlobal        "<modified:pgmr=mdr,time=01/02/13 at 07:16:42 pm>   "            "prevent stores to Class slots"     	| val key|         binding isAssociation             ifFalse:[key := binding]             ifTrue:[ key := binding key].     	(RtClass classExists:key)     		 ifTrue:[compiler err:'can''t assign to class'  at:position].         compiler storeGlobal:binding.    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=binding,codeType=rtalkbinding            "comment"      ^ binding    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=type:binding:,codeType=rtalktype:arg1 binding:arg2             "comment"          type := arg1.         binding := arg2    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=storeClassVar,codeType=rtalkstoreClassVar        "<modified:pgmr=mdr,time=08/28/12 at 09:31:23 am>   "            "comment"          compiler storeClassVar:binding.    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=mustBeLocal,codeType=rtalkmustBeLocal            "comment"         value first isLowerCase             ifFalse:[compiler err:'must start with lower case' at:position].    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=isVariable,codeType=rtalkisVariable            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=isSuper,codeType=rtalkisSuper            "comment"          ^value = 'super'    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=push,codeType=rtalkpush        "<modified:pgmr=mdr,time=08/28/12 at 10:17:50 am>   "        "<modified:pgmr=mdr,time=08/28/12 at 09:33:42 am>   "            "comment"         | tmp1 |          value = 'true'             ifTrue:[                 compiler pushTrue.                 ^self].         value = 'false'             ifTrue:[                 compiler pushFalse.                 ^self].         value = 'nil'             ifTrue:[                 compiler pushNil.                 ^self].         (value  = 'self'             or:[value  = 'super'])                 ifTrue:[compiler pushSelf.                             ^self].         compiler  resolve:self.         type  == #stackTemp             ifTrue:[             ^compiler pushTemporary:(self binding)].         type == #stackArg              ifTrue:[             ^compiler pushArgument:(self binding)             ].         type == #instance              ifTrue:[             ^compiler pushInstance:(self binding)].         type == #global              ifTrue:[             ^compiler pushGlobal:(self binding)].         type == #classVar             ifTrue:[             ^compiler pushClassVar:(self binding)].         (type  == #contextTemp  or:[type == #contextArg ])             ifTrue:[                 ^compiler pushContextTemporary:binding].         type  == #literal              ifTrue:[                 compiler pushLiteral:(self binding).                 ^self].         self compileError    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=load,codeType=rtalkload        "<modified:pgmr=mdr,time=08/28/12 at 10:17:29 am>   "        "<modified:pgmr=mdr,time=08/28/12 at 09:33:13 am>   "            "comment"         value = 'true'             ifTrue:[                 compiler loadTrue.                 ^self].         value = 'false'             ifTrue:[                 compiler loadFalse.                 ^self].         value = 'nil'             ifTrue:[                 compiler loadNil.                 ^self].         (value  = 'self'             or:[value  = 'super'])                 ifTrue:[compiler loadSelf.                             ^self].         compiler  resolve:self.         type  == #stackTemp             ifTrue:[             ^compiler loadTemporary:(self binding)].         type == #stackArg              ifTrue:[             ^compiler loadArgument:(self binding)].         type == #instance              ifTrue:[             ^compiler loadInstance:binding].         type == #global              ifTrue:[             ^compiler loadGlobal:(self binding)].         type == #classVar              ifTrue:[             ^compiler loadClassVar:(self binding)].         (type  == #contextTemp  or:[type == #contextArg ])             ifTrue:[                 ^compiler loadContextTemporary:binding].         type  == #literal              ifTrue:[                 compiler loadLiteral:binding.                 ^self].         self compileError    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=isSelf,codeType=rtalkisSelf            "comment"          ^value = 'self'    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=store,codeType=rtalkstore        "<modified:pgmr=mdr,time=08/28/12 at 09:30:50 am>   "            "comment"         compiler  resolve:self.         type  == #stackTemp             ifTrue:[             ^compiler storeTemporary:(binding)].         type == #instance              ifTrue:[             ^compiler storeInstance:(binding)].         type == #global              ifTrue:[             ^self storeGlobal].         type == #classVar             ifTrue:[             ^self storeClassVar].         (type  == #contextTemp)             ifTrue:[                 ^compiler storeContextTemporary:binding].         type  == #literal         ifTrue:[              compiler  err:'can''t assign to constant pool variable' at:position].         type  == #stackArg         ifTrue:[              compiler  err:'can''t assign to argument' at:position].         self compileError    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=isPseudo,codeType=rtalkisPseudo            "comment"         (value = 'true'             or:[                 value = 'false'                     or:[                         value = 'nil'                             or:[                                 value = 'self'                                     or:[value = 'super']]]])             ifTrue:[^true].         ^false    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector==,codeType=rtalk=arg1             "comment"         ^(arg1 isKindOf:McompilerLeafNode)             and:[value = arg1 value].    :SOURCE,type=instanceMethod,class=McompilerObjectNode,selector=type,codeType=rtalktype            "comment"      ^ type    :SOURCE,type=instanceMethod,class=McompilerReturnNode,selector=hasUnoptimizedBlock,codeType=rtalkhasUnoptimizedBlock            "comment"          expression isBlock             ifTrue:[^true].         ^expression hasUnoptimizedBlock    :SOURCE,type=instanceMethod,class=McompilerReturnNode,selector=hasBlock,codeType=rtalkhasBlock            "comment"          ^expression hasBlock    :SOURCE,type=instanceMethod,class=McompilerReturnNode,selector=push,codeType=rtalkpush            "comment"          self setIcStart.         self load.         compiler pushR.         self setIcEnd    :SOURCE,type=instanceMethod,class=McompilerReturnNode,selector=whoContains:,codeType=rtalkwhoContains:arg1             "comment"          | tmp1 |          (icStart isNil  or:[icEnd isNil])                             ifTrue:[^nil].                 (arg1 between:icStart and:icEnd)                     ifFalse:[^nil].                 (tmp1 := expression whoContains:arg1) isNil                     ifFalse:[^tmp1].         ^self    :SOURCE,type=instanceMethod,class=McompilerReturnNode,selector=load,codeType=rtalkload            "comment"          self setIcStart.         expression load.         compiler return.         ^self setIcEnd.    :SOURCE,type=instanceMethod,class=McompilerReturnNode,selector=hasSend,codeType=rtalkhasSend            "comment"          ^expression hasSend    :SOURCE,type=instanceMethod,class=McompilerReturnNode,selector=expression:,codeType=rtalkexpression:arg1             "comment"         expression := arg1    :SOURCE,type=instanceMethod,class=McompilerReturnNode,selector=hasAssign,codeType=rtalkhasAssign            "comment"          ^expression hasAssign    :SOURCE,type=instanceMethod,class=McompilerReturnNode,selector=isReturn,codeType=rtalkisReturn            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerReturnNode,selector=whoContainsLiteral:,codeType=rtalkwhoContainsLiteral:arg1             "comment"          ^expression whoContainsLiteral:arg1    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getFloatForSAVE:integer:,codeType=rtalkgetFloatForSAVE:arg1 integer:arg2         "<modified:sys=GAKRE8CA,time=02/04/12 at 07:27:38 pm>   "        "<modified:sys=GAKRE8CA,time=02/04/12 at 07:27:25 pm>   "        "<modified:sys=GAKRE8CA,time=02/03/12 at 10:53:16 pm>   "            "comment"          | tmp1 tmp2 tmp3 tmp4 |          (tmp3 := self nextDigit:arg1) isNil             ifTrue:[source skip:-1.                         ^arg2].         tmp4 := arg1 asFloat.         tmp2 := arg2 asFloat.         [tmp2 := tmp2 + (tmp3 asFloat / tmp4).          (tmp3 := self nextDigit:arg1) isNil]             whileFalse:[tmp4 := tmp4 * (arg1 asFloat)].         (source peekFor:$e)             ifTrue:[^self getFloatExponentFor:arg1 number:(tmp2 asFloat)].         ^tmp2    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getSymbol:,codeType=rtalkgetSymbol:arg1         "<modified:user=Roos Inst,time=06/18/08 at 01:54:19 pm>   "            "comment"          | tmp1 |         arg1 isLetter              ifFalse:[^self getBinarySelector value].         tmp1 := source position.         self skipToIdentifierEnd.         (source peekFor:$:)             ifTrue:[         [source atEnd not and:[source peek isLetter]]              whileTrue:[                     self skipToIdentifierEnd.                     (source peekFor:$:)                         ifFalse:[^self error:'missing ":"' at:(source position + 1)]]].         ^(source copyFrom:tmp1 to:source position)asSymbol    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getFloatFor:integer:,codeType=rtalkgetFloatFor:arg1 integer:arg2         "<modified:sys=GAKRE8CA,time=02/04/12 at 07:26:46 pm>   "        "<modified:sys=GAKRE8CA,time=02/03/12 at 10:53:03 pm>   "            "comment"          | tmp1 tmp2 tmp3 tmp4 |          (tmp3 := self nextDigit:arg1) isNil             ifTrue:[source skip:-1.                         ^arg2].         tmp4 := arg1 asFloat.         tmp2 := arg2 asFloat.         [tmp2 := tmp2 + (tmp3 asFloat / tmp4).          (tmp3 := self nextDigit:arg1) isNil]             whileFalse:[tmp4 := tmp4 * (arg1 asFloat)].         (source peekFor:$e)             ifTrue:[^self getFloatExponentFor:arg1 number:(tmp2 asFloat)].         ^tmp2 asFloat    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=nextDigit:,codeType=rtalknextDigit:arg1             "comment"          | char val|          source atEnd             ifTrue:[^nil].         (((char := source next) isDigit)             or:[char isUpperCase])             ifFalse:[source skip:-1.                                 ^nil].                 arg1 <= (val := char digitValue)                 ifTrue:[self error:'digit too big'  at:source position].         ^val    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getIdentifierOrKeyword,codeType=rtalkgetIdentifierOrKeyword            "comment"          | tmp1 tmp2 |          tmp1 := source position.         self skipToIdentifierEnd.         ^(((source peekFor:$:)             ifTrue:[                 (source peekFor:$=)                     ifTrue:[    source skip:-2.                                 nodes nodeVariable]                         ifFalse:[nodes nodeSelector]]             ifFalse:[nodes nodeVariable])                                  new                                     compiler:nodes;                                     position:tmp1;                                     value:(source copyFrom:tmp1                                                          to:(source position))                                                             asCompactString)    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getFloatExponentFor:number:,codeType=rtalkgetFloatExponentFor:arg1 number:arg2         "<modified:sys=GAKRE8CA,time=02/04/12 at 03:28:44 pm>   "        "<modified:sys=GAKRE8CA,time=02/03/12 at 10:52:36 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:55:02 pm>   "            "comment"          | tmp1 tmp2 |          tmp2 := source peekFor:$-.         tmp1 := self getValueWithRadix:16rA.         tmp2              ifTrue:[tmp1 := tmp1 negated].         ^arg2 * (arg1 asFloat raisedTo:tmp1 asFloat)    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getNumberWithRadix:position:,codeType=rtalkgetNumberWithRadix:arg1 position:arg2             "comment"          | tmp1 tmp2 |          tmp1 := 1.         (arg1 = 0 or:[arg1 > 36])                     ifTrue:[self error:'invalid radix' at:source position].         (source peekFor:$-)             ifTrue:[tmp1 := -1].         tmp2 := self getValueWithRadix:arg1.         (source peekFor:$.)                 ifTrue:[tmp2 := self getFloatFor:arg1 integer:tmp2]             ifFalse:[         (source peekFor:$e)                 ifTrue:[                 tmp2 := self getExponentFor:arg1 number:tmp2]].             ^nodes nodeLiteral new             value:(tmp2 * tmp1);             compiler:nodes;             position: arg2    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=nextApiWord,codeType=rtalknextApiWord        "<modified:pgmr=mdr,time=08/06/12 at 02:23:50 pm>   "        "<modified:pgmr=mdr,time=08/06/12 at 01:57:58 pm>   "        "<modified:pgmr=mdr,time=08/06/12 at 01:54:26 pm>   "        "<modified:pgmr=mdr,time=08/06/12 at 01:44:54 pm>   "             "get the next continous set of chars.     		 modified to detect last word at eol/eof"         | tmp1 start end|         [source atEnd             ifTrue:[   ^ nodes nodeEnd new position:(source position + 1)].                 (tmp1 := source next)                     isSeparator]  whileTrue:[ ].  " skip leading seps "         start := source position.         [source atEnd             ifTrue:[  end isNil     						ifTrue:[^ nodes nodeEnd new position:(source position + 1)]     						ifFalse:[ ^ source contents copyFrom:start to:end]].           (tmp1 := source next)                 isSeparator]  whileFalse:[end := source position ].  " skip to next sep "         source backupOver:nil.         end := source position.         ^source contents copyFrom:start to:end    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getCharacterConstant,codeType=rtalkgetCharacterConstant            "comment"          source atEnd             ifTrue:[                 ^self error:'missing character' at:source position].         ^nodes nodeLiteral new                 value:source next;                 compiler:nodes;                 position:(source position - 1)    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getArrayConstant,codeType=rtalkgetArrayConstant        "<modified:sys=GAKRE8CA,time=05/10/11 at 08:29:54 pm>   "            "comment"          | char rtn pos|         pos := source position - 1 .         rtn := OrderedCollection new.         [source atEnd] whileFalse:[             ((char := source next) == $) )                 ifTrue:[                     ^nodes nodeLiteral new                               value:(rtn asArray);                              compiler:nodes;                              position:pos].             char == $'                 ifTrue:[rtn add: self getString value]                 ifFalse:[             char isDigit                 ifTrue:[rtn add: (self getNumber:char radixOK:true)value]                 ifFalse:[             char isLetter                 ifTrue:[ rtn add:( self getSymbol:char)]                 ifFalse:[             char == $$                 ifTrue:[ rtn add:( self getCharacterConstant)value]                 ifFalse:[             (self class specialChars includes:char)                 ifTrue:[ rtn add:( self getBinarySelector)value]                 ifFalse:[             char == $-                 ifTrue:[ rtn add:( self getNumberOrSelector)value]                 ifFalse:[             char == $(                 ifTrue:[ rtn add:( self getArrayConstant)value]                 ifFalse:[             char == $"                 ifTrue:[ self skipComment]                 ifFalse:[                     char isSeparator                         ifTrue:[]                         ifFalse:[self error:'invalid array character' at:source position].         ]]]]]]]]].         self error:'missing ")"' at:(source position + 1)    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getSymbolOrArrayConstant,codeType=rtalkgetSymbolOrArrayConstant        "<modified:sys=GAKRE8CA,time=05/10/11 at 08:30:16 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:53:31 pm>   "            "comment"          | tmp1 tmp2 tmp3 |          tmp2 := source position.         source atEnd             ifFalse:[                 ((tmp1 := source next) == $()                     ifTrue:[^self getArrayConstant].                 (tmp1 isLetter                     or:[(self class specialChars includes:tmp1)])                         ifTrue:[                                ^nodes nodeLiteral new                              position:tmp2;                             compiler:nodes;                             value:(tmp3 := self getSymbol:tmp1);                             endPosition:(tmp2 + 1 + tmp3 size)                             ]                     ifFalse:[tmp1 == $-                          ifTrue:[                                ^nodes nodeLiteral new                              value:#-;                             compiler:nodes;                             endPosition:(source position + 2);                             position:source position                             ]]].                                      self error:'constant is missing' at:(tmp2 + 1)    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getNumberOrSelector,codeType=rtalkgetNumberOrSelector        "<modified:user=Roos Inst,time=06/18/08 at 01:51:53 pm>   "            "comment"          | tmp1 tmp2 tmp3 |         tmp3 := source position.         source atEnd             ifFalse:[                 (tmp1 := source next)                   isDigit                     ifTrue:[                         tmp2 := self getNumber:tmp1 radixOK:false.                         tmp2 value:(tmp2 value negated);position:tmp3.                             ^tmp2].                 source skip:-1].         ^nodes nodeSelector new                 value:#-;                 compiler:nodes;                  position:tmp3    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=skipComment,codeType=rtalkskipComment        "<modified:user=Roos Inst,time=06/18/08 at 01:53:49 pm>   "            "comment"          (source skipTo:$")             ifFalse:[self error:'unfinished comment' at:(source size)]    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getValueWithRadix:,codeType=rtalkgetValueWithRadix:arg1             "comment"          | tmp1 tmp2 tmp3 |         tmp2 := 0.         tmp3 := false.         [(tmp1 := self nextDigit:arg1)isNil] whileFalse:[             tmp3 := true.             tmp2 := tmp2 *arg1 + tmp1].         tmp3 ifFalse:[self error:'no digits' at:source position ].         ^tmp2    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=error:at:,codeType=rtalkerror:arg1 at:arg2             "comment"          errorBlock value:arg1 value:arg2    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getExponentFor:number:,codeType=rtalkgetExponentFor:arg1 number:arg2         "<modified:user=Roos Inst,time=06/18/08 at 01:55:02 pm>   "            "comment"          | tmp1 tmp2 |          tmp2 := source peekFor:$-.         tmp1 := self getValueWithRadix:16rA.         tmp2              ifTrue:[tmp1 := tmp1 negated].         ^arg2 * (arg1 raisedToInteger:tmp1)    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getBinarySelector,codeType=rtalkgetBinarySelector        "<modified:sys=GAKRE8CA,time=06/10/11 at 05:31:11 pm>   "        "<modified:sys=GAKRE8CA,time=06/02/11 at 01:01:43 pm>   "        "<modified:sys=GAKRE8CA,time=05/10/11 at 08:30:04 pm>   "            "comment"          | tmp1 tmp2 |          tmp2 := source position.         tmp1 := source peek.         (self class specialChars includes:tmp1)             ifTrue:[source next].         ^nodes nodeSelector new                         value:(source copyFrom:tmp2 to:(source position))asSymbol;                         compiler:nodes;                         position:tmp2.    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=on:for:errorBlock:,codeType=rtalkon:aString for:arg2 errorBlock:aBlock        "<modified:sys=GAKRE8CA,time=05/12/11 at 10:53:15 am>   "        "<modified:sys=GAKRE8CA,time=05/11/11 at 05:58:08 pm>   "            "comment"          source := ReadStream on:aString.         nodes := arg2.         errorBlock := aBlock    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getString,codeType=rtalkgetString        "<modified:user=Roos Inst,time=06/18/08 at 01:57:52 pm>   "        "<modified:user=Roos Inst,time=06/18/08 at 01:52:55 pm>   "            "comment"          | tmp1 |          tmp1 := nodes nodeLiteral new                     position:source position;                     compiler:nodes;                     value:(source upTo:$') asCompactString.          [source atEnd                 ifTrue:[                                     (source position = tmp1 position                         or:[(source skip:-1;next) ~=$'])                                 ifTrue:[ self error:'unfinished string' at:source position]].             source peekFor:$']             whileTrue:[                 tmp1 value:((tmp1 value),'''',((source upTo:$') asCompactString))].         ^tmp1    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=nextWord,codeType=rtalknextWord        "<modified:sys=GAKRE8CA,time=05/19/12 at 10:53:47 pm>   "        "<modified:sys=GAKRE8CA,time=05/19/12 at 10:07:19 pm>   "        "<modified:sys=GAKRE8CA,time=05/19/12 at 12:54:23 am>   "        "<modified:sys=GAKRE8CA,time=05/19/12 at 12:48:21 am>   "        "<modified:sys=GAKRE8CA,time=05/19/12 at 12:14:17 am>   "             "get the next continous set of chars"         | tmp1 start end|         [source atEnd             ifTrue:[   ^ nodes nodeEnd new position:(source position + 1)].                 (tmp1 := source next)                     isSeparator]  whileTrue:[ ].  " skip leading seps "         start := source position.         [source atEnd             ifTrue:[   ^ nodes nodeEnd new position:(source position + 1)].           (tmp1 := source next)                 isSeparator]  whileFalse:[ ].  " skip to next sep "         source backupOver:nil.         end := source position.         ^source contents copyFrom:start to:end    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=skipToIdentifierEnd,codeType=rtalkskipToIdentifierEnd            "comment"          [source atEnd]             whileFalse:[source next isAlphaNumeric                                  ifFalse:[source skip:-1.                                             ^self]]    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getNumber:radixOK:,codeType=rtalkgetNumber:arg1 radixOK:arg2         "<modified:user=Roos Inst,time=06/18/08 at 01:55:49 pm>   "            "comment"          | tmp1 tmp2 tmp3 |          tmp2 := source position.         tmp3 := arg1 digitValue.         [(tmp1 := self nextDigit:16rA) isNil]             whileFalse:[                 tmp3 := tmp3 * 10 + tmp1].         (source peekFor:$r)             ifTrue:[ arg2                     ifFalse:[self error:'radix not allowed' at:(source position)].                     ^self getNumberWithRadix:tmp3 position:tmp2].         (source peekFor:$.)             ifTrue:[tmp3 := self getFloatFor:16rA integer:tmp3]             ifFalse:[(source peekFor:$e)                 ifTrue:[tmp3 := self getExponentFor:16rA number:tmp3]].             ^nodes nodeLiteral new                 value:tmp3;                 compiler:nodes;                 position:tmp2    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=getColonOrLeftArrow,codeType=rtalkgetColonOrLeftArrow            "comment"          | tmp1 |          tmp1 := nodes nodeSelector new             compiler:nodes;             position:source position.         (source peekFor:$=)             ifTrue:[^tmp1 value:$_]             ifFalse:[^tmp1 value:$:]    :SOURCE,type=instanceMethod,class=McompilerSourceScanner,selector=next,codeType=rtalknext        "<modified:sys=GAKRE8CA,time=06/08/11 at 08:07:03 pm>   "        "<modified:sys=GAKRE8CA,time=06/02/11 at 03:04:50 pm>   "        "<modified:sys=GAKRE8CA,time=06/02/11 at 01:06:35 pm>   "        "<modified:sys=GAKRE8CA,time=05/11/11 at 05:51:33 pm>   "        "<modified:sys=GAKRE8CA,time=05/10/11 at 08:30:31 pm>   "             "comment"         | tmp1|         [source atEnd             ifTrue:[   ^ nodes nodeEnd new position:(source position + 1)].                 (tmp1 := source next)                     isSeparator]  whileTrue:[ ].                         tmp1 isLetter                             ifTrue:[^self getIdentifierOrKeyword].                           tmp1 isDigit                             ifTrue:[^self getNumber:tmp1 radixOK:true].                         tmp1 == $"                             ifTrue:[^self skipComment;next].                         tmp1 == $'                              ifTrue:[^self getString].                         tmp1 == $$                             ifTrue:[^self getCharacterConstant].                         tmp1 == $-                             ifTrue:[^self getNumberOrSelector].                         tmp1 == $#                             ifTrue:[^self getSymbolOrArrayConstant].                         tmp1 == $:                             ifTrue:[^self getColonOrLeftArrow].                         (self class specialChars includes:tmp1)                             ifTrue:[^self getBinarySelector].         ^nodes nodeSelector new value:tmp1;             compiler:nodes;             position:source position    :SOURCE,type=instanceMethod,class=String,selector=pbcConvert,codeType=rtalkpbcConvert        "<modified:sys=GAKRE8CA,time=02/23/11 at 06:53:03 pm>   "        "<modified:sys=GAKRE8CA,time=02/23/11 at 09:47:27 am>   "             "converts an hex encoded string to a normal one"         ^self riHexToBytes asString    :SOURCE,type=instanceMethod,class=String,selector=riRemoveChar:,codeType=rtalkriRemoveChar:aChar             "Answer a String containing the receiver string              with blanks removed."         | c inStream outStream|         inStream := ReadStream on: self.         outStream := WriteStream on:(String new).         [inStream atEnd]              whileFalse:[ c := inStream next.                                  c = aChar                                     ifFalse:[outStream nextPut:c]].         ^outStream contents    :SOURCE,type=instanceMethod,class=McompilerEndNode,selector=atEnd,codeType=rtalkatEnd            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=hasUnoptimizedBlock,codeType=rtalkhasUnoptimizedBlock            "comment"          | tmp1 |          statements do:[:tmp1 |             ((tmp1 isBlock) | (tmp1 hasUnoptimizedBlock))                 ifTrue:[^true]].         ^false    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=arguments:,codeType=rtalkarguments:arg1             "comment"         arguments := arg1    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=isBlock,codeType=rtalkisBlock            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=isNoArgBlock,codeType=rtalkisNoArgBlock            "comment"          ^arguments size = 0    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=statements:,codeType=rtalkstatements:arg1             "comment"          statements := arg1    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=pushReceiver,codeType=rtalkpushReceiver            "comment"          | tmp1 tmp2 tmp3 tmp4 tmp5 |          self setIcStart.          ((tmp3 := arguments size) < 3)             ifFalse:[compiler err:'too many arguments'at:(self position)].                  tmp1 := compiler pushBlockContext:tmp3.         tmp5 := compiler pushDepth.         compiler startBlock.         self argumentsToStack.         self  optimizeBlock.         tmp4 := statements size.         tmp4 = 0             ifTrue:[self epilogue]             ifFalse:[         (statements  at:tmp4)isReturn                 ifFalse:[self epilogue]].         compiler endBlock;         patchJumpAt:tmp1;         pushDepth:tmp5.         self setIcEnd.     .    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=arguments,codeType=rtalkarguments            "comment"      ^ arguments    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=loadReceiver,codeType=rtalkloadReceiver            "comment"          | tmp1 tmp2 tmp3 tmp4 tmp5 |          self setIcStart.          ((tmp3 := arguments size) < 3)             ifFalse:[compiler err:'too many arguments'at:(self position)].                  tmp1 := compiler loadBlockContext:tmp3.         tmp5 := compiler pushDepth.         compiler startBlock.         self argumentsToStack.         self  optimizeBlock.         tmp4 := statements size.         tmp4 = 0             ifTrue:[self epilogue]             ifFalse:[         (statements  at:tmp4)isReturn                 ifFalse:[self epilogue]].         compiler endBlock;         patchJumpAt:tmp1;         pushDepth:tmp5.         self setIcEnd.     .    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=whoContainsLiteral:,codeType=rtalkwhoContainsLiteral:arg1             "comment"          | tmp1 tmp2 |          statements do:[ :tmp2 |             (tmp1 := tmp2 whoContainsLiteral:arg1).             tmp1    isNil             ifFalse:[^tmp1]].         ^nil    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=epilogue,codeType=rtalkepilogue            "comment"          compiler returnFallOutBlock    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=argumentsToStack,codeType=rtalkargumentsToStack            "comment"          | tmp1 tmp2 |          tmp1 := arguments size.         1 to:tmp1 do:[ :tmp2 |                 compiler loadArgument:tmp2.                 (arguments at:tmp2)store]    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=push,codeType=rtalkpush            "comment"          self setIcStart.         self pushReceiver.         self setIcEnd    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=whoContains:,codeType=rtalkwhoContains:arg1             "comment"         | tmp1 tmp2 |          statements do:[ :tmp2 |             (tmp1 := tmp2 whoContains:arg1)                 isNil             ifFalse:[^tmp1]].         ^super whoContains:arg1    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=load,codeType=rtalkload            "comment"          self setIcStart.         self loadReceiver.         self setIcEnd    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=hasAssign,codeType=rtalkhasAssign            "comment"          | tmp1 |          statements do:[:tmp1 |             tmp1 hasAssign                 ifTrue:[^true]].         ^false    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=optimizeBlock,codeType=rtalkoptimizeBlock        "<modified:sys=GAKRE8CA,time=06/17/11 at 02:38:18 pm>   "            "comment"          | tmp1 tmp2 tmp3 tmp4 |              tmp2 := statements size.         tmp3 := compiler pushDepth.         1 to:(tmp2 - 1) do:[ :tmp4 |                 (statements at:tmp4) compute].         tmp2 = 0             ifTrue:[compiler loadNil]             ifFalse:[tmp1 := statements at:tmp2.                         tmp1 load].         compiler cleanUpTOS:tmp3    :SOURCE,type=instanceMethod,class=McompilerBlockNode,selector=hasBlock,codeType=rtalkhasBlock            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcCascadeNode,selector=hasUnoptimizedBlock,codeType=rtalkhasUnoptimizedBlock            "comment"          node isBlock             ifTrue:[^true]             ifFalse:[^super hasUnoptimizedBlock]    :SOURCE,type=instanceMethod,class=McompilerPbcCascadeNode,selector=categorize,codeType=rtalkcategorize            "comment"          (arguments size = 0)             ifTrue:[^false].         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcCascadeNode,selector=push,codeType=rtalkpush            "comment"          self setIcStart.         self load.         self setIcEnd    :SOURCE,type=instanceMethod,class=McompilerPbcCascadeNode,selector=whoContains:,codeType=rtalkwhoContains:arg1             "comment"          | tmp1 tmp2 |         (icStart isNil  or:[icEnd isNil])                             ifTrue:[^nil].         (arg1 between:icStart and:icEnd)             ifFalse:[^nil].         (tmp1 := node whoContains:arg1) isNil             ifFalse:[^tmp1].         arguments do:[ :tmp2 |             (tmp1 := tmp2 whoContains:arg1)                 isNil ifFalse:[^tmp1]].         ^self    :SOURCE,type=instanceMethod,class=McompilerPbcCascadeNode,selector=pushReceiver,codeType=rtalkpushReceiver            "comment"          node push    :SOURCE,type=instanceMethod,class=McompilerPbcCascadeNode,selector=loadReceiver,codeType=rtalkloadReceiver            "comment"          node load.         node isCascade             ifTrue:[compiler tosR]             ifFalse:[compiler pushR]    :SOURCE,type=instanceMethod,class=McompilerPbcCascadeNode,selector=isCascade,codeType=rtalkisCascade            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerPbcCascadeNode,selector=isSuper,codeType=rtalkisSuper            "comment"          ^node isSuper    :SOURCE,type=instanceMethod,class=McompilerLiteralNode,selector=push,codeType=rtalkpush            "comment"          compiler pushLiteral:value    :SOURCE,type=instanceMethod,class=McompilerLiteralNode,selector=load,codeType=rtalkload            "comment"          compiler loadLiteral:value    :SOURCE,type=instanceMethod,class=McompilerLiteralNode,selector=isLiteral,codeType=rtalkisLiteral            "comment"         ^true    :SOURCE,type=instanceMethod,class=McompilerLiteralNode,selector=whoContainsLiteral:,codeType=rtalkwhoContainsLiteral:arg1             "comment"         ^ value = arg1             ifTrue:[self]             ifFalse:[nil]    :SOURCE,type=instanceMethod,class=McompilerLiteralNode,selector=isByte,codeType=rtalkisByte            "comment"          ^(value isInteger)             and:[value between:0 and:255].    :SOURCE,type=instanceMethod,class=McompilerLiteralNode,selector=isInteger,codeType=rtalkisInteger            "comment"          ^value isInteger    :SOURCE,type=instanceMethod,class=RtMetaClass,selector=recompile:,codeType=rtalkrecompile: aSymbol        "<modified:sys=GAKRE8CA,time=01/25/12 at 08:49:05 am>   "        "<modified:sys=GAKRE8CA,time=01/16/12 at 05:54:02 pm>   "             "Private - Recompile the method named              aSymbol defined in the receiver."         | result method source |         method := self compiledMethodAt: aSymbol.         result := Compiler             compile: (source := self sourceCodeAt: aSymbol)             in: self.         result == nil             ifTrue: [^self]             ifFalse: [                 result key == aSymbol                     ifFalse: [                         self error:                             'Lost Source code for ', aSymbol].                 self                     addSelector: aSymbol                     withMethod: result value].    :SOURCE,type=instanceMethod,class=RtMetaClass,selector=compile:notifying:,codeType=rtalkcompile: codeString notifying: requestor        "<modified:pgmr=mdr,time=08/20/12 at 01:33:25 pm>   "        "<modified:sys=GAKRE8CA,time=07/19/12 at 08:57:55 pm>   "        "<modified:sys=GAKRE8CA,time=01/25/12 at 08:51:11 am>   "        "<modified:sys=GAKRE8CA,time=09/08/10 at 07:23:14 am>   "        "<modified:sys=GAKRE8CA,time=08/30/10 at 03:09:25 pm>   "             "Compile the method contained in codeString.              The class to use for resolving variables is the receiver.              If there are no errors, add the method to the recevier              messageDictionary and answer the Association with the              message selector as the key and the compiled method              as the value.  If there is an error the requestor is sent              a message by the compiler identitfying the error and              this method answers nil.     		add to history"          | answer |         answer := Compiler             compile: codeString             in: self             notifying: requestor             ifFail: [^nil].         self methodDictionary             at: answer key  put: answer value.     	RtCodeDef addMethodHistory: answer value  forPackage:requestor.         ^answer    :CHECKSUM27755916zzv00