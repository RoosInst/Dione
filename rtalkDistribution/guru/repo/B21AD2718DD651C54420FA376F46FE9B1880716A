CRI6UN:INFOname=9GFK2V00nameSpace=rtalkdate=2014-06-16.11.47.11.0000author=nonetitle=RTALK Base Classesrid=G78T5XCA9GFK3T00version=1subVersion=79type=rtalkparser=v2:LICENSECopyright (c) 2012 Roos Instruments Inc.
Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
and associated documentation files (the "Software"), to deal in the Software without restriction, 
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.:CLASSESclass,type=named,class=Object,modified=728967752class,super=Object,type=java,class=Utf8String,modified=571795337class,super=Object,type=named,class=RtSystem,modified=710298151,classVariableNames=LaunchInfoclass,super=Object,type=named,class=Magnitude,modified=571795337class,super=Object,type=named,class=RtMethodLookup,modified=741749401,varCnt=5,instanceVariableNames=elementCount;contents;owner;selfLink;superLinkclass,super=Object,type=named,class=RtSemaphore,modified=571795337,varCnt=2,instanceVariableNames=name;stateclass,super=Object,type=named,class=RtDictionary,modified=571795337,varCnt=3,instanceVariableNames=elementCount;contents;ownerclass,super=Object,type=named,class=Boolean,modified=571795337class,super=Object,type=named,class=RiGuruTime,modified=571795337,classVariableNames=RandomSeed;LastSequence;LastTimeStampclass,super=Object,type=java,class=RtBlock1Arg,modified=571795337class,super=Object,type=named,class=RtClass,modified=670615650,varCnt=9,instanceVariableNames=superClass;dictionaryArray;structure;name;attributes;subclasses;instances;classPool;timeStampclass,super=Object,type=named,class=Collection,modified=571795337class,super=Object,type=java,class=RtTimer,modified=571795337class,super=Object,type=java,class=RtThread,modified=571795337class,super=Object,type=named,class=RtCompiledMethod,modified=670615650,varCnt=9,instanceVariableNames=pbcByteCodeArray;jvmByteCodeArray;methodHandle;class;selector;sourceObject;info;attributes;timeStampclass,super=Object,type=java,class=RtBlock,modified=571795337class,super=Object,type=named,class=RtSymbolSet,modified=571795337,varCnt=2,instanceVariableNames=elementCount;contentsclass,super=Object,type=named,class=UndefinedObject,modified=571795337class,super=Object,type=java,class=RtBlock2Arg,modified=571795337class,super=Object,type=java,class=RtJavaObject,modified=571795337class,super=Object,type=named,class=RtMetaClass,modified=571795337,varCnt=1,instanceVariableNames=instanceClassclass,super=Magnitude,type=named,class=Number,modified=571795337class,super=Boolean,type=named,class=True,modified=571795337class,super=Collection,type=named,class=Set,modified=571795337,varCnt=2,instanceVariableNames=elementCount;contentsclass,super=Magnitude,type=named,class=Association,modified=571795337,varCnt=2,instanceVariableNames=value;keyclass,super=Boolean,type=named,class=False,modified=571795337class,super=Collection,type=named,class=IndexedCollection,modified=571795337class,super=Magnitude,type=integer,class=Character,modified=571795337class,super=Set,type=named,class=Dictionary,modified=571795337,varCnt=2class,super=IndexedCollection,type=named,class=FixedSizeCollection,modified=571795337class,super=Number,type=integer,class=Integer,modified=571795337class,super=IndexedCollection,type=named,class=OrderedCollection,modified=571795337,varCnt=3,instanceVariableNames=startPosition;endPosition;contentsclass,super=Number,type=named,class=Fraction,modified=571795337,varCnt=2,instanceVariableNames=numerator;denominatorclass,super=Number,type=float,class=Float,modified=571795337class,super=Dictionary,type=named,class=IdentityDictionary,modified=571795337,varCnt=2class,super=FixedSizeCollection,type=bytes,class=ByteArray,modified=571795337class,super=FixedSizeCollection,type=named,class=Interval,modified=571795337,varCnt=3,instanceVariableNames=beginning;end;incrementclass,super=FixedSizeCollection,type=bytes,class=String,modified=571795337class,super=OrderedCollection,type=named,class=SortedCollection,modified=571795337,varCnt=4,instanceVariableNames=sortBlockclass,super=Integer,type=java,class=BigInteger,modified=571795337class,super=FixedSizeCollection,type=indexed,class=Array,modified=571795337class,super=String,type=bytes,class=Symbol,modified=571795337:METHODSclass,class=RtSymbolSet,selector=symbolSet,codeType=rtalk,modified=744676834,pbc=040000001600127072696D47657453796D626F6C5461626C650A2F4D6973635072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Eclass,class=Symbol,selector=fromString:,codeType=rtalk,modified=571795337,pbc=040100002301240302000000042303100008617353796D626F6C240323031Eclass,class=Symbol,selector=mustBeSymbol:,codeType=rtalk,modified=571795337,pbc=040100002301240302000000042303100008697353796D626F6C2403230309014011314D75737420626520612053796D626F6C23022403020000001B23031001066572726F723A240323031E080201012C012403010223021Eclass,class=Symbol,selector=new:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Eclass,class=RtDictionary,selector=new,codeType=rtalk,modified=672879637,pbc=0400000123012402020000000423021100036E6577064F626A656374240223022404230124020200000019230210000B696E697469616C53697A652402230223042402020000002B230210010B696E697469616C697A653A240223021Eclass,class=RtDictionary,selector=newSize:,codeType=rtalk,modified=672879516,pbc=0401000123022403020000000423031100036E6577064F626A6563742403230324054002343223012403020000001C23031001012A24032303400234312403020000002F23031001046D61783A24032303230524030200000041230310010B696E697469616C697A653A240323031Eclass,class=RtDictionary,selector=new:,codeType=rtalk,modified=672879445,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Eclass,class=RtDictionary,selector=initialSize,codeType=rtalk,modified=571795337,pbc=0400000040023438240223021Eclass,class=SortedCollection,selector=sortBlock:,codeType=rtalk,modified=571795337,pbc=040100002301400334313023022403020000000923031101046E65773A114F726465726564436F6C6C656374696F6E24030200000016230310010A736F7274426C6F636B3A240323031Eclass,class=SortedCollection,selector=new:,codeType=rtalk,modified=571795337,pbc=0601000401002C0126012C01260223012603180201250323022403020000003323031101046E65773A114F726465726564436F6C6C656374696F6E24030200000040230310010A736F7274426C6F636B3A240323031E050102000023012404230426012302240423042602250225012404020000001E23041001023C3D240423041Eclass,class=Integer,selector=fromString:,codeType=rtalk,modified=571795337,pbc=0401000023012403020000000423031000096173496E7465676572240323031Eclass,class=Integer,selector=random,codeType=rtalk,modified=744421438,pbc=04000001400435312E3024020200000005230210000672616E646F6D2402230224044003343331400234322402020000001D230210010962697453686966743A2402230223042402020000002F23021001012A2402020000003B23021000097472756E6361746564240223021Eclass,class=Integer,selector=new:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Eclass,class=Integer,selector=random:,codeType=rtalk,modified=669906706,pbc=040100002301230224030200000006230310000672616E646F6D2403020000001223031001025C5C240323031Eclass,class=Integer,selector=fromHexString:,codeType=rtalk,modified=571795337,pbc=040100032301240302000000042303100008617353747265616D24032303240523052403020000001823031000046E65787424030200000024230310000A617348657856616C7565240323032406400234373124070801010240023434230624030200000045230310010962697453686966743A24032303240623052403020000005923031000046E65787424030200000065230310000A617348657856616C75652403230323062403020000007723031001066269744F723A240323032406400234312307020000008C1001012D312407010140023430020000009C1001023E3D240323030A022306240323031Eclass,class=BigInteger,selector=fromBytes:,codeType=rtalk,modified=726199025,pbc=0401000016010D7072696D46726F6D42797465730D2F5274426967496E74656765722C01240323031Eclass,class=BigInteger,selector=javaClass,codeType=rtalk,modified=713158529,pbc=040000004016312F6A6176612F6D6174682F426967496E7465676572240223021Eclass,class=Utf8String,selector=javaClass,codeType=rtalk,modified=713158352,pbc=040000004012312F6A6176612F6C616E672F537472696E67240223021Eclass,class=Fraction,selector=numerator:denominator:,codeType=rtalk,modified=571795337,pbc=0402000023012302230324040200000008230410000862617369634E65772404020000001423041002166E756D657261746F723A64656E6F6D696E61746F723A240423041Eclass,class=Fraction,selector=fromString:,codeType=rtalk,modified=705513936,pbc=040100024003363437230124030200000007230310010C72695061697253657042793A2403230324052302240640023431230524030200000022230310010361743A2403020000002E23031000096173496E74656765722403230340023431230524030200000043230310010361743A2403020000004F23031000096173496E74656765722403230323062403020000006123031002166E756D657261746F723A64656E6F6D696E61746F723A240323031Eclass,class=Interval,selector=from:to:,codeType=rtalk,modified=571795337,pbc=04020000230123024002343123032404020000000B230410000862617369634E6577240402000000172304100313696E6974426567696E3A656E643A696E63723A240423041Eclass,class=Interval,selector=from:to:by:,codeType=rtalk,modified=571795337,pbc=0403000023012302230323042405020000000A230510000862617369634E6577240502000000162305100313696E6974426567696E3A656E643A696E63723A240523051Eclass,class=RtThread,selector=javaClass,codeType=rtalk,modified=713158397,pbc=040000004012312F6A6176612F6C616E672F546872656164240223021Eclass,class=RtThread,selector=sleepMillis:,codeType=rtalk,modified=697324160,pbc=04010000400234342301230224030200000009230310020E6465627567537465703A6172673A240323021Eclass,class=RtThread,selector=currentThread,codeType=rtalk,modified=676374046,pbc=0400000023012402020000000423021000036E657724020200000010230210000D63757272656E74546872656164240223021Eclass,class=RtSystem,selector=exit:,codeType=rtalk,modified=744422934,pbc=0401000023021Eclass,class=RtSystem,selector=shutdown,codeType=rtalk,modified=702846859,pbc=0400000023011Eclass,class=RtSystem,selector=debugStepRefresh:,codeType=rtalk,modified=689975430,pbc=0401000023012C014012335269526D7456696577446562756767657215020D7072696D476574476C6F62616C002403020000000D23031001137265667265736853756273637269626572733A240323021Eclass,class=RtJavaObject,selector=javaClass,codeType=rtalk,modified=713158568,pbc=040000004012312F6A6176612F6C616E672F4F626A656374240223021Eclass,class=Character,selector=tab,codeType=rtalk,modified=673956213,pbc=0400000040023439230124020200000007230210010676616C75653A240223021Eclass,class=Character,selector=new,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000E696E76616C69644D657373616765240223021Eclass,class=Character,selector=space,codeType=rtalk,modified=673956236,pbc=040000004003343332230124020200000007230210010676616C75653A240223021Eclass,class=Character,selector=digitValue:,codeType=rtalk,modified=571795337,pbcclass,class=Character,selector=value:,codeType=rtalk,modified=744676445,pbc=04010001230224030200000004230310000D616C6C436861726163746572732403230324054002343123012403020000001B23031001012B2403230323052403020000002D230310010361743A240323031Eclass,class=Character,selector=riDigitValue:,codeType=rtalk,modified=571795337,pbc=040100012301400234302403020000000723031001013E240323030901230140033433352403020000001E23031001013C2403010123030A024003343332230224030200000037230310010676616C75653A240323031E0102400334313023012403020000004F23031001013C240323030A0323022405400334343823012403020000006A23031001012B2403230323052403020000007C230310010676616C75653A240323031E0804010323022405400334353523012403020000009A23031001012B240323032305240302000000AC230310010676616C75653A240323031E010423021Eclass,class=Character,selector=allCharacters,codeType=rtalk,modified=744676385,pbc=040000001600147072696D476574416C6C436861726163746572730A2F4D6973635072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Eclass,class=Character,selector=riBase32Value:,codeType=rtalk,modified=571795337,pbcclass,class=Character,selector=cr,codeType=rtalk,modified=673956177,pbc=040000004003343133230124020200000007230210010676616C75653A240223021Eclass,class=Character,selector=lf,codeType=rtalk,modified=673956204,pbc=040000004003343130230124020200000007230210010676616C75653A240223021Eclass,class=UndefinedObject,selector=new,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000E696E76616C69644D657373616765240223021Eclass,class=UndefinedObject,selector=fromString:,codeType=rtalk,modified=571795337,pbc=040100002C01240323031Eclass,class=UndefinedObject,selector=new:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Eclass,class=RtTimer,selector=javaClass,codeType=rtalk,modified=713158497,pbc=040000004011312F6A6176612F7574696C2F54696D6572240223021Eclass,class=IdentityDictionary,selector=new,codeType=rtalk,modified=571795337,pbc=04000001230124044002343223012402020000000B230210000B696E697469616C53697A652402020000001723021001012A2402230223042402020000002923021101046E65773A0A44696374696F6E617279240223021Eclass,class=IdentityDictionary,selector=newSize:,codeType=rtalk,modified=571795337,pbc=04010001230224054002343223012403020000000B23031001012A2403230323052403020000001D23031101046E65773A0A44696374696F6E617279240323031Eclass,class=IdentityDictionary,selector=new:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Eclass,class=IdentityDictionary,selector=initialSize,codeType=rtalk,modified=571795337,pbc=0400000040023438240223021Eclass,class=Boolean,selector=new,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000E696E76616C69644D657373616765240223021Eclass,class=Boolean,selector=fromString:,codeType=rtalk,modified=571795337,pbc=0401000040053174727565230124030200000007230310000B61734C6F776572436173652403020000001323031001013D240323031Eclass,class=Boolean,selector=new:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Eclass,class=Association,selector=fromStream:,codeType=rtalk,modified=571795337,pbc=0401000123022405400336363123012403020000000B23031001057570546F3A2403230323012403020000001D23031000086E6578744C696E652403230323052403020000002F230310020A6B65793A76616C75653A240323031Eclass,class=Association,selector=fromString:,codeType=rtalk,modified=571795337,pbc=040100012302240523012C01400B335265616453747265616D15020D7072696D476574476C6F62616C002403020000001123031001036F6E3A24032303230524030200000023230310010B66726F6D53747265616D3A240323031Eclass,class=Association,selector=key:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031000036E65772403020000001223031001046B65793A240323031Eclass,class=Association,selector=key:value:,codeType=rtalk,modified=571795337,pbc=040200002302230123032404020000000823041001046B65793A24040200000014230410010676616C75653A240423041Eclass,class=RtMethodLookup,selector=new,codeType=rtalk,pbc=0400000123012402020000000423021100036E6577064F626A656374240223022404230124020200000019230210000B696E697469616C53697A652402230223042402020000002B230210010B696E697469616C697A653A240223021Eclass,class=RtMethodLookup,selector=newSize:,codeType=rtalk,pbc=0401000123022403020000000423031100036E6577064F626A6563742403230324054002343223012403020000001C23031001012A24032303400234312403020000002F23031001046D61783A24032303230524030200000041230310010B696E697469616C697A653A240323031Eclass,class=RtMethodLookup,selector=new:,codeType=rtalk,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Eclass,class=RtMethodLookup,selector=initialSize,codeType=rtalk,pbc=0400000040023438240223021Eclass,class=RtBlock2Arg,selector=javaClass,codeType=rtalk,modified=713239417,pbc=04000000401E316A6176612F6C616E672F696E766F6B652F4D6574686F6448616E646C65240223021Eclass,class=Float,selector=fromString:,codeType=rtalk,modified=695920122,pbc=0401000123022405230140033434362C01400A3343686172616374657215020D7072696D476574476C6F62616C0024030200000014230310010676616C75653A2403020000002023031000086173537472696E6724032303230524030200000032230310021C66726F6D537472696E673A646563696D616C536570617261746F723A240323031Eclass,class=Float,selector=pi,codeType=rtalk,modified=571795337,pbc=04000000400234344002343124020200000008230210000661726354616E2402020000001423021001012A240223021Eclass,class=Float,selector=fromString:decimalSeparator:,codeType=rtalk,modified=697157487,pbcclass,class=Float,selector=fromInteger:,codeType=rtalk,modified=726199079,pbc=040100001601107072696D466C6F617446726F6D496E740B2F466C6F61745072696D73230224030200000004230310000A666C6F61744572726F72240323031Eclass,class=RtBlock1Arg,selector=javaClass,codeType=rtalk,modified=713239402,pbc=04000000401E316A6176612F6C616E672F696E766F6B652F4D6574686F6448616E646C65240223021Eclass,class=Number,selector=new,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000E696E76616C69644D657373616765240223021Eclass,class=Number,selector=fromString:,codeType=rtalk,modified=697057741,pbcclass,class=Number,selector=random,codeType=rtalk,modified=744421209,pbc=04000000400435312E3024020200000005230210000672616E646F6D240223021Eclass,class=Number,selector=intervalOfSize:from:by:,codeType=rtalk,modified=571795337,pbc=040300052C012409230224052305240823012C01400633417272617915020D7072696D476574476C6F62616C002405020000001523051001046E65773A2405230524074002343131240A2301240B08010102230A24052305240923092308230724050200000043230510020761743A7075743A2405230323082405020000005523051001012B240523052408230A40023431020000006A1001012B31240A0101230B02000000791001013C240523050A022307240523051Eclass,class=Number,selector=intervalOfSize:from:to:,codeType=rtalk,modified=571795337,pbcclass,class=Number,selector=fromHexString:,codeType=rtalk,modified=571795337,pbc=040100002302240302000000042303100015696D706C656D656E7465644279537562636C617373240323031Eclass,class=String,selector=fromString:,codeType=rtalk,modified=571795337,pbc=040100002301240323031Eclass,class=String,selector=fromFloat:,codeType=rtalk,modified=571795337,pbc=0401000023012403020000000423031000086173537472696E67240323031Eclass,class=ByteArray,selector=fromString:,codeType=rtalk,modified=571795337,pbc=04010000230124030200000004230310000B6173427974654172726179240323031Eclass,class=ByteArray,selector=newSingle:,codeType=rtalk,modified=571795337,pbc=040100014002343123022403020000000723031001046E65773A240323032405400234312301230524030200000020230310020761743A7075743A24032305240323031Eclass,class=ByteArray,selector=fromHexString:,codeType=rtalk,modified=571795337,pbc=04010002230224064002343223012403020000000B230310000473697A652403020000001723031001022F2F2403230323062403020000002923031001046E65773A24032303240523012403020000003D230310000B61735570706572436173652403230323052403020000004F230310010E726946696C6C576974684865783A24032305240323031Eclass,class=Collection,selector=with:with:with:with:,codeType=rtalk,modified=571795337,pbc=0404000123052406020000000423061000036E6577240623062408230123082406020000001A23061001046164643A240623082408230223082406020000003023061001046164643A240623082408230323082406020000004623061001046164643A240623082408230423082406020000005C23061001046164643A240623082406020000006C2306100008796F757273656C66240623061Eclass,class=Collection,selector=with:with:,codeType=rtalk,modified=571795337,pbc=0402000123032404020000000423041000036E6577240423042406230123062404020000001A23041001046164643A240423062406230223062404020000003023041001046164643A24042306240402000000402304100008796F757273656C66240423041Eclass,class=Collection,selector=with:,codeType=rtalk,modified=571795337,pbc=0401000123022403020000000423031000036E6577240323032405230123052403020000001A23031001046164643A240323052403020000002A2303100008796F757273656C66240323031Eclass,class=Collection,selector=with:with:with:,codeType=rtalk,modified=744670267,pbc=0403000123042405020000000423051000036E6577240523052407230123072405020000001A23051001046164643A240523072407230223072405020000003023051001046164643A240523072407230323072405020000004623051001046164643A24052307240502000000562305100008796F757273656C66240523051Eclass,class=RiGuruTime,selector=guruID,codeType=rtalk,modified=744422611,pbc=040000001600107072696D53797374656D4775727549640B2F5274616C6B5072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Eclass,class=RiGuruTime,selector=guruTime,codeType=rtalk,modified=694296327,pbc=04000001400234362C01400733537472696E6715020D7072696D476574476C6F62616C002402020000000E23021001046E65773A2402230224044002343140023436230124020200000028230210000C756E69717565477572754944240223024002343123042402020000003D23021004247265706C616365427974657346726F6D3A746F3A776974683A7374617274696E6741743A240223021Eclass,class=RiGuruTime,selector=guruTimestamp,codeType=rtalk,modified=714095328,pbcclass,class=RiGuruTime,selector=longID,codeType=rtalk,modified=744422019,pbcclass,class=RiGuruTime,selector=localTimestamp,codeType=rtalk,modified=713951176,pbc=040000032C01400C33577269746553747265616D15020D7072696D476574476C6F62616C0024062C01400733537472696E6715020D7072696D476574476C6F62616C002402020000001623021000036E65772402230223062402020000002823021001036F6E3A2402230224042C014005334461746515020D7072696D476574476C6F62616C00240202000000432302100005746F6461792402230224052304240623052402020000005B2302100004796561722402020000006723021000086173537472696E6724022302230624020200000079230210010B6E657874507574416C6C3A240223062406400336343523062402020000009023021001086E6578745075743A2402230624064002343240033634382305240202000000AA23021000056D6F6E7468240202000000B623021002137072696E74506164646564546F3A776974683A240223022306240202000000C8230210010B6E657874507574416C6C3A24022306240640033634352306240202000000DF23021001086E6578745075743A2402230624064002343240033634382305240202000000F923021000036461792402020000010523021002137072696E74506164646564546F3A776974683A24022302230624020200000117230210010B6E657874507574416C6C3A24024002312E23042402020000012A230210010B6E657874507574416C6C3A2402230424064002343240033634382305240202000001442302100005686F7572732402020000015023021002137072696E74506164646564546F3A776974683A24022302230624020200000162230210010B6E657874507574416C6C3A240223062406400336343623062402020000017923021001086E6578745075743A24022306240640023432400336343823052402020000019323021000076D696E757465732402020000019F23021002137072696E74506164646564546F3A776974683A240223022306240202000001B1230210010B6E657874507574416C6C3A24022306240640033634362306240202000001C823021001086E6578745075743A2402230624064002343240033634382305240202000001E223021000077365636F6E6473240202000001EE23021002137072696E74506164646564546F3A776974683A24022302230624020200000200230210010B6E657874507574416C6C3A2402400336343623042402020000021323021001086E6578745075743A2402400234344003363438400234302402020000022A23021002137072696E74506164646564546F3A776974683A2402230223042402020000023C230210010B6E657874507574416C6C3A240223042402020000024C2302100008636F6E74656E7473240223021Eclass,class=RiGuruTime,selector=uniqueGuruID,codeType=rtalk,modified=744421635,pbc=040000001600107072696D556E697175654775727549640B2F5274616C6B5072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Eclass,class=RiGuruTime,selector=secondsSince1990GMT,codeType=rtalk,modified=744422378,pbc=0400000016000C7072696D4775727554696D650B2F5274616C6B5072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Eclass,class=RiGuruTime,selector=localSecondsSince1990,codeType=rtalk,modified=744422470,pbc=0400000123012402020000000423021000137365636F6E647353696E636531393930474D542402230224042C014005334461746515020D7072696D476574476C6F62616C002402020000001F230210000F6C6F63616C54696D654F66667365742402230223042402020000003123021001012B2402230224042304240223021Eclass,class=RiGuruTime,selector=uniqueID,codeType=rtalk,modified=697664004,pbc=04000000230124020200000004230210000C756E697175654775727549442402020000001023021000086173537472696E67240223021Eclass,class=Object,selector=globals,codeType=rtalk,modified=726027833,pbc=040000001600117072696D476574416C6C476C6F62616C730A2F4D6973635072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Eclass,class=Object,selector=globalExists:,codeType=rtalk,modified=725579080,pbc=0401000023012C014007334F626A65637415020D7072696D476574476C6F62616C002403020000000D2303100007676C6F62616C7324030200000019230310010C696E636C756465734B65793A240323031Eclass,class=Object,selector=removeGlobal:,codeType=rtalk,modified=725579264,pbc=0401000023012C014008335274436C61737315020D7072696D476574476C6F62616C002403020000000D230310010C636C6173734578697374733A240323030A01401F3163616E6E6F742072656D6F7665206120636C61737320617320612076617223022403020000002423031001066572726F723A240323031E0101230123022403020000003B2303100007676C6F62616C7324030200000047230310010A72656D6F76654B65793A240323021Eclass,class=Object,selector=addGlobal:value:,codeType=rtalk,modified=726027794,pbc=0402000023012C014008335274436C61737315020D7072696D476574476C6F62616C002404020000000D230410010C636C6173734578697374733A240423040A0140223163616E6E6F74207265706C616365206120636C617373207769746820612076617223032404020000002423041001066572726F723A240423041E01012301230223032404020000003D2304100007676C6F62616C7324040200000049230410020761743A7075743A240423031Eclass,class=Object,selector=vmError:,codeType=rtalk,modified=726204281,pbc=0401000016010D7072696D53656E644572726F720B2F5274616C6B5072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Eclass,class=FixedSizeCollection,selector=with:with:with:with:,codeType=rtalk,modified=571795337,pbc=040400014002343423052406020000000723061001046E65773A240623062408400234312301230824060200000020230610020761743A7075743A2406400234322302230824060200000035230610020761743A7075743A240640023433230323082406020000004A230610020761743A7075743A240640023434230423082406020000005F230610020761743A7075743A24062308240623061Eclass,class=FixedSizeCollection,selector=with:with:,codeType=rtalk,modified=571795337,pbc=040200014002343223032404020000000723041001046E65773A240423042406400234312301230624040200000020230410020761743A7075743A2404400234322302230624040200000035230410020761743A7075743A24042306240423041Eclass,class=FixedSizeCollection,selector=with:,codeType=rtalk,modified=571795337,pbc=040100014002343123022403020000000723031001046E65773A240323032405400234312301230524030200000020230310020761743A7075743A24032305240323031Eclass,class=FixedSizeCollection,selector=with:with:with:,codeType=rtalk,modified=571795337,pbc=040300014002343323042405020000000723051001046E65773A240523052407400234312301230724050200000020230510020761743A7075743A2405400234322302230724050200000035230510020761743A7075743A240540023433230323072405020000004A230510020761743A7075743A24052307240523051Eclass,class=FixedSizeCollection,selector=with:with:with:with:with:,codeType=rtalk,modified=571795337,pbc=040500014002343523062407020000000723071001046E65773A240723072409400234312301230924070200000020230710020761743A7075743A2407400234322302230924070200000035230710020761743A7075743A240740023433230323092407020000004A230710020761743A7075743A240740023434230423092407020000005F230710020761743A7075743A2407400234352305230924070200000074230710020761743A7075743A24072309240723071Eclass,class=RtClass,selector=removeClassNamed:,codeType=rtalk,modified=726027972,pbc=0601000201002301260125011800012302240302000000152303100007636C617373657324030200000021230310021372656D6F76654B65793A6966416273656E743A240323021E05010000002C01240223021Eclass,class=RtClass,selector=classExists:,codeType=rtalk,modified=725576882,pbc=0401000023012302240302000000062303100109676574436C6173733A2403020000001223031000066E6F744E696C240323031Eclass,class=RtClass,selector=sortBlock,codeType=rtalk,modified=571795337,pbc=0600000301002C0126012C012602180201240223021E05010200012301240423042601230224042304260225012404020000001C230410000673796D626F6C240423042406250224040200000030230410000673796D626F6C2404230423062404020000004223041001023C3D240423041Eclass,class=RtClass,selector=getClass:,codeType=rtalk,modified=726027938,pbc=0601000381002301260225021800012302240302000000152303100007636C617373657324030200000021230310020C61743A6966416273656E743A24032303260125012403020000003523031000076973436C617373240323030A012501240323031E080201012C01240323031E010223021E05010080002C01240223021Fclass,class=RtClass,selector=allClassesDo:,codeType=rtalk,modified=726028002,pbc=0601000301002C012601230126021801012302240302000000472303100007636C6173736573240302000000532303100103646F3A240323021E0501010000230124032303260125012403020000001423031000076973436C617373240323030A01250125022403020000002A230310010676616C75653A2403080201012C012403010223031Eclass,class=RtClass,selector=saveClass:,codeType=rtalk,modified=726028810,pbc=040100012302240302000000042303100007636C6173736573240323032405230124030200000018230310000673796D626F6C24032303230123052403020000002C230310020761743A7075743A240323021Eclass,class=RtClass,selector=classes,codeType=rtalk,modified=726027892,pbc=040000001600117072696D476574416C6C436C61737365730A2F4D6973635072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Eclass,class=Set,selector=new,codeType=rtalk,modified=571795337,pbc=040000004002343423012402020000000723021001046E65773A240223021Eclass,class=Set,selector=new:,codeType=rtalk,modified=571795337,pbc=0401000123022403020000000423031100036E65770A436F6C6C656374696F6E2403230324052301400234312403020000001C23031001046D61783A2403230323052403020000002E230310010B696E697469616C697A653A240323031Eclass,class=OrderedCollection,selector=new,codeType=rtalk,modified=672521818,pbc=04000000400334313223012402020000000723021001046E65773A240223021Eclass,class=OrderedCollection,selector=new:,codeType=rtalk,modified=672521991,pbc=04010000230123022403020000000623031100036E657711496E6465786564436F6C6C656374696F6E24030200000013230310010E696E6974506F736974696F6E733A240323031Eclass,class=RtBlock,selector=javaClass,codeType=rtalk,modified=713239377,pbc=04000000401E316A6176612F6C616E672F696E766F6B652F4D6574686F6448616E646C65240223021Einstance,class=RtSymbolSet,selector=symbolAt:,codeType=rtalk,modified=665850606,pbc=0401000121022405230123022403020000000A230310011166696E64456C656D656E74496E6465783A2403230323052403020000001C230310010361743A240323031Einstance,class=RtSymbolSet,selector=adjustSize,codeType=rtalk,modified=665850801,pbc=04000001400334313021012402020000000723021001012A2402230224044002343940023432210224020200000021230210000473697A652402020000002D23021001012D2402020000003923021001012A2402230223042402020000004B23021001023E3D240223020A0123012402020000005F230210000467726F77240223021E080201012C012402010223011Einstance,class=RtSymbolSet,selector=findElementIndex:,codeType=rtalk,modified=665850759,pbcinstance,class=RtSymbolSet,selector=add:,codeType=rtalk,modified=665850740,pbc=040100022C01240523012C0140073353796D626F6C15020D7072696D476574476C6F62616C002403020000000D230310010D6D757374426553796D626F6C3A240323012403020000001D230310000569734E696C240323030A012301240323031E010123022403020000003A230310000A61646A75737453697A652403210224062301230224030200000050230310011166696E64456C656D656E74496E6465783A2403230324052303230624030200000066230310010361743A24030200000072230310000569734E696C240323030A024002343121012403020000008923031001012B240323032201230523012102240302000000A1230310020761743A7075743A240323031E01022301240323031Einstance,class=RtSymbolSet,selector=grow,codeType=rtalk,modified=665850784,pbc=0600000301012C0126022301240202000000042302100005636C61737324022302240440033431304002343340023434210224020200000021230210000473697A652402020000002D23021001012A2402020000003923021001022F2F2402020000004523021001012B2402230223042402020000005723021001046E65773A2402230226011801012301240202000000902302100103646F3A24022501240202000000A02302100008636F6E74656E747324022302220223011E05010100002301240323032602250225012403020000007D23031001046164643A240323031Einstance,class=RtSymbolSet,selector=allSymbols,codeType=rtalk,modified=710557047,pbc=040000032C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002402020000000B23021000036E657724022302240640023431240223022404210224020200000028230210000473697A65240223022405080101022304210224020200000042230210010361743A2402020000004E230210000569734E696C2402230209032304210224020200000064230210010361743A2402230223062402020000007623021001046164643A240201034002343123042402020000008B23021001012B240223022404010123052304240202000000A323021001013E240223020A022306240223021Einstance,class=RtSemaphore,selector=waitForMilliseconds:,codeType=rtalk,modified=697324069,pbc=04010000400234332301230224030200000009230310020E6465627567537465703A6172673A240323021Einstance,class=RtSemaphore,selector=signal,codeType=rtalk,modified=697323780,pbc=040000004003343132230124020200000007230210010A6465627567537465703A240223011Einstance,class=RtSemaphore,selector=signalAll,codeType=rtalk,modified=697323800,pbc=040000004003343133230124020200000007230210010A6465627567537465703A240223011Einstance,class=RtSemaphore,selector=name:,codeType=rtalk,modified=697300091,pbc=04010000230124032303220123021Einstance,class=RtSemaphore,selector=wait,codeType=rtalk,modified=697323771,pbc=040000004003343131230124020200000007230210010A6465627567537465703A240223011Einstance,class=RtSemaphore,selector=name,codeType=rtalk,modified=697300078,pbc=040000002101240223021Einstance,class=False,selector=xor:,codeType=rtalk,modified=571795337,pbc=040100002301240323031Einstance,class=False,selector=not,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=False,selector=&,codeType=rtalk,modified=571795337,pbc=040100002C03240323031Einstance,class=False,selector=or:,codeType=rtalk,modified=571795337,pbc=04010000230124030200000004230310000576616C7565240323031Einstance,class=False,selector=|,codeType=rtalk,modified=571795337,pbc=040100002301240323031Einstance,class=False,selector=and:,codeType=rtalk,modified=571795337,pbc=040100002C03240323031Einstance,class=RtDictionary,selector=contents,codeType=rtalk,modified=571795337,pbc=040000002102240223021Einstance,class=RtDictionary,selector=removeAll:,codeType=rtalk,modified=571795337,pbc=0601000341002C01260123022603230126021801012502240302000000292303100103646F3A24032502240323031E050101400023012403230326012501250324030200000016230310010772656D6F76653A240323031Einstance,class=RtDictionary,selector=associationsDo:,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=fullCopy,codeType=rtalk,modified=673480522,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E657724022302260118010123012402020000005D230210010F6173736F63696174696F6E73446F3A24022501240223021E0501010001230124032303260225012405250224030200000038230310000866756C6C436F70792403230323052403020000004A23031001046164643A240323031Einstance,class=RtDictionary,selector=removeKey:ifAbsent:,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=asArray,codeType=rtalk,modified=571795337,pbc=0600000401012C0126032C01400633417272617915020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A2402230226014002343124022302260218010123012402020000007C2302100103646F3A24022501240223021E0501010000230124032303260325022503250124030200000052230310020761743A7075743A24034002343125022403020000006523031001012B24032303260223031Einstance,class=RtDictionary,selector=riDetectAssociation:ifNone:,codeType=rtalk,modified=571795337,pbc=0602000481002C012601230126032302260218010123032404020000003E230410010F6173736F63696174696F6E73446F3A240425022404020000004E230410000576616C7565240423041E050101800023012403230326012501250324030200000016230310010676616C75653A240323030A012501240323031F080201012C012403010223031Einstance,class=RtDictionary,selector=riDetectAllIfNoneNil:,codeType=rtalk,modified=638919106,pbc=0601000401002C012602230126032C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002403020000000B23031000036E65772403230326011801012302240302000000642303100103646F3A240325012403020000007423031000076973456D707479240323030A032C01240323031E01032501240323031E050101000023012403230326022502250324030200000031230310010676616C75653A240323030A01250225012403020000004723031001046164643A2403080201012C012403010223031Einstance,class=RtDictionary,selector=riAt:add:,codeType=rtalk,modified=571795337,pbc=040200012301230324040200000006230410010C696E636C756465734B65793A24042304090123032406230140033431302C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002404020000002A23041001046E65773A2404230423062404020000003C230410020761743A7075743A2404010123022301230324040200000052230410010361743A2404020000005E23041001046164643A240423031Einstance,class=RtDictionary,selector=removeKey:,codeType=rtalk,modified=571795337,pbc=06010002410023022602230126012501180001230224030200000021230310021372656D6F76654B65793A6966416273656E743A240323021E050100400025022402020000000E230210000E6572726F72416273656E744B6579240223021Einstance,class=RtDictionary,selector=removeAssociation:,codeType=rtalk,modified=571795337,pbc=040100012302240523012403020000000823031000036B65792403230323052403020000001A230310010A72656D6F76654B65793A240323021Einstance,class=RtDictionary,selector=keys,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=keysDo:,codeType=rtalk,modified=571795337,pbc=0601000301002C01260123012602180101230224030200000039230310010F6173736F63696174696F6E73446F3A240323021E0501010000230124032303260125012403020000001423031000036B657924032303250224030200000026230310010676616C75653A240323031Einstance,class=RtDictionary,selector=asSortedCollection:,codeType=rtalk,modified=571795337,pbc=040100012C01401133536F72746564436F6C6C656374696F6E15020D7072696D476574476C6F62616C00240523022403020000000F230310000473697A652403230323052403020000002123031001046E65773A2403230324052301230524030200000037230310010A736F7274426C6F636B3A240323052405230223052403020000004D2303100107616464416C6C3A240323052403020000005D2303100008796F757273656C66240323031Einstance,class=RtDictionary,selector=collect:,codeType=rtalk,modified=571795337,pbc=0601000401002C012602230126032302240302000000042303100007737065636965732403020000001023031000036E657724032303260118010123022403020000005F2303100103646F3A24032501240323031E0501010001230124032303260225012405250225032403020000003A230310010676616C75653A2403230323052403020000004C23031001046164643A240323031Einstance,class=RtDictionary,selector=lookUpKey:,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=isNilOrEmpty,codeType=rtalk,modified=673480474,pbc=0400000023012402020000000423021000076973456D707479240223021Einstance,class=RtDictionary,selector=riKeyList,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=associationAt:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200032301230324040200000006230410010D66696E644B6579496E6465783A240423042406230621022404020000001C230410010361743A2404230424072C0123072404020000003223041001023D3D240423040A01230224040200000046230410000576616C7565240423041E01012C01400C334173736F63696174696F6E15020D7072696D476574476C6F62616C0024072306210224040200000068230410010361743A24042304210224084002343123062404020000008123041001012B24042304230824040200000093230410010361743A240423042307240402000000A5230410020A6B65793A76616C75653A240423041Einstance,class=RtDictionary,selector=select:,codeType=rtalk,modified=571795337,pbc=0601000401002C012602230126032302240302000000042303100007737065636965732403020000001023031000036E6577240323032601180101230224030200000079230310010F6173736F63696174696F6E73446F3A24032501240323031E05010100002301240323032602250224030200000034230310000576616C756524032303250324030200000046230310010676616C75653A240323030A01250225012403020000005C23031001046164643A2403080201012C012403010223031Einstance,class=RtDictionary,selector=associationsSelect:,codeType=rtalk,modified=571795337,pbc=0601000401002C012602230126032302240302000000042303100007737065636965732403020000001023031000036E6577240323032601180101230224030200000069230310010F6173736F63696174696F6E73446F3A24032501240323031E050101000023012403230326022502250324030200000036230310010676616C75653A240323030A01250225012403020000004C23031001046164643A2403080201012C012403010223031Einstance,class=RtDictionary,selector=atIgnoreCase:ifAbsent:,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=includes:,codeType=rtalk,modified=571795337,pbc=0601000381002C0126012301260218010123022403020000003E2303100103646F3A24032C03240323031E05010180002301240323032601250225012403020000001623031001013D240323030A012C02240323031F080201012C012403010223031Einstance,class=RtDictionary,selector=reject:,codeType=rtalk,modified=571795337,pbc=0601000301002C01260123012602180101230224030200000035230310010773656C6563743A240323031E050101000023012403230326012501250224030200000016230310010676616C75653A2403020000002223031000036E6F74240323031Einstance,class=RtDictionary,selector==,codeType=rtalk,modified=666180859,pbcinstance,class=RtDictionary,selector=errorAbsentObject,codeType=rtalk,modified=571795337,pbc=040000004020316F626A656374206973206E6F7420696E2074686520636F6C6C656374696F6E23012402020000000723021001066572726F723A240223021Einstance,class=RtDictionary,selector=at:put:,codeType=rtalk,modified=666180584,pbcinstance,class=RtDictionary,selector=at:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200022301230324040200000006230410010D66696E644B6579496E6465783A240423042406230621022404020000001C230410010361743A2404230424072C0123072404020000003223041001023D3D240423040A01230224040200000046230410000576616C7565240423041E0101210224074002343123062404020000006223041001012B24042304230724040200000074230410010361743A240423041Einstance,class=RtDictionary,selector=values,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=remove:,codeType=rtalk,modified=571795337,pbc=06010002410023022602230126012501180001230224030200000021230310021072656D6F76653A6966416273656E743A240323031E050100400025022402020000000E23021000116572726F72416273656E744F626A656374240223021Einstance,class=RtDictionary,selector=riSepStringBy:,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=keyAtValue:ifAbsent:,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=asOrderedCollection,codeType=rtalk,modified=571795337,pbc=040000012C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A24022302240423012304240202000000372302100107616464416C6C3A24022304240202000000472302100008796F757273656C66240223021Einstance,class=RtDictionary,selector=detect:,codeType=rtalk,modified=571795337,pbc=06010002410023022602230126012501180001230224030200000021230310020E6465746563743A69664E6F6E653A240323031E050100400025022402020000000E23021000116572726F72416273656E744F626A656374240223021Einstance,class=RtDictionary,selector=deepCopy,codeType=rtalk,modified=673480555,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E657724022302260118010123012402020000005D230210010F6173736F63696174696F6E73446F3A24022501240223021E05010100012301240323032602250124052502240302000000382303100004636F70792403230323052403020000004A23031001046164643A240323031Einstance,class=RtDictionary,selector=size,codeType=rtalk,modified=673480400,pbc=040000002101240223021Einstance,class=RtDictionary,selector=asSortedCollection,codeType=rtalk,modified=571795337,pbc=040000012C01401133536F72746564436F6C6C656374696F6E15020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A24022302240423012304240202000000372302100107616464416C6C3A24022304240202000000472302100008796F757273656C66240223021Einstance,class=RtDictionary,selector=associationAt:,codeType=rtalk,modified=571795337,pbc=0601000241002302260223012601250118000123022403020000002123031002176173736F63696174696F6E41743A6966416273656E743A240323031E050100400025022402020000000E230210000E6572726F72416273656E744B6579240223021Einstance,class=RtDictionary,selector=detect:ifNone:,codeType=rtalk,modified=571795337,pbc=0602000481002C012601230126032302260218010123032404020000003E2304100103646F3A240425022404020000004E230410000576616C7565240423041E050101800023012403230326012501250324030200000016230310010676616C75653A240323030A012501240323031F080201012C012403010223031Einstance,class=RtDictionary,selector=riDetect:do:ifNone:,codeType=rtalk,modified=571795337,pbc=0603000581002C01260123012604230226032303260218010123042405020000004C2305100103646F3A240525022405020000005C230510000576616C7565240523051E050101800023012403230326012501250424030200000016230310010676616C75653A240323030A01250125032403020000002C230310010676616C75653A240323031F080201012C012403010223031Einstance,class=RtDictionary,selector=do:,codeType=rtalk,modified=571795337,pbc=0601000341002C0126012302260323012602210224030200000004230310000473697A65240323034002343218010140023431240302000000942303100309746F3A62793A646F3A240323021E05010140012301240323032601250121022403020000002B230310010361743A24030200000037230310000569734E696C240323030901210224054002343125012403020000005223031001012B24032303230524030200000064230310010361743A24032303250224030200000076230310010676616C75653A2403080201012C012403010223031Einstance,class=RtDictionary,selector=owner,codeType=rtalk,modified=693163827,pbc=040000002103240223021Einstance,class=RtDictionary,selector=errorAbsentKey,codeType=rtalk,modified=571795337,pbc=04000000400F314B6579206973206D697373696E6723012402020000000723021001066572726F723A240223011Einstance,class=RtDictionary,selector=riDetectAll:,codeType=rtalk,modified=571795337,pbc=0601000401002C012602230126032C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002403020000000B23031000036E65772403230326011801012302240302000000642303100103646F3A24032501240323031E050101000023012403230326022502250324030200000031230310010676616C75653A240323030A01250225012403020000004723031001046164643A2403080201012C012403010223031Einstance,class=RtDictionary,selector=any,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=initialize:,codeType=rtalk,modified=571795337,pbc=040100004002343024032303220123012C01400633417272617915020D7072696D476574476C6F62616C002403020000001623031001046E65773A24032303220223021Einstance,class=RtDictionary,selector=owner:,codeType=rtalk,modified=693163815,pbc=04010000230124032303220323021Einstance,class=RtDictionary,selector=findElementIndex:,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=errorNotIndexable,codeType=rtalk,modified=571795337,pbc=04000001230124044026317320646F206E6F7420726573706F6E6420746F20696E646578696E67206D6573736167657323012402020000000B2302100005636C6173732402020000001723021000046E616D652402020000002323021001012C2402230223042402020000003523021001066572726F723A240223021Einstance,class=RtDictionary,selector=notEmpty,codeType=rtalk,modified=571795337,pbc=0400000040023430230124020200000007230210000473697A652402020000001323021001013E240223021Einstance,class=RtDictionary,selector=add:,codeType=rtalk,modified=571795337,pbc=040100012302240523012403020000000823031000036B65792403230323012403020000001A230310000576616C75652403230323052403020000002C230310020761743A7075743A24032301240323031Einstance,class=RtDictionary,selector=remove:ifAbsent:,codeType=rtalk,modified=571795337,pbc=04020000230324040200000004230410000E696E76616C69644D657373616765240423041Einstance,class=RtDictionary,selector=asBag,codeType=rtalk,modified=571795337,pbc=040000012C0140043342616715020D7072696D476574476C6F62616C002402020000000B23021000036E657724022302240423012304240202000000212302100107616464416C6C3A24022304240202000000312302100008796F757273656C66240223021Einstance,class=RtDictionary,selector=keyAtValue:,codeType=rtalk,modified=571795337,pbc=06010002010023012601250118000123022403020000001523031002146B6579417456616C75653A6966416273656E743A240323031E05010000002C01240223021Einstance,class=RtDictionary,selector=isCollection,codeType=rtalk,modified=673480496,pbc=040000002C02240223021Einstance,class=RtDictionary,selector=riDetectAll:ifNone:,codeType=rtalk,modified=571795337,pbc=0602000501002C01260223012604230226032C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002404020000000B23041000036E65772404230426011801012303240402000000642304100103646F3A240425012404020000007423041000076973456D707479240423040A03250324040200000088230410000576616C7565240423041E080401032501240423041E010423031E050101000023012403230326022502250424030200000031230310010676616C75653A240323030A01250225012403020000004723031001046164643A2403080201012C012403010223031Einstance,class=RtDictionary,selector=grow,codeType=rtalk,modified=571795337,pbc=0600000301012C012602230124020200000004230210000773706563696573240223022404210224020200000018230210000473697A652402230223042402020000002A23021001086E657753697A653A240223022601180101230124020200000063230210010F6173736F63696174696F6E73446F3A24022501240202000000732302100008636F6E74656E747324022302220223011E05010100002301240323032602250225012403020000005023031001046164643A240323031Einstance,class=RtDictionary,selector=asAssociationOrderedCollection,codeType=rtalk,modified=571795337,pbc=0600000301002C01260221012C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002402020000000D23021001046E65773A240223022601180101230124020200000046230210010F6173736F63696174696F6E73446F3A24022501240223021E05010100002301240323032602250225012403020000003323031001046164643A240323031Einstance,class=RtDictionary,selector=shallowCopy,codeType=rtalk,modified=673480431,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E6577240223022601180101230124020200000049230210010F6173736F63696174696F6E73446F3A24022501240223021E05010100002301240323032602250225012403020000003623031001046164643A240323031Einstance,class=RtDictionary,selector=inject:into:,codeType=rtalk,modified=571795337,pbc=0602000501002C012602230126042302260325042404230426011801012303240402000000372304100103646F3A24042501240423041E0501010000230124032303260225012502250324030200000020230310020C76616C75653A76616C75653A24032303260123031Einstance,class=RtDictionary,selector=isEmpty,codeType=rtalk,modified=571795337,pbc=0400000040023430230124020200000007230210000473697A652402020000001323021001013D240223021Einstance,class=RtDictionary,selector=at:,codeType=rtalk,modified=673480567,pbc=040100022301230224030200000006230310010D66696E644B6579496E6465783A240323032405230521022403020000001C230310010361743A2403230324062C0123062403020000003223031001023D3D240323030A01230224030200000046230310000E6572726F72416273656E744B6579240323031E0101210224064002343123052403020000006223031001012B24032303230624030200000074230310010361743A240323031Einstance,class=RtDictionary,selector=asSet,codeType=rtalk,modified=571795337,pbc=040000012C0140043353657415020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A24022302240423012304240202000000372302100107616464416C6C3A24022304240202000000472302100008796F757273656C66240223021Einstance,class=RtDictionary,selector=findKeyIndex:,codeType=rtalk,modified=673480090,pbcinstance,class=RtDictionary,selector=addAll:,codeType=rtalk,modified=571795337,pbc=0601000341002C01260123022603230126021801012502240302000000292303100103646F3A24032502240323031E05010140002301240323032601250125032403020000001623031001046164643A240323031Einstance,class=RtDictionary,selector=adjustSize,codeType=rtalk,modified=571795337,pbc=04000001400334323021012402020000000723021001012A2402230224044002343940023432210224020200000021230210000473697A652402020000002D23021001012D2402020000003923021001012A2402230223042402020000004B23021001023E3D240223020A0123012402020000005F230210000467726F77240223021E080201012C012402010223011Einstance,class=RtDictionary,selector=occurrencesOf:,codeType=rtalk,modified=571795337,pbc=0601000401002C01260223012603400234302403230326011801012302240302000000572303100103646F3A24032501240323031E05010100002301240323032602250325022403020000001F23031001013D240323030A014002343125012403020000003623031001012B240323032601080201012C012403010223031Einstance,class=RtDictionary,selector=asAssociationSortedCollection,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=rehashFrom:,codeType=rtalk,modified=571795337,pbcinstance,class=RtDictionary,selector=includesKey:,codeType=rtalk,modified=571795337,pbc=0401000121022405230123022403020000000A230310010D66696E644B6579496E6465783A2403230323052403020000001C230310010361743A2403020000002823031000066E6F744E696C240323031Einstance,class=BigInteger,selector=negated,codeType=rtalk,modified=726198891,pbc=0400000016000B7072696D4E6567617465640D2F5274426967496E7465676572230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=BigInteger,selector=asFloat,codeType=rtalk,modified=726198431,pbc=0400000016000B7072696D4173466C6F61740D2F5274426967496E7465676572230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=BigInteger,selector=bitXor:,codeType=rtalk,modified=726198721,pbc=0401000016010A7072696D426974586F720D2F5274426967496E746567657223022301240302000000062303100107626974586F723A240323031Einstance,class=BigInteger,selector=asBytes,codeType=rtalk,modified=726198420,pbc=0400000016000B7072696D417342797465730D2F5274426967496E7465676572230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=BigInteger,selector=-,codeType=rtalk,modified=726198283,pbc=0401000016010C7072696D53756274726163740D2F5274426967496E7465676572230223012403020000000623031001012D2403020000001223031000076E656761746564240323031Einstance,class=BigInteger,selector=/,codeType=rtalk,modified=726198297,pbc=0401000016010A7072696D4469766964650D2F5274426967496E7465676572230223012403020000000623031001012F240323031Einstance,class=BigInteger,selector=+,codeType=rtalk,modified=726198270,pbc=040100001601077072696D4164640D2F5274426967496E7465676572230223012403020000000623031001012B240323031Einstance,class=BigInteger,selector=hash,codeType=rtalk,modified=726198880,pbc=040000001600087072696D486173680D2F5274426967496E7465676572230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=BigInteger,selector=bitOr:,codeType=rtalk,modified=726198462,pbc=040100001601097072696D4269744F720D2F5274426967496E7465676572230223012403020000000623031001066269744F723A240323031Einstance,class=BigInteger,selector=bitAnd:,codeType=rtalk,modified=726198452,pbc=0401000016010A7072696D426974416E640D2F5274426967496E746567657223022301240302000000062303100107626974416E643A240323031Einstance,class=BigInteger,selector=*,codeType=rtalk,modified=726197414,pbc=0401000016010C7072696D4D756C7469706C790D2F5274426967496E7465676572230223012403020000000623031001012A240323031Einstance,class=BigInteger,selector=<=,codeType=rtalk,modified=726198340,pbc=0401000016010F7072696D4C6573734F72457175616C0D2F5274426967496E7465676572230223012403020000000623031001023E3D240323031Einstance,class=BigInteger,selector=\\,codeType=rtalk,modified=726198406,pbc=040100001601067072696D42420D2F5274426967496E7465676572230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=BigInteger,selector=~=,codeType=rtalk,modified=697288255,pbc=04010000230123022403020000000623031001013D2403020000001223031000036E6F74240323031Einstance,class=BigInteger,selector=bitShift:,codeType=rtalk,modified=726198713,pbcinstance,class=BigInteger,selector=//,codeType=rtalk,modified=697248517,pbc=04010000230123022403020000000623031001012F240323031Einstance,class=BigInteger,selector=|,codeType=rtalk,modified=697288067,pbc=04010000230123022403020000000623031001066269744F723A240323031Einstance,class=BigInteger,selector=>=,codeType=rtalk,modified=697398765,pbc=04010000230123022403020000000623031001013C2403020000001223031000036E6F74240323031Einstance,class=BigInteger,selector=>,codeType=rtalk,modified=697398804,pbc=04010000230123022403020000000623031001023C3D2403020000001223031000036E6F74240323031Einstance,class=BigInteger,selector==,codeType=rtalk,modified=726198363,pbc=0401000016010A7072696D457175616C730D2F5274426967496E7465676572230223012403020000000623031001013D240323031Einstance,class=BigInteger,selector=<,codeType=rtalk,modified=726198327,pbc=0401000016010C7072696D4C6573735468616E0D2F5274426967496E7465676572230223012403020000000623031001013E240323031Einstance,class=Integer,selector=bitInvert,codeType=rtalk,modified=571795337,pbc=040000004002343123012402020000000723021000076E6567617465642402020000001323021001012D240223021Einstance,class=Integer,selector=bitOr:,codeType=rtalk,modified=726192022,pbc=040100001601107072696D496E74656765724269744F720D2F496E74656765725072696D73230223012403020000000623031001066269744F723A240323031Einstance,class=Integer,selector=random,codeType=rtalk,modified=669906817,pbc=040000012C01400833496E746567657215020D7072696D476574476C6F62616C002402020000000B230210000672616E646F6D240223022404230123042402020000002123021001025C5C240223021Einstance,class=Integer,selector=hash,codeType=rtalk,modified=571795337,pbc=040000002301240202000000042302100003616273240223021Einstance,class=Integer,selector=increment:,codeType=rtalk,modified=726192063,pbc=0401000016010E7072696D496E7465676572496E630D2F496E74656765725072696D732C01240323031Einstance,class=Integer,selector=bitTest:,codeType=rtalk,modified=571795337,pbc=040100012301400234312403020000000723031001013E240323030A0140273162697441743A20696E646578206D7573742062652067726561746572207468616E207A65726F23022403020000001E23031001066572726F723A24030101230224054002343123012403020000003723031001012D2403020000004323031000076E65676174656424032303230524030200000055230310010962697453686966743A2403230340023431240302000000682303100107626974416E643A24032303400234312403020000007B23031001013D240323031Einstance,class=Integer,selector=not,codeType=rtalk,modified=571795337,pbc=040000004002343023012402020000000723021001013D240223020A0140023431240223021E0802010140023430240223021E010223011Einstance,class=Integer,selector=bitReset:,codeType=rtalk,modified=571795337,pbc=040100012301400234312403020000000723031001013E240323030A0140273162697441743A20696E646578206D7573742062652067726561746572207468616E207A65726F23022403020000001E23031001066572726F723A2403010123022405400B34313037333734313832334002343123012403020000003A23031001012D24032303400234312403020000004D230310010962697453686966743A240302000000592303100107626974586F723A2403230323052403020000006B2303100107626974416E643A240323031Einstance,class=Integer,selector=bitSet:,codeType=rtalk,modified=571795337,pbc=040100012301400234312403020000000723031001013E240323030A0140273162697441743A20696E646578206D7573742062652067726561746572207468616E207A65726F23022403020000001E23031001066572726F723A24030101230224054002343123012403020000003723031001012D24032303400234312403020000004A230310010962697453686966743A2403230323052403020000005C23031001066269744F723A240323031Einstance,class=Integer,selector=printOn:,codeType=rtalk,modified=571795337,pbcinstance,class=Integer,selector=riAsHexStringSize:,codeType=rtalk,modified=674234354,pbc=0401000040033634382301230224030200000009230310000D72694173486578537472696E6724030200000015230310021272695061645374617274576974683A746F3A240323031Einstance,class=Integer,selector=>,codeType=rtalk,modified=726191960,pbc=040100001601167072696D496E7465676572477265617465725468616E0D2F496E74656765725072696D73230223012403020000000623031001013C240323031Einstance,class=Integer,selector=bitAt:,codeType=rtalk,modified=571795337,pbcinstance,class=Integer,selector==,codeType=rtalk,modified=726191951,pbc=040100001601117072696D496E7465676572457175616C730D2F496E74656765725072696D73230223012403020000000623031001013D240323031Einstance,class=Integer,selector=<,codeType=rtalk,modified=726191896,pbc=040100001601137072696D496E74656765724C6573735468616E0D2F496E74656765725072696D73230223012403020000000623031001013E240323031Einstance,class=Integer,selector=>=,codeType=rtalk,modified=726191970,pbc=040100001601197072696D496E7465676572477265617465724F72457175616C0D2F496E74656765725072696D73230223012403020000000623031001023C3D240323031Einstance,class=Integer,selector=<=,codeType=rtalk,modified=726191938,pbc=040100001601167072696D496E74656765724C6573734F72457175616C0D2F496E74656765725072696D73230223012403020000000623031001023E3D240323031Einstance,class=Integer,selector=-,codeType=rtalk,modified=726191834,pbc=0401000016010E7072696D496E74656765725375620D2F496E74656765725072696D73230223012403020000000623031001012D2403020000001223031000076E656761746564240323031Einstance,class=Integer,selector=printOn:base:,codeType=rtalk,modified=674234227,pbcinstance,class=Integer,selector=bitShift:,codeType=rtalk,modified=726192042,pbcinstance,class=Integer,selector=factorial,codeType=rtalk,modified=571795337,pbc=040000014002343123012402020000000723021001013E240223020A014002343123012402020000001E23021001012D2402020000002A2302100009666163746F7269616C240223022404230123042402020000004023021001012A240223021E01014002343023012402020000005823021001013C240223020A024013316E6567617469766520666163746F7269616C23012402020000006F23021001066572726F723A240223021E010240023431240223021Einstance,class=Integer,selector=|,codeType=rtalk,modified=726192166,pbc=0401000016010E7072696D496E74656765724261720D2F496E74656765725072696D73230223012403020000000623031001017C240323031Einstance,class=Integer,selector=newMutable,codeType=rtalk,modified=726192082,pbc=0400000016000E7072696D496E74656765724E65770D2F496E74656765725072696D732C01240223021Einstance,class=Integer,selector=/,codeType=rtalk,modified=571795337,pbcinstance,class=Integer,selector=~=,codeType=rtalk,modified=726192177,pbc=040100001601147072696D496E74656765724E6F74457175616C730D2F496E74656765725072696D732C02240323031Einstance,class=Integer,selector=radix:,codeType=rtalk,modified=571795337,pbc=040100022C01400C33577269746553747265616D15020D7072696D476574476C6F62616C00240640033431362C01400733537472696E6715020D7072696D476574476C6F62616C002403020000001923031001046E65773A2403230323062403020000002B23031001036F6E3A24032303240523052301230224030200000043230310020D7072696E744F6E3A626173653A24032305240302000000532303100008636F6E74656E7473240323031Einstance,class=Integer,selector=truncated,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Integer,selector=+,codeType=rtalk,modified=726191827,pbc=0401000016010E7072696D496E74656765724164640D2F496E74656765725072696D73230223012403020000000623031001012B240323031Einstance,class=Integer,selector=at:,codeType=rtalk,modified=726192219,pbc=0401000116010D7072696D496E746567657241740D2F496E74656765725072696D734002343023012403020000000723031001023C3D240323030A014028316279746541743A20696E646578206D7573742062652067726561746572207468616E207A65726F23022403020000001E23031001066572726F723A240301014004343235362302240302000000332303100003616273240323032405400234382301400234312403020000004D23031001012D2403020000005923031001012A2403230323052403020000006B230310010962697453686966743A2403020000007723031001025C5C240323031Einstance,class=Integer,selector=*,codeType=rtalk,modified=726191793,pbc=0401000016010F7072696D496E74656765724D756C740D2F496E74656765725072696D73230223012403020000000623031001012A240323031Einstance,class=Integer,selector=signedAt:,codeType=rtalk,modified=571795337,pbc=040100014002343023012403020000000723031001023C3D240323030A014028316279746541743A20696E646578206D7573742062652067726561746572207468616E207A65726F23022403020000001E23031001066572726F723A2403010140043432353623022405400234382301400234312403020000003D23031001012D2403020000004923031001012A2403230323052403020000005B230310010962697453686966743A2403020000006723031001025C5C240323031Einstance,class=Integer,selector=reciprocal,codeType=rtalk,modified=571795337,pbc=040000002301400234312402020000000723021001012F240223021Einstance,class=Integer,selector=printPaddedTo:with:,codeType=rtalk,modified=674234290,pbcinstance,class=Integer,selector=quo:,codeType=rtalk,modified=744422811,pbc=0401000016010E7072696D496E746567657251756F0D2F496E74656765725072696D734002343023012403020000000723031001013D240323030A0123022403020000001B230310000B7A65726F44697669736F72240323031E010123012403020000003023031000096973496E7465676572240323030A02230123022403020000004623031000036162732403020000005223031001013C2403010223030A0340023430240323031E08040103230123022403020000007623031001012F2403020000008223031000097472756E6361746564240323031E010423021Einstance,class=Integer,selector=bitXor:,codeType=rtalk,modified=726192048,pbc=040100001601117072696D496E7465676572426974586F720D2F496E74656765725072696D7323022301240302000000062303100107626974586F723A240323031Einstance,class=Integer,selector=rounded,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Integer,selector=zeroDivisor,codeType=rtalk,modified=571795337,pbc=0400000040103164697669736F72206973207A65726F23012402020000000723021001066572726F723A240223011Einstance,class=Integer,selector=//,codeType=rtalk,modified=726191872,pbc=0401000016010D7072696D496E746567657246460D2F496E74656765725072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Integer,selector=bitAnd:,codeType=rtalk,modified=726192012,pbc=040100001601117072696D496E7465676572426974416E640D2F496E74656765725072696D7323022301240302000000062303100107626974416E643A240323031Einstance,class=Integer,selector=riAsHexString,codeType=rtalk,modified=674234340,pbcinstance,class=Integer,selector=asCharacter,codeType=rtalk,modified=571795337,pbc=0400000023012C01400A3343686172616374657215020D7072696D476574476C6F62616C002402020000000D230210010676616C75653A240223021Einstance,class=Integer,selector=rem:,codeType=rtalk,modified=726192113,pbc=0401000116010E7072696D496E746567657252656D0D2F496E74656765725072696D734002343023012403020000000723031001013D240323030A0123022403020000001B230310000B7A65726F44697669736F72240323031E0101230224052301230123022403020000003823031001012F2403020000004423031000097472756E63617465642403020000005023031001012A2403230323052403020000006223031001012D240323031Einstance,class=Integer,selector=timesRepeat:,codeType=rtalk,modified=571795337,pbc=040100012302240323032405080101024002343123052403020000001323031001012D240323032405230124030200000027230310000576616C7565240301014002343023052403020000003C23031001013E2403230309022C01240323021Einstance,class=Integer,selector=replaceWith:,codeType=rtalk,modified=726192149,pbc=040100001601127072696D496E74656765725265706C6163650D2F496E74656765725072696D732302240323031Einstance,class=Integer,selector=basicHash,codeType=rtalk,modified=571795337,pbc=040000002301240202000000042302100003616273240223021Einstance,class=Integer,selector=isInteger,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Integer,selector=negated,codeType=rtalk,modified=571795337,pbc=040000002301400234302402020000000723021001012D240223021Einstance,class=Integer,selector=\\,codeType=rtalk,modified=726191982,pbc=0401000016010D7072696D496E746567657242420D2F496E74656765725072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Integer,selector=asFloat,codeType=rtalk,modified=571795337,pbc=0400000023012C01400633466C6F617415020D7072696D476574476C6F62616C002402020000000D230210010C66726F6D496E74656765723A240223021Einstance,class=Integer,selector=asInteger,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Integer,selector=gcd:,codeType=rtalk,modified=571795337,pbc=040100032C0124072302240302000000042303100003616273240323032405230124030200000018230310000361627324032303240608010102230623052403020000003223031001025C5C2403230324072306240323032405230724032303240601014002343023062403020000005B23031001013D240323030A022305240323031Einstance,class=Integer,selector=printPaddedTo:,codeType=rtalk,modified=674234268,pbc=040100042C01400C33577269746553747265616D15020D7072696D476574476C6F62616C00240840033431302C01400733537472696E6715020D7072696D476574476C6F62616C002403020000001923031001046E65773A2403230323082403020000002B23031001036F6E3A24032303240523054003343130230224030200000044230310020D7072696E744F6E3A626173653A24032305240302000000542303100008636F6E74656E7473240323032407230724030200000068230310000473697A652403230323012403020000007A23031001012D2403230324064002343023062403020000009123031001013E240323030A0123062C01400733537472696E6715020D7072696D476574476C6F62616C00240302000000AE23031001046E65773A24032303240840033633322308240302000000C523031001096174416C6C5075743A24032308240302000000D52303100008796F757273656C6624032303240608020101400131240323032406010223072306240302000000FA23031001012C240323031Einstance,class=Symbol,selector=asCompactString,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000086173537472696E67240223021Einstance,class=Symbol,selector=replaceFrom:to:with:startingAt:,codeType=rtalk,modified=571795337,pbc=04040000230524060200000004230610000E696E76616C69644D657373616765240623061Einstance,class=Symbol,selector=fromString:,codeType=rtalk,modified=571795337,pbc=040100002301240302000000042303100008617353796D626F6C240323031Einstance,class=Symbol,selector=at:put:,codeType=rtalk,modified=571795337,pbc=04020000230324040200000004230410000E696E76616C69644D657373616765240423041Einstance,class=Symbol,selector=replace:with:,codeType=rtalk,modified=571795337,pbc=04020000230324040200000004230410000E696E76616C69644D657373616765240423041Einstance,class=Symbol,selector=initContents:,codeType=rtalk,modified=571795337,pbc=04010001230224054002343123012403020000000B230310000473697A6524032303230140023431230524030200000022230311041F7265706C61636546726F6D3A746F3A776974683A7374617274696E6741743A06537472696E67240323021Einstance,class=Symbol,selector=isSymbol,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Symbol,selector=hash,codeType=rtalk,modified=726202626,pbc=0400000016000E7072696D537472696E6748617368102F42797465537472696E675072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=Symbol,selector=basicHash,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000468617368240223021Einstance,class=Symbol,selector=asSymbol,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Symbol,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Symbol,selector=equals:,codeType=rtalk,modified=726202729,pbc=040100001601107072696D537472696E67457175616C73102F42797465537472696E675072696D732C03240323031Einstance,class=Symbol,selector=replaceFrom:to:withObject:,codeType=rtalk,modified=571795337,pbc=04030000230424050200000004230510000E696E76616C69644D657373616765240523051Einstance,class=Symbol,selector=replaceBytesFrom:to:with:startingAt:,codeType=rtalk,modified=571795337,pbc=04040000230524060200000004230610000E696E76616C69644D657373616765240623061Einstance,class=Symbol,selector=species,codeType=rtalk,modified=571795337,pbc=040000002C01400733537472696E6715020D7072696D476574476C6F62616C00240223021Einstance,class=Symbol,selector=deepCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Symbol,selector==,codeType=rtalk,modified=726202689,pbc=040100001601157072696D4F626A6563744964656E74457175616C730C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Symbol,selector=asString,codeType=rtalk,modified=571795337,pbc=040000012C01400733537472696E6715020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A24022302240440023431230124020200000038230210000473697A6524022302230123042402020000004C23021003147265706C61636546726F6D3A746F3A776974683A240223021Einstance,class=Symbol,selector=fullCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=SortedCollection,selector=addAll:,codeType=rtalk,modified=571795337,pbc=0601000341002C012601230226032301260218010125022403020000002A2303100103646F3A240323022403020000003A23031000067265536F727424032502240323031E05010140002301240323032601250125032403020000001623031101086164644C6173743A114F726465726564436F6C6C656374696F6E240323031Einstance,class=SortedCollection,selector=addAllLast:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Einstance,class=SortedCollection,selector=add:,codeType=rtalk,modified=571795337,pbcinstance,class=SortedCollection,selector=sortBlock,codeType=rtalk,modified=571795337,pbc=040000002104240223021Einstance,class=SortedCollection,selector=at:put:,codeType=rtalk,modified=571795337,pbc=04020000230324040200000004230410000E696E76616C69644D657373616765240423041Einstance,class=SortedCollection,selector=reSort,codeType=rtalk,modified=571795337,pbc=04000000210121022301240202000000082302100208736F72743A746F3A240223011Einstance,class=SortedCollection,selector=add:before:,codeType=rtalk,modified=571795337,pbc=04020000230324040200000004230410000E696E76616C69644D657373616765240423041Einstance,class=SortedCollection,selector=grow,codeType=rtalk,modified=571795337,pbc=04000001210424022302240423012402020000000C230211000467726F77114F726465726564436F6C6C656374696F6E2402230424022302220423011Einstance,class=SortedCollection,selector=select:,codeType=rtalk,modified=571795337,pbc=040100012301230224030200000006230311010773656C6563743A114F726465726564436F6C6C656374696F6E240323032405210423052403020000001D230310010A736F7274426C6F636B3A24032305240323031Einstance,class=SortedCollection,selector=addLast:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Einstance,class=SortedCollection,selector=collect:,codeType=rtalk,modified=571795337,pbc=0401000123012302240302000000062303110108636F6C6C6563743A114F726465726564436F6C6C656374696F6E240323032405210423052403020000001D230310010A736F7274426C6F636B3A24032305240323031Einstance,class=SortedCollection,selector=add:after:,codeType=rtalk,modified=571795337,pbc=04020000230324040200000004230410000E696E76616C69644D657373616765240423041Einstance,class=SortedCollection,selector=addAllFirst:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Einstance,class=SortedCollection,selector=copyFrom:to:,codeType=rtalk,modified=571795337,pbc=040200042C012407230324040200000004230410000773706563696573240423042408230324040200000018230410000473697A652404230423082404020000002A23041001046E65773A2404230424062104230624040200000040230410010A736F7274426C6F636B3A24042301312408230224090801010223082404230424072307230324040200000067230410010361743A2404230423062404020000007923041001046164643A2404230840023431020000008A1001012B3124080101230902000000991001013C240423040A022306240423041Einstance,class=SortedCollection,selector=sortBlock:,codeType=rtalk,modified=571795337,pbc=04010000230124032303220423022403020000000C23031000067265536F7274240323021Einstance,class=SortedCollection,selector=sort:to:,codeType=rtalk,modified=571795337,pbcinstance,class=SortedCollection,selector=addFirst:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Einstance,class=Fraction,selector=reciprocal,codeType=rtalk,modified=571795337,pbc=04000000210121022402020000000623021001012F240223021Einstance,class=Fraction,selector=truncated,codeType=rtalk,modified=571795337,pbc=040000002102210124020200000006230210010471756F3A240223021Einstance,class=Fraction,selector=negated,codeType=rtalk,modified=571795337,pbc=040000012C014009334672616374696F6E15020D7072696D476574476C6F62616C00240423012402020000000F23021000096E756D657261746F722402020000001B23021000076E6567617465642402230223012402020000002D230210000B64656E6F6D696E61746F722402230223042402020000003F23021002166E756D657261746F723A64656E6F6D696E61746F723A240223021Einstance,class=Fraction,selector=printHex:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031000096E756D657261746F722403020000001223031001097072696E744865783A24032301230224030200000024230310000B64656E6F6D696E61746F722403020000003023031001097072696E744865783A24032301240323031Einstance,class=Fraction,selector=asFloat,codeType=rtalk,modified=571795337,pbc=0400000121012402020000000423021000076173466C6F617424022302240421022402020000001823021000076173466C6F61742402230223042402020000002A23021001012F240223021Einstance,class=Fraction,selector=-,codeType=rtalk,modified=571795337,pbc=0401000221012405230124030200000008230310000B64656E6F6D696E61746F722403230323052403020000001A23031001012A2403230324052102240623012403020000003223031000096E756D657261746F722403230323062403020000004423031001012A2403230323052403020000005623031001012D2403230324052102240623012403020000006E230310000B64656E6F6D696E61746F722403230323062403020000008023031001012A2403230323052403020000009223031001012F240323031Einstance,class=Fraction,selector=/,codeType=rtalk,modified=571795337,pbc=0401000221012405230124030200000008230310000B64656E6F6D696E61746F722403230323052403020000001A23031001012A2403230324052102240623012403020000003223031000096E756D657261746F722403230323062403020000004423031001012A2403230323052403020000005623031001012F240323031Einstance,class=Fraction,selector=numerator,codeType=rtalk,modified=571795337,pbc=040000002101240223021Einstance,class=Fraction,selector=hash,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F617424020200000010230210000468617368240223021Einstance,class=Fraction,selector=+,codeType=rtalk,modified=571795337,pbc=0401000221012405230124030200000008230310000B64656E6F6D696E61746F722403230323052403020000001A23031001012A2403230324052102240623012403020000003223031000096E756D657261746F722403230323062403020000004423031001012A2403230323052403020000005623031001012B2403230324052102240623012403020000006E230310000B64656E6F6D696E61746F722403230323062403020000008023031001012A2403230323052403020000009223031001012F240323031Einstance,class=Fraction,selector=*,codeType=rtalk,modified=571795337,pbc=040100022101240523012403020000000823031000096E756D657261746F722403230323052403020000001A23031001012A24032303240521022406230124030200000032230310000B64656E6F6D696E61746F722403230323062403020000004423031001012A2403230323052403020000005623031001012F240323031Einstance,class=Fraction,selector=riAsString,codeType=rtalk,modified=571795337,pbc=04000001400231294002312F21012402020000000A23021000086173537472696E6724022302400231282402020000001D23021001012C2402020000002923021001012C24022302240421022402020000003D23021000086173537472696E672402230223042402020000004F23021001012C2402020000005B23021001012C240223021Einstance,class=Fraction,selector=denominator,codeType=rtalk,modified=571795337,pbc=040000002102240223021Einstance,class=Fraction,selector=asInteger,codeType=rtalk,modified=571795337,pbc=040000002301240202000000042302100007726F756E646564240223021Einstance,class=Fraction,selector=numerator:denominator:,codeType=rtalk,modified=571795337,pbc=040200002301240423042201230224042304220223031Einstance,class=Fraction,selector=<,codeType=rtalk,modified=571795337,pbc=0401000221012405230124030200000008230310000B64656E6F6D696E61746F722403230323052403020000001A23031001012A2403230324052102240623012403020000003223031000096E756D657261746F722403230323062403020000004423031001012A2403230323052403020000005623031001013C240323031Einstance,class=Fraction,selector=<=,codeType=rtalk,modified=571795337,pbc=0401000221012405230124030200000008230310000B64656E6F6D696E61746F722403230323052403020000001A23031001012A2403230324052102240623012403020000003223031000096E756D657261746F722403230323062403020000004423031001012A2403230323052403020000005623031001023C3D240323031Einstance,class=Fraction,selector=//,codeType=rtalk,modified=571795337,pbc=0401000221012405230124030200000008230310000B64656E6F6D696E61746F722403230323052403020000001A23031001012A2403230324052102240623012403020000003223031000096E756D657261746F722403230323062403020000004423031001012A2403230323052403020000005623031001022F2F240323031Einstance,class=Fraction,selector=>=,codeType=rtalk,modified=571795337,pbc=040100022102240523012403020000000823031000096E756D657261746F722403230323052403020000001A23031001012A24032303240521012406230124030200000032230310000B64656E6F6D696E61746F722403230323062403020000004423031001012A2403230323052403020000005623031001023C3D240323031Einstance,class=Fraction,selector=>,codeType=rtalk,modified=571795337,pbc=0401000221012405230124030200000008230310000B64656E6F6D696E61746F722403230323052403020000001A23031001012A2403230324052102240623012403020000003223031000096E756D657261746F722403230323062403020000004423031001012A2403230323052403020000005623031001013E240323031Einstance,class=Fraction,selector==,codeType=rtalk,modified=571795337,pbc=0401000123012403020000000423031000076973466C6F6174240323030A01230223012403020000001A23031001013D240323031E010123012403020000002F230310000869734E756D626572240323030A022101240523012403020000004723031000096E756D657261746F722403230323052403020000005923031001013D240323030A0321022405230124030200000071230310000B64656E6F6D696E61746F722403230323052403020000008323031001013D24030103010223031Einstance,class=Fraction,selector=printOn:,codeType=rtalk,modified=571795337,pbc=04010000230121012403020000000623031001087072696E744F6E3A2403400336343723012403020000001923031001086E6578745075743A2403230121022403020000002B23031001087072696E744F6E3A240323021Einstance,class=Interval,selector=at:put:,codeType=rtalk,modified=571795337,pbc=04020000230324040200000004230410000E696E76616C69644D657373616765240423041Einstance,class=Interval,selector=at:,codeType=rtalk,modified=571795337,pbcinstance,class=Interval,selector=increment,codeType=rtalk,modified=571795337,pbc=040000002103240223021Einstance,class=Interval,selector=initBegin:end:incr:,codeType=rtalk,modified=571795337,pbc=040300002301240523052201230224052305220223032405230522034002343021032405020000001F23051001013D240523050A01401831696E74657276616C20696E6372656D656E74206973203023042405020000003623051001066572726F723A240523051E080201012C012405010223041Einstance,class=Interval,selector=species,codeType=rtalk,modified=571795337,pbc=040000002C01400633417272617915020D7072696D476574476C6F62616C00240223021Einstance,class=Interval,selector=size,codeType=rtalk,modified=571795337,pbc=0400000140023431210121022402020000000923021001012D240223022404210323042402020000001F23021001022F2F2402020000002B23021001012B24022302400234302402020000003E23021001046D61783A240223021Einstance,class=RtThread,selector=kill,codeType=rtalk,modified=726204065,pbc=0400000016000E7072696D4B696C6C5468726561640A2F53796E635072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=RtThread,selector=stackFrames,codeType=rtalk,modified=726204146,pbc=0400000016000D7072696D436F7079537461636B0B2F44656275675072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=RtThread,selector=name:,codeType=rtalk,modified=726204079,pbc=0401000016010E7072696D4E616D655468726561640A2F53796E635072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=RtThread,selector=priority:,codeType=rtalk,modified=697324131,pbc=04010000400234322301230224030200000009230310020E6465627567537465703A6172673A240323021Einstance,class=RtThread,selector=currentThread,codeType=rtalk,modified=726204018,pbc=0400000016000D7072696D4765745468726561640A2F53796E635072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=UndefinedObject,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=UndefinedObject,selector=notNil,codeType=rtalk,modified=571795337,pbc=040000002C03240223021Einstance,class=UndefinedObject,selector=isNilOrEmpty,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=UndefinedObject,selector=deepCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=UndefinedObject,selector=isNil,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=UndefinedObject,selector=printOn:,codeType=rtalk,modified=571795337,pbc=040100004004316E696C230124030200000007230310010B6E657874507574416C6C3A240323021Einstance,class=Character,selector=asInteger,codeType=rtalk,modified=726200618,pbc=0400000016000D7072696D43686172546F496E740A2F4D6973635072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=Character,selector=asHexValue,codeType=rtalk,modified=671844883,pbcinstance,class=Character,selector=isSeparator,codeType=rtalk,modified=671845460,pbc=04000001230124020200000004230210000A617363696956616C7565240223022404400334333223042402020000001B23021001013D2402230209014002343923042402020000003223021001013D240223020902400334313323042402020000004923021001013D240223020903400334313023042402020000006023021001013D240223020904400334313223042402020000007723021001013D2402010401030102010123021Einstance,class=Character,selector=riIsControl,codeType=rtalk,modified=571795337,pbc=04000000400334333223012402020000000723021000096173496E74656765722402020000001323021001013C24022302090140043431323623012402020000002A23021000096173496E74656765722402020000003623021001013E2402010123021Einstance,class=Character,selector=isDigit,codeType=rtalk,modified=671844933,pbc=040000004003343437230124020200000007230210000A617363696956616C75652402020000001323021001013E240223020A01400334353823012402020000002A230210000A617363696956616C75652402020000003623021001013C2402010123021Einstance,class=Character,selector=basicHash,codeType=rtalk,modified=676392326,pbc=0400000023012402020000000423021000096173496E7465676572240223021Einstance,class=Character,selector=isVowel,codeType=rtalk,modified=571795337,pbc=040000002301400B316141654569496F4F7555240202000000072302100109696E636C756465733A240223021Einstance,class=Character,selector=>=,codeType=rtalk,modified=673549333,pbc=040100012302230224030200000006230310010D636F6C6C6174655461626C653A240323032405230123022403020000001C230310010D636F6C6C6174655461626C653A2403230323052403020000002E23031001023E3D240323031Einstance,class=Character,selector=hash,codeType=rtalk,modified=676392320,pbc=0400000023012402020000000423021000096173496E7465676572240223021Einstance,class=Character,selector=<=,codeType=rtalk,modified=673549374,pbc=040100012302230224030200000006230310010D636F6C6C6174655461626C653A240323032405230123022403020000001C230310010D636F6C6C6174655461626C653A2403230323052403020000002E23031001023C3D240323031Einstance,class=Character,selector=isSingleByte,codeType=rtalk,modified=671845013,pbc=04000000400434323536230124020200000007230210000A617363696956616C75652402020000001323021001013C240223021Einstance,class=Character,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Character,selector=isAlphaNumeric,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000769734469676974240223020901230124020200000018230210000869734C65747465722402010123021Einstance,class=Character,selector=collateTable:,codeType=rtalk,modified=673549299,pbc=0401000223012403020000000423031000096173496E7465676572240323032405400334393023052403020000001B23031001023C3D240323030A012305240323031E0101400334393723052403020000003B23031001023E3D24032303240640043431323223052403020000005223031001023C3D24032303230624030200000064230310010126240323030A02400334333223052403020000007B23031001012D240323031E01024003343130240323031Einstance,class=Character,selector=deepCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Character,selector=printOn:,codeType=rtalk,modified=694195922,pbc=04010000400336333623012403020000000723031001086E6578745075743A2403230224030200000017230310000B72694973436F6E74726F6C240323030901230223012403020000002D23031001086E6578745075743A2403010123022403020000003F23031000096173496E74656765722403020000004B230310000D72694173486578537472696E6724032303400231202403020000005E23031001012C24032303230124030200000070230310010B6E657874507574416C6C3A240323021Einstance,class=Character,selector=isUpperCase,codeType=rtalk,modified=672342639,pbc=04000002230124020200000004230210000A617363696956616C7565240223022404400334363523042402020000001B23021001023E3D240223022405400334393023042402020000003223021001023C3D24022302230524020200000044230210010126240223021Einstance,class=Character,selector=isCharacter,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Character,selector=isLowerCase,codeType=rtalk,modified=672342660,pbc=04000002230124020200000004230210000A617363696956616C7565240223022404400334393723042402020000001B23021001023E3D24022302240540043431323223042402020000003223021001023C3D24022302230524020200000044230210010126240223021Einstance,class=Character,selector=digitValue,codeType=rtalk,modified=671845023,pbcinstance,class=Character,selector=>,codeType=rtalk,modified=673549355,pbc=040100012302230224030200000006230310010D636F6C6C6174655461626C653A240323032405230123022403020000001C230310010D636F6C6C6174655461626C653A2403230323052403020000002E23031001013E240323031Einstance,class=Character,selector==,codeType=rtalk,modified=671845037,pbc=04010001230124030200000004230310000B6973436861726163746572240323030A01230224030200000018230310000A617363696956616C756524032303240523012403020000002C230310000A617363696956616C75652403230323052403020000003E23031001013D240323031E080201012C03240323031E010223021Einstance,class=Character,selector=<,codeType=rtalk,modified=673549391,pbc=040100012302230224030200000006230310010D636F6C6C6174655461626C653A240323032405230123022403020000001C230310010D636F6C6C6174655461626C653A2403230323052403020000002E23031001013C240323031Einstance,class=Character,selector=asLowerCase,codeType=rtalk,modified=672342571,pbc=04000002230124020200000004230210000A617363696956616C7565240223022404400334363523042402020000001B23021001023E3D240223022405400334393023042402020000003223021001023C3D240223022305240202000000442302100101262402230209012301240223021E080201012C01400A3343686172616374657215020D7072696D476574476C6F62616C002405400334333223042402020000007123021001012B24022302230524020200000083230210010676616C75653A240223021E010223011Einstance,class=Character,selector=isLetter,codeType=rtalk,modified=671844975,pbcinstance,class=Character,selector=asCharacter,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Character,selector=asUpperCase,codeType=rtalk,modified=672342542,pbc=04000002230124020200000004230210000A617363696956616C7565240223022404400334393723042402020000001B23021001023E3D24022302240540043431323223042402020000003223021001023C3D240223022305240202000000442302100101262402230209012301240223021E080201012C01400A3343686172616374657215020D7072696D476574476C6F62616C002405400334333223042402020000007123021001012D24022302230524020200000083230210010676616C75653A240223021E010223011Einstance,class=Character,selector=isWhitespace,codeType=rtalk,modified=671845305,pbc=04000000400334333223012402020000000723021000096173496E74656765722402020000001323021001023C3D240223021Einstance,class=Character,selector=asString,codeType=rtalk,modified=571795337,pbc=0400000023012C01400733537472696E6715020D7072696D476574476C6F62616C002402020000000D2302100105776974683A240223021Einstance,class=Character,selector=asciiValue,codeType=rtalk,modified=671844835,pbc=0400000023012402020000000423021000096173496E7465676572240223021Einstance,class=RtTimer,selector=execute:after:every:,codeType=rtalk,modified=697324318,pbc=040300004002343123012302230323042405020000000D23051004166465627567537465703A6172673A6172673A6172673A240523041Einstance,class=RtTimer,selector=cancel,codeType=rtalk,modified=697324537,pbc=040000004003343135230124020200000007230210010A6465627567537465703A240223011Einstance,class=Boolean,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Boolean,selector=isBoolean,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Boolean,selector=deepCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Boolean,selector=printOn:,codeType=rtalk,modified=571795337,pbc=040100002302240323030A014005317472756524030802010140063166616C736524030102230323012403020000001E230310010B6E657874507574416C6C3A240323021Einstance,class=IdentityDictionary,selector=associationAt:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200032301230324040200000006230410010D66696E644B6579496E6465783A240423042406230621022404020000001C230410010361743A2404230424072C0123072404020000003223041001023D3D240423040A01230224040200000046230410000576616C7565240423041E01012C01400C334173736F63696174696F6E15020D7072696D476574476C6F62616C0024072306210224040200000068230410010361743A24042304210224084002343123062404020000008123041001012B24042304230824040200000093230410010361743A240423042307240402000000A5230410020A6B65793A76616C75653A240423041Einstance,class=IdentityDictionary,selector=removeKey:ifAbsent:,codeType=rtalk,modified=571795337,pbcinstance,class=IdentityDictionary,selector=includesKey:,codeType=rtalk,modified=571795337,pbc=0401000121022405230123022403020000000A230310010D66696E644B6579496E6465783A2403230323052403020000001C230310010361743A2403020000002823031000066E6F744E696C240323031Einstance,class=IdentityDictionary,selector=associationsDo:,codeType=rtalk,modified=571795337,pbcinstance,class=IdentityDictionary,selector=at:put:,codeType=rtalk,modified=571795337,pbcinstance,class=IdentityDictionary,selector=add:,codeType=rtalk,modified=571795337,pbc=040100012302240523012403020000000823031000036B65792403230323012403020000001A230310000576616C75652403230323052403020000002C230310020761743A7075743A24032301240323031Einstance,class=IdentityDictionary,selector=grow,codeType=rtalk,modified=571795337,pbc=0600000301012C012602230124020200000004230210000773706563696573240223022404210224020200000018230210000473697A652402230223042402020000002A23021001086E657753697A653A240223022601180101230124020200000063230210010F6173736F63696174696F6E73446F3A24022501240202000000732302100008636F6E74656E747324022302220223011E05010100002301240323032602250225012403020000005023031001046164643A240323031Einstance,class=IdentityDictionary,selector=keys,codeType=rtalk,modified=571795337,pbcinstance,class=IdentityDictionary,selector=keyAtValue:ifAbsent:,codeType=rtalk,modified=571795337,pbcinstance,class=IdentityDictionary,selector=adjustSize,codeType=rtalk,modified=571795337,pbc=04000001400334323021012402020000000723021001012A2402230224044002343940023432210224020200000021230210000473697A652402020000002D23021001012D2402020000003923021001012A2402230223042402020000004B23021001023E3D240223020A0123012402020000005F230210000467726F77240223021E080201012C012402010223011Einstance,class=IdentityDictionary,selector=at:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200022301230324040200000006230410010D66696E644B6579496E6465783A240423042406230621022404020000001C230410010361743A2404230424072C0123072404020000003223041001023D3D240423040A01230224040200000046230410000576616C7565240423041E0101210224074002343123062404020000006223041001012B24042304230724040200000074230410010361743A240423041Einstance,class=IdentityDictionary,selector=any,codeType=rtalk,modified=571795337,pbcinstance,class=IdentityDictionary,selector=at:,codeType=rtalk,modified=571795337,pbc=040100022301230224030200000006230310010D66696E644B6579496E6465783A240323032405230521022403020000001C230310010361743A2403230324062C0123062403020000003223031001023D3D240323030A01230224030200000046230310000E6572726F72416273656E744B6579240323031E0101210224064002343123052403020000006223031001012B24032303230624030200000074230310010361743A240323031Einstance,class=IdentityDictionary,selector=findKeyIndex:,codeType=rtalk,modified=571795337,pbcinstance,class=IdentityDictionary,selector=do:,codeType=rtalk,modified=571795337,pbc=0601000341002C0126012302260323012602210224030200000004230310000473697A65240323034002343218010140023431240302000000942303100309746F3A62793A646F3A240323021E05010140012301240323032601250121022403020000002B230310010361743A24030200000037230310000569734E696C240323030901210224054002343125012403020000005223031001012B24032303230524030200000064230310010361743A24032303250224030200000076230310010676616C75653A2403080201012C012403010223031Einstance,class=IdentityDictionary,selector=rehashFrom:,codeType=rtalk,modified=571795337,pbcinstance,class=IdentityDictionary,selector=fullCopy,codeType=rtalk,modified=571795337,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E657724022302260118010123012402020000007F230210010F6173736F63696174696F6E73446F3A24022501240223021E05010100022301240323032602250124052502240625022403020000003C230310000576616C756524030200000048230310000866756C6C436F70792403230323062403020000005A230310010676616C75653A2403230323052403020000006C23031001046164643A240323031Einstance,class=Association,selector=valueString,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000576616C75652402020000001023021000086173537472696E67240223021Einstance,class=Association,selector=isEmpty,codeType=rtalk,modified=571795337,pbc=0400000021022402020000000423021000076973456D707479240223020A0121012402020000001823021000076973456D7074792402010123021Einstance,class=Association,selector=hash,codeType=rtalk,modified=571795337,pbc=04000000210224020200000004230210000468617368240223021Einstance,class=Association,selector=key,codeType=rtalk,modified=571795337,pbc=040000002102240223021Einstance,class=Association,selector=keyString,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000036B65792402020000001023021000086173537472696E67240223021Einstance,class=Association,selector=<,codeType=rtalk,modified=571795337,pbc=040100012102240523012403020000000823031000036B65792403230323052403020000001A23031001013C240323031Einstance,class=Association,selector=<=,codeType=rtalk,modified=571795337,pbc=040100012102240523012403020000000823031000036B65792403230323052403020000001A23031001023C3D240323031Einstance,class=Association,selector=value:,codeType=rtalk,modified=571795337,pbc=04010000230124032303220123021Einstance,class=Association,selector=isAssociation,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Association,selector=value,codeType=rtalk,modified=571795337,pbc=040000002101240223021Einstance,class=Association,selector=>=,codeType=rtalk,modified=571795337,pbc=0401000123012403020000000423031000036B6579240323032405210223052403020000001A23031001023C3D240323031Einstance,class=Association,selector=key:,codeType=rtalk,modified=571795337,pbc=04010000230124032303220223021Einstance,class=Association,selector=>,codeType=rtalk,modified=571795337,pbc=040100012102240523012403020000000823031000036B65792403230323052403020000001A23031001013E240323031Einstance,class=Association,selector==,codeType=rtalk,modified=571795337,pbc=040100012301240302000000042303100005636C6173732403230324052C01400C334173736F63696174696F6E15020D7072696D476574476C6F62616C0023052403020000002123031001023D3D240323030A012102240523012403020000003923031000036B65792403230323052403020000004B23031001013D2403010123031Einstance,class=Association,selector=printOn:,codeType=rtalk,modified=571795337,pbc=04010000230121022403020000000623031001087072696E744F6E3A2403400631203D3D3E20230124030200000019230310010B6E657874507574416C6C3A2403230121012403020000002B23031001087072696E744F6E3A240323021Einstance,class=Dictionary,selector=at:,codeType=rtalk,modified=571795337,pbc=040100022301230224030200000006230310010A6C6F6F6B55704B65793A240323032405230324062C0123062403020000002023031001023D3D240323030A01230224030200000034230310000E6572726F72416273656E744B6579240308020101230524030200000048230310000576616C75652403010223031Einstance,class=Dictionary,selector=findKeyIndex:,codeType=rtalk,modified=571795337,pbcinstance,class=Dictionary,selector=do:,codeType=rtalk,modified=571795337,pbc=0601000301002C012601230126021801012302240302000000392303110103646F3A03536574240323021E05010100002301240323032601250124030200000014230310000576616C756524032303250224030200000026230310010676616C75653A240323031Einstance,class=Dictionary,selector=removeKey:,codeType=rtalk,modified=571795337,pbc=06010002410023022602230126012501180001230224030200000021230310021372656D6F76654B65793A6966416273656E743A240323021E050100400025022402020000000E230210000E6572726F72416273656E744B6579240223021Einstance,class=Dictionary,selector=keyAtValue:,codeType=rtalk,modified=571795337,pbc=06010002010023012601250118000123022403020000001523031002146B6579417456616C75653A6966416273656E743A240323031E05010000002C01240223021Einstance,class=Dictionary,selector=occurrencesOf:,codeType=rtalk,modified=571795337,pbc=0601000401002C01260223012603400234302403230326011801012302240302000000572303100103646F3A24032501240323031E05010100002301240323032602250325022403020000001F23031001013D240323030A014002343125012403020000003623031001012B240323032601080201012C012403010223031Einstance,class=Dictionary,selector=any,codeType=rtalk,modified=571795337,pbc=0600000281002C0126014002343021012402020000000723021001013D240223020A012C01400C334173736F63696174696F6E15020D7072696D476574476C6F62616C002402020000002223021000036E6577240223021E010118010121022402020000006F2302100103646F3A240223011E0501018000230124032303260125012403020000004723031000066E6F744E696C240323030A022501240323031F080301022C012403010323031Einstance,class=Dictionary,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E6577240223022601180101230124020200000049230210010F6173736F63696174696F6E73446F3A24022501240223021E05010100002301240323032602250225012403020000003623031001046164643A240323031Einstance,class=Dictionary,selector=associationAt:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200022301230324040200000006230410010A6C6F6F6B55704B65793A240423042406230424072C0123072404020000002023041001023D3D240423040A01230224040200000034230410000576616C756524040802010123062404010223041Einstance,class=Dictionary,selector=asAssociationSortedCollection,codeType=rtalk,modified=571795337,pbcinstance,class=Dictionary,selector=at:put:,codeType=rtalk,modified=571795337,pbc=0402000123032406230123022C01400C334173736F63696174696F6E15020D7072696D476574476C6F62616C0024040200000013230410020A6B65793A76616C75653A2404230423062404020000002523041001046164643A24042302240423041Einstance,class=Dictionary,selector=includesKey:,codeType=rtalk,modified=571795337,pbc=040100002301230224030200000006230310010A6C6F6F6B55704B65793A2403020000001223031000066E6F744E696C240323031Einstance,class=Dictionary,selector=deepCopy,codeType=rtalk,modified=571795337,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E657724022302260118010123012402020000005D230210010F6173736F63696174696F6E73446F3A24022501240223021E05010100012301240323032602250124052502240302000000382303100004636F70792403230323052403020000004A23031001046164643A240323031Einstance,class=Dictionary,selector=printOn:,codeType=rtalk,modified=726096576,pbcinstance,class=Dictionary,selector==,codeType=rtalk,modified=571795337,pbcinstance,class=Dictionary,selector=remove:ifAbsent:,codeType=rtalk,modified=571795337,pbc=04020000230324040200000004230410000E696E76616C69644D657373616765240423041Einstance,class=Dictionary,selector=fullCopy,codeType=rtalk,modified=571795337,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E657724022302260118010123012402020000005D230210010F6173736F63696174696F6E73446F3A24022501240223021E0501010001230124032303260225012405250224030200000038230310000866756C6C436F70792403230323052403020000004A23031001046164643A240323031Einstance,class=Dictionary,selector=keyAtValue:ifAbsent:,codeType=rtalk,modified=571795337,pbc=0602000481002C0126012301260323022602180101230324040200000056230410010F6173736F63696174696F6E73446F3A2404250224040200000066230410000576616C7565240423041E050101800023012403230326012503250124030200000016230310000576616C75652403020000002223031001013D240323030A0125012403020000003623031000036B6579240323031F080201012C012403010223031Einstance,class=Dictionary,selector=removeKey:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200022301230324040200000006230410010D66696E644B6579496E6465783A240423042406230621022404020000001C230410010361743A2404230424072C0123072404020000003223041001023D3D240423040A01230224040200000046230410000576616C7565240423041E010123062C0121022404020000005F230410020761743A7075743A24044002343121012404020000007223041001012D2404230422012306230324040200000088230410010B72656861736846726F6D3A24042301240423041Einstance,class=Dictionary,selector=asAssociationOrderedCollection,codeType=rtalk,modified=571795337,pbc=0600000301002C01260221012C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002402020000000D23021001046E65773A240223022601180101230124020200000046230210010F6173736F63696174696F6E73446F3A24022501240223021E05010100002301240323032602250225012403020000003323031001046164643A240323031Einstance,class=Dictionary,selector=includes:,codeType=rtalk,modified=571795337,pbc=0601000381002C0126012301260218010123022403020000003E2303100103646F3A24032C03240323031E05010180002301240323032601250225012403020000001623031001013D240323030A012C02240323031F080201012C012403010223031Einstance,class=Dictionary,selector=rehashFrom:,codeType=rtalk,modified=571795337,pbcinstance,class=Dictionary,selector=grow,codeType=rtalk,modified=571795337,pbc=0600000301012C0126022301240202000000042302100005636C6173732402230224044002343221022402020000001B230210000473697A652402020000002723021001012A2402230223042402020000003923021001046E65773A240223022601180101230124020200000072230210010F6173736F63696174696F6E73446F3A24022501240202000000822302100008636F6E74656E747324022302220223011E05010100002301240323032602250225012403020000005F23031001046164643A240323031Einstance,class=Dictionary,selector=errorAbsentKey,codeType=rtalk,modified=571795337,pbc=04000000400F314B6579206973206D697373696E6723012402020000000723021001066572726F723A240223011Einstance,class=Dictionary,selector=add:,codeType=rtalk,modified=571795337,pbc=040100032302240723012403020000000823031000036B65792403230323072403020000001A230310010D66696E644B6579496E6465783A2403230324052305210224030200000030230310010361743A240323032406230324072C0123072403020000004A23031001023D3D240323030A014002343121012403020000006123031001012B24032303220123052301210224030200000079230310020761743A7075743A24030802010123012403020000008D230310000576616C75652403230323062403020000009F230310010676616C75653A240301022302240302000000B1230310000A61646A75737453697A6524032301240323031Einstance,class=Dictionary,selector=keys,codeType=rtalk,modified=571795337,pbc=0600000301012C0126022C0140043353657415020D7072696D476574476C6F62616C00240440023432230124020200000012230210000473697A652402020000001E23021001012A2402230223042402020000003023021001046E65773A24022302260118010123012402020000007D230210010F6173736F63696174696F6E73446F3A24022501240223021E050101000123012403230326022501240525022403020000005823031000036B65792403230323052403020000006A23031001046164643A240323031Einstance,class=Dictionary,selector=removeAssociation:,codeType=rtalk,modified=571795337,pbc=040100012302240523012403020000000823031000036B65792403230323052403020000001A230310010A72656D6F76654B65793A240323021Einstance,class=Dictionary,selector=keysDo:,codeType=rtalk,modified=571795337,pbc=0601000301002C01260123012602180101230224030200000039230310010F6173736F63696174696F6E73446F3A240323021E0501010000230124032303260125012403020000001423031000036B657924032303250224030200000026230310010676616C75653A240323031Einstance,class=Dictionary,selector=associationsDo:,codeType=rtalk,modified=571795337,pbc=0401000023012302240302000000062303110103646F3A03536574240323021Einstance,class=Dictionary,selector=lookUpKey:,codeType=rtalk,modified=571795337,pbcinstance,class=Dictionary,selector=associationAt:,codeType=rtalk,modified=571795337,pbc=0601000241002302260223012601250118000123022403020000002123031002176173736F63696174696F6E41743A6966416273656E743A240323031E050100400025022402020000000E230210000E6572726F72416273656E744B6579240223021Einstance,class=Dictionary,selector=at:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200022301230324040200000006230410010A6C6F6F6B55704B65793A240423042406230424072C0123072404020000002023041001023D3D240423040A01230224040200000034230410000576616C7565240408020101230624040200000048230410000576616C75652404010223041Einstance,class=Dictionary,selector=select:,codeType=rtalk,modified=571795337,pbc=0601000401002C012602230126032302240302000000042303100007737065636965732403020000001023031000036E6577240323032601180101230224030200000079230310010F6173736F63696174696F6E73446F3A24032501240323031E05010100002301240323032602250224030200000034230310000576616C756524032303250324030200000046230310010676616C75653A240323030A01250225012403020000005C23031001046164643A2403080201012C012403010223031Einstance,class=RtMethodLookup,selector=contents,codeType=rtalk,pbc=040000002102240223021Einstance,class=RtMethodLookup,selector=removeAll:,codeType=rtalk,pbc=0601000341002C01260123022603230126021801012502240302000000292303100103646F3A24032502240323031E050101400023012403230326012501250324030200000016230310010772656D6F76653A240323031Einstance,class=RtMethodLookup,selector=associationsDo:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=fullCopy,codeType=rtalk,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E657724022302260118010123012402020000005D230210010F6173736F63696174696F6E73446F3A24022501240223021E0501010001230124032303260225012405250224030200000038230310000866756C6C436F70792403230323052403020000004A23031001046164643A240323031Einstance,class=RtMethodLookup,selector=removeKey:ifAbsent:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=lookupMethod:,codeType=rtalk,modified=771790692,pbc=040100002301230224030200000006230310010C696E636C756465734B65793A240323030A01230123022403020000001C230310010361743A240323031E0101210424030200000031230310000569734E696C240323030A022C01240323031E01022301210424030200000050230310010D6C6F6F6B75704D6574686F643A240323031Einstance,class=RtMethodLookup,selector=printInspectStringOn:indent:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=removeKey:,codeType=rtalk,pbc=06010002410023022602230126012501180001230224030200000021230310021372656D6F76654B65793A6966416273656E743A240323021E050100400025022402020000000E230210000E6572726F72416273656E744B6579240223021Einstance,class=RtMethodLookup,selector=removeAssociation:,codeType=rtalk,pbc=040100012302240523012403020000000823031000036B65792403230323052403020000001A230310010A72656D6F76654B65793A240323021Einstance,class=RtMethodLookup,selector=keys,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=keysDo:,codeType=rtalk,pbc=0601000301002C01260123012602180101230224030200000039230310010F6173736F63696174696F6E73446F3A240323021E0501010000230124032303260125012403020000001423031000036B657924032303250224030200000026230310010676616C75653A240323031Einstance,class=RtMethodLookup,selector=selfLink,codeType=rtalk,modified=741749482,pbc=040000002104240223021Einstance,class=RtMethodLookup,selector=asSortedCollection:,codeType=rtalk,pbc=040100012C01401133536F72746564436F6C6C656374696F6E15020D7072696D476574476C6F62616C00240523022403020000000F230310000473697A652403230323052403020000002123031001046E65773A2403230324052301230524030200000037230310010A736F7274426C6F636B3A240323052405230223052403020000004D2303100107616464416C6C3A240323052403020000005D2303100008796F757273656C66240323031Einstance,class=RtMethodLookup,selector=collect:,codeType=rtalk,pbc=0601000401002C012602230126032302240302000000042303100007737065636965732403020000001023031000036E657724032303260118010123022403020000005F2303100103646F3A24032501240323031E0501010001230124032303260225012405250225032403020000003A230310010676616C75653A2403230323052403020000004C23031001046164643A240323031Einstance,class=RtMethodLookup,selector=superLink:,codeType=rtalk,modified=741749529,pbc=04010000230124032303220523021Einstance,class=RtMethodLookup,selector=lookUpKey:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=isNilOrEmpty,codeType=rtalk,pbc=0400000023012402020000000423021000076973456D707479240223021Einstance,class=RtMethodLookup,selector=printOn:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=associationAt:ifAbsent:,codeType=rtalk,pbc=040200032301230324040200000006230410010D66696E644B6579496E6465783A240423042406230621022404020000001C230410010361743A2404230424072C0123072404020000003223041001023D3D240423040A01230224040200000046230410000576616C7565240423041E01012C01400C334173736F63696174696F6E15020D7072696D476574476C6F62616C0024072306210224040200000068230410010361743A24042304210224084002343123062404020000008123041001012B24042304230824040200000093230410010361743A240423042307240402000000A5230410020A6B65793A76616C75653A240423041Einstance,class=RtMethodLookup,selector=select:,codeType=rtalk,pbc=0601000401002C012602230126032302240302000000042303100007737065636965732403020000001023031000036E6577240323032601180101230224030200000079230310010F6173736F63696174696F6E73446F3A24032501240323031E05010100002301240323032602250224030200000034230310000576616C756524032303250324030200000046230310010676616C75653A240323030A01250225012403020000005C23031001046164643A2403080201012C012403010223031Einstance,class=RtMethodLookup,selector=associationsSelect:,codeType=rtalk,pbc=0601000401002C012602230126032302240302000000042303100007737065636965732403020000001023031000036E6577240323032601180101230224030200000069230310010F6173736F63696174696F6E73446F3A24032501240323031E050101000023012403230326022502250324030200000036230310010676616C75653A240323030A01250225012403020000004C23031001046164643A2403080201012C012403010223031Einstance,class=RtMethodLookup,selector=atIgnoreCase:ifAbsent:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=includes:,codeType=rtalk,pbc=0601000381002C0126012301260218010123022403020000003E2303100103646F3A24032C03240323031E05010180002301240323032601250225012403020000001623031001013D240323030A012C02240323031F080201012C012403010223031Einstance,class=RtMethodLookup,selector=reject:,codeType=rtalk,pbc=0601000301002C01260123012602180101230224030200000035230310010773656C6563743A240323031E050101000023012403230326012501250224030200000016230310010676616C75653A2403020000002223031000036E6F74240323031Einstance,class=RtMethodLookup,selector==,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=errorAbsentObject,codeType=rtalk,pbc=040000004020316F626A656374206973206E6F7420696E2074686520636F6C6C656374696F6E23012402020000000723021001066572726F723A240223021Einstance,class=RtMethodLookup,selector=at:put:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=at:ifAbsent:,codeType=rtalk,pbc=040200022301230324040200000006230410010D66696E644B6579496E6465783A240423042406230621022404020000001C230410010361743A2404230424072C0123072404020000003223041001023D3D240423040A01230224040200000046230410000576616C7565240423041E0101210224074002343123062404020000006223041001012B24042304230724040200000074230410010361743A240423041Einstance,class=RtMethodLookup,selector=values,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=remove:,codeType=rtalk,pbc=06010002410023022602230126012501180001230224030200000021230310021072656D6F76653A6966416273656E743A240323031E050100400025022402020000000E23021000116572726F72416273656E744F626A656374240223021Einstance,class=RtMethodLookup,selector=keyAtValue:ifAbsent:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=implementsMethod:,codeType=rtalk,modified=771791360,pbc=040100002301230224030200000006230310010D6C6F6F6B75704D6574686F643A24030200000012230310000569734E696C2403020000001E23031000036E6F74240323031Einstance,class=RtMethodLookup,selector=detect:,codeType=rtalk,pbc=06010002410023022602230126012501180001230224030200000021230310020E6465746563743A69664E6F6E653A240323031E050100400025022402020000000E23021000116572726F72416273656E744F626A656374240223021Einstance,class=RtMethodLookup,selector=deepCopy,codeType=rtalk,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E657724022302260118010123012402020000005D230210010F6173736F63696174696F6E73446F3A24022501240223021E05010100012301240323032602250124052502240302000000382303100004636F70792403230323052403020000004A23031001046164643A240323031Einstance,class=RtMethodLookup,selector=size,codeType=rtalk,pbc=040000002101240223021Einstance,class=RtMethodLookup,selector=asSortedCollection,codeType=rtalk,pbc=040000012C01401133536F72746564436F6C6C656374696F6E15020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A24022302240423012304240202000000372302100107616464416C6C3A24022304240202000000472302100008796F757273656C66240223021Einstance,class=RtMethodLookup,selector=associationAt:,codeType=rtalk,pbc=0601000241002302260223012601250118000123022403020000002123031002176173736F63696174696F6E41743A6966416273656E743A240323031E050100400025022402020000000E230210000E6572726F72416273656E744B6579240223021Einstance,class=RtMethodLookup,selector=detect:ifNone:,codeType=rtalk,pbc=0602000481002C012601230126032302260218010123032404020000003E2304100103646F3A240425022404020000004E230410000576616C7565240423041E050101800023012403230326012501250324030200000016230310010676616C75653A240323030A012501240323031F080201012C012403010223031Einstance,class=RtMethodLookup,selector=selfLink:,codeType=rtalk,modified=741749556,pbc=04010000230124032303220423021Einstance,class=RtMethodLookup,selector=do:,codeType=rtalk,pbc=0601000341002C0126012302260323012602210224030200000004230310000473697A65240323034002343218010140023431240302000000942303100309746F3A62793A646F3A240323021E05010140012301240323032601250121022403020000002B230310010361743A24030200000037230310000569734E696C240323030901210224054002343125012403020000005223031001012B24032303230524030200000064230310010361743A24032303250224030200000076230310010676616C75653A2403080201012C012403010223031Einstance,class=RtMethodLookup,selector=owner,codeType=rtalk,pbc=040000002103240223021Einstance,class=RtMethodLookup,selector=errorAbsentKey,codeType=rtalk,pbc=04000000400F314B6579206973206D697373696E6723012402020000000723021001066572726F723A240223011Einstance,class=RtMethodLookup,selector=any,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=initialize:,codeType=rtalk,pbc=040100004002343024032303220123012C01400633417272617915020D7072696D476574476C6F62616C002403020000001623031001046E65773A24032303220223021Einstance,class=RtMethodLookup,selector=owner:,codeType=rtalk,pbc=04010000230124032303220323021Einstance,class=RtMethodLookup,selector=findElementIndex:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=errorNotIndexable,codeType=rtalk,pbc=04000001230124044026317320646F206E6F7420726573706F6E6420746F20696E646578696E67206D6573736167657323012402020000000B2302100005636C6173732402020000001723021000046E616D652402020000002323021001012C2402230223042402020000003523021001066572726F723A240223021Einstance,class=RtMethodLookup,selector=notEmpty,codeType=rtalk,pbc=0400000040023430230124020200000007230210000473697A652402020000001323021001013E240223021Einstance,class=RtMethodLookup,selector=add:,codeType=rtalk,pbc=040100012302240523012403020000000823031000036B65792403230323012403020000001A230310000576616C75652403230323052403020000002C230310020761743A7075743A24032301240323031Einstance,class=RtMethodLookup,selector=superLink,codeType=rtalk,modified=741749498,pbc=040000002105240223021Einstance,class=RtMethodLookup,selector=isCollection,codeType=rtalk,pbc=040000002C02240223021Einstance,class=RtMethodLookup,selector=grow,codeType=rtalk,pbc=0600000301012C012602230124020200000004230210000773706563696573240223022404210224020200000018230210000473697A652402230223042402020000002A23021001086E657753697A653A240223022601180101230124020200000063230210010F6173736F63696174696F6E73446F3A24022501240202000000732302100008636F6E74656E747324022302220223011E05010100002301240323032602250225012403020000005023031001046164643A240323031Einstance,class=RtMethodLookup,selector=remove:ifAbsent:,codeType=rtalk,pbc=04020000230324040200000004230410000E696E76616C69644D657373616765240423041Einstance,class=RtMethodLookup,selector=inject:into:,codeType=rtalk,pbc=0602000501002C012602230126042302260325042404230426011801012303240402000000372304100103646F3A24042501240423041E0501010000230124032303260225012502250324030200000020230310020C76616C75653A76616C75653A24032303260123031Einstance,class=RtMethodLookup,selector=shallowCopy,codeType=rtalk,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E6577240223022601180101230124020200000049230210010F6173736F63696174696F6E73446F3A24022501240223021E05010100002301240323032602250225012403020000003623031001046164643A240323031Einstance,class=RtMethodLookup,selector=isEmpty,codeType=rtalk,pbc=0400000040023430230124020200000007230210000473697A652402020000001323021001013D240223021Einstance,class=RtMethodLookup,selector=at:,codeType=rtalk,pbc=040100022301230224030200000006230310010D66696E644B6579496E6465783A240323032405230521022403020000001C230310010361743A2403230324062C0123062403020000003223031001023D3D240323030A01230224030200000046230310000E6572726F72416273656E744B6579240323031E0101210224064002343123052403020000006223031001012B24032303230624030200000074230310010361743A240323031Einstance,class=RtMethodLookup,selector=addAll:,codeType=rtalk,pbc=0601000341002C01260123022603230126021801012502240302000000292303100103646F3A24032502240323031E05010140002301240323032601250125032403020000001623031001046164643A240323031Einstance,class=RtMethodLookup,selector=findKeyIndex:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=adjustSize,codeType=rtalk,pbc=04000001400334323021012402020000000723021001012A2402230224044002343940023432210224020200000021230210000473697A652402020000002D23021001012D2402020000003923021001012A2402230223042402020000004B23021001023E3D240223020A0123012402020000005F230210000467726F77240223021E080201012C012402010223011Einstance,class=RtMethodLookup,selector=occurrencesOf:,codeType=rtalk,pbc=0601000401002C01260223012603400234302403230326011801012302240302000000572303100103646F3A24032501240323031E05010100002301240323032602250325022403020000001F23031001013D240323030A014002343125012403020000003623031001012B240323032601080201012C012403010223031Einstance,class=RtMethodLookup,selector=rehashFrom:,codeType=rtalk,pbcinstance,class=RtMethodLookup,selector=includesKey:,codeType=rtalk,pbc=0401000121022405230123022403020000000A230310010D66696E644B6579496E6465783A2403230323052403020000001C230310010361743A2403020000002823031000066E6F744E696C240323031Einstance,class=RtBlock2Arg,selector=value:value:,codeType=rtalk,modified=726196896,pbc=040200001602177072696D426C6F636B496E766F6B6557697468576974680C2F4F626A6563745072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=Float,selector=sqrt,codeType=rtalk,modified=726186851,pbc=0400000016000D7072696D466C6F6174537172740B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=sin,codeType=rtalk,modified=726186843,pbc=0400000016000C7072696D466C6F617453696E0B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=logToLin,codeType=rtalk,modified=571795337,pbc=0400000040053532302E3023012402020000000723021001012F2402230240053531302E302402020000001A2302100109726169736564546F3A240223021Einstance,class=Float,selector=hash,codeType=rtalk,modified=697217469,pbcinstance,class=Float,selector=random,codeType=rtalk,modified=726186805,pbc=0400000016000F7072696D466C6F617452616E646F6D0B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=mag,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Float,selector=riIsFloat,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Float,selector=<,codeType=rtalk,modified=726186660,pbc=040100011601117072696D466C6F61744C6573735468616E0B2F466C6F61745072696D7323012403020000000423031000076973466C6F6174240323030A012302240302000000182303100005636C61737324030200000024230310000A666C6F61744572726F72240323031E080201012302240523012403020000003F23031000076173466C6F61742403230323052403020000005123031001013C240323031E010223021Einstance,class=Float,selector==,codeType=rtalk,modified=726186677,pbc=0401000116010F7072696D466C6F6174457175616C730B2F466C6F61745072696D7323012403020000000423031000076973466C6F6174240323030A012302240302000000182303100005636C61737324030200000024230310000A666C6F61744572726F72240323031E0802010123012403020000003B230310000869734E756D626572240323030A032302240523012403020000005323031000076173466C6F61742403230323052403020000006523031001013D240323031E080401032C03240323031E0104010223021Einstance,class=Float,selector=truncatedPrim,codeType=rtalk,modified=726187230,pbc=040000041600127072696D466C6F61745472756E63617465640B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=>,codeType=rtalk,modified=571795337,pbc=0401000123012403020000000423031000076173466C6F6174240323032405230223052403020000001A23031001013C240323031Einstance,class=Float,selector=printOn:,codeType=rtalk,modified=681842068,pbc=0401000123022405230140033434362C01400A3343686172616374657215020D7072696D476574476C6F62616C0024030200000014230310010676616C75653A2403020000002023031000086173537472696E672403230323052403020000003223031002197072696E744F6E3A646563696D616C536570617261746F723A240323021Einstance,class=Float,selector=replaceBytesFrom:to:with:startingAt:,codeType=rtalk,modified=726202798,pbc=040400051604247072696D42797465735265706C61636546726F6D546F576974685374617274696E674174102F42797465537472696E675072696D732C0124092304240623062408230131240A2302240B08010102230A2406230624092305240C230923082303240602000000292306100108626173696341743A2406020000003523061000096173496E746567657224062306230C24060200000047230610020761743A7075743A24064002343123082406020000005A23061001012B240623062408230A40023431020000006F1001012B31240A0101230B020000007E1001013C240623060A0223051Einstance,class=Float,selector=riRoundTo125,codeType=rtalk,modified=697217514,pbcinstance,class=Float,selector=validValue,codeType=rtalk,modified=726187248,pbc=0400000016000E7072696D466C6F617456616C69640B2F466C6F61745072696D7323011Einstance,class=Float,selector=replace:with:,codeType=rtalk,modified=726202780,pbc=040200001602197072696D42797465735265706C616365436F756E7457697468102F42797465537472696E675072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=Float,selector=>=,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031001013C2403020000001223031000036E6F74240323031Einstance,class=Float,selector=exp,codeType=rtalk,modified=726186720,pbc=0400000016000C7072696D466C6F61744578700B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=<=,codeType=rtalk,modified=571795337,pbc=0401000123012403020000000423031000076173466C6F6174240323032405230223052403020000001A23031001013C2403020000002623031000036E6F74240323031Einstance,class=Float,selector=radiansToDegrees,codeType=rtalk,modified=571795337,pbc=0400000140043431383023012402020000000723021001012A2402230224042C01400633466C6F617415020D7072696D476574476C6F62616C0024020200000022230210000270692402230223042402020000003423021001012F240223021Einstance,class=Float,selector=ln,codeType=rtalk,modified=726186755,pbc=0400000016000B7072696D466C6F61744C6E0B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=riAsString:units:,codeType=rtalk,modified=696014714,pbcinstance,class=Float,selector=significand,codeType=rtalk,modified=726186833,pbc=040000001600147072696D466C6F61745369676E69666963616E640B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=/,codeType=rtalk,modified=726186647,pbcinstance,class=Float,selector=truncated,codeType=rtalk,modified=571795337,pbcinstance,class=Float,selector=-,codeType=rtalk,modified=726186642,pbc=0401000116010C7072696D466C6F61745375620B2F466C6F61745072696D7323012403020000000423031000086973526944617461240323030A0123012403020000001823031000076E656761746564240323032405230223052403020000002E23031001012B240323031E0802010123012403020000004523031000076973466C6F6174240323030A032302240302000000592303100005636C61737324030200000065230310000A666C6F61744572726F72240323031E080401032302240523012403020000008023031000076173466C6F61742403230323052403020000009223031001012D240323031E0104010223021Einstance,class=Float,selector=tan,codeType=rtalk,modified=726186869,pbc=0400000016000C7072696D466C6F617454616E0B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=+,codeType=rtalk,modified=726186623,pbc=0401000116010C7072696D466C6F61744164640B2F466C6F61745072696D7323012403020000000423031000086973526944617461240323030A01230223012403020000001A23031001012B240323031E0802010123012403020000003123031000076973466C6F6174240323030A032302240302000000452303100005636C61737324030200000051230310000A666C6F61744572726F72240323031E080401032302240523012403020000006C23031000076173466C6F61742403230323052403020000007E23031001012B240323031E0104010223021Einstance,class=Float,selector=*,codeType=rtalk,modified=726186581,pbc=0401000116010D7072696D466C6F61744D756C740B2F466C6F61745072696D7323012403020000000423031000086973526944617461240323030A01230223012403020000001A23031001012A240323031E0802010123012403020000003123031000076973466C6F6174240323030A032302240302000000452303100005636C61737324030200000051230310000A666C6F61744572726F72240323031E080401032302240523012403020000006C23031000076173466C6F61742403230323052403020000007E23031001012A240323031E0104010223021Einstance,class=Float,selector=replaceFrom:to:with:startingAt:,codeType=rtalk,modified=726202921,pbc=040400051604247072696D42797465735265706C61636546726F6D546F576974685374617274696E674174102F42797465537472696E675072696D732C0124092304240623062408230131240A2302240B08010102230A2406230624092305240C23092308230324060200000029230610010361743A2406020000003523061000096173496E746567657224062306230C24060200000047230610020761743A7075743A24064002343123082406020000005A23061001012B240623062408230A40023431020000006F1001012B31240A0101230B020000007E1001013C240623060A0223051Einstance,class=Float,selector=reciprocal,codeType=rtalk,modified=571795337,pbc=040000002301400435312E302402020000000723021001012F240223021Einstance,class=Float,selector=riAsFloat,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Float,selector=arcTan,codeType=rtalk,modified=726186702,pbc=0400000016000F7072696D466C6F617441726354616E0B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=degreesToRadians,codeType=rtalk,modified=571795337,pbc=04000001400434313830230124042C01400633466C6F617415020D7072696D476574476C6F62616C0024020200000012230210000270692402230223042402020000002423021001012A2402020000003023021001012F240223021Einstance,class=Float,selector=//,codeType=rtalk,modified=571795337,pbc=04010002230123022403020000000623031001012F24032303240623062403020000001A23031000097472756E63617465642403230324054002343023062403020000003123031001013C240323030A01230623052403020000004723031001013D2403230309024002343123052403020000005E23031001012D240323031E080301022C012403010301012305240323031Einstance,class=Float,selector=riAsHexString,codeType=rtalk,modified=696187758,pbc=04000002400234382C01400A3342797465417272617915020D7072696D476574476C6F62616C002402020000000E23021001046E65773A240223022405400234382301230524020200000027230210020D7265706C6163653A776974683A2402230524020200000037230210000B6173486578537472696E67240223021Einstance,class=Float,selector=units,codeType=rtalk,modified=571795337,pbc=04000000400131240223021Einstance,class=Float,selector=log10,codeType=rtalk,modified=571795337,pbc=04000000400B35322E333032353835303923012402020000000723021000026C6E2402020000001323021001012F240223021Einstance,class=Float,selector=riEngNotationDigits:,codeType=rtalk,modified=571795337,pbcinstance,class=Float,selector=timesTwoPower:,codeType=rtalk,modified=726187211,pbc=040100001601167072696D466C6F617454696D657354776F506F7765720B2F466C6F61745072696D732302240302000000042303100005636C61737324030200000010230310000A666C6F61744572726F72240323031Einstance,class=Float,selector=almostEqualTo:,codeType=rtalk,modified=571795337,pbc=0401000423022403020000000423031000036162732403230324052303240823012403020000001C2303100003616273240323032406230323082403020000003223031001046D696E3A2403230324084009353130303030302E3023082403020000004923031001012F2403230324072307230623052403020000006123031001012D2403020000006D23031000036162732403020000007923031001023C3D240323031Einstance,class=Float,selector=isFloat,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Float,selector=raisedTo:,codeType=rtalk,modified=726186786,pbc=0401000016010E7072696D466C6F6174506F7765720B2F466C6F61745072696D732302240302000000042303100005636C61737324030200000010230310000A666C6F61744572726F72240323031Einstance,class=Float,selector=cos,codeType=rtalk,modified=726186708,pbc=0400000016000C7072696D466C6F6174436F730B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=printOn:decimalSeparator:,codeType=rtalk,modified=713257846,pbc=040200082C0124062C0124072C0124082C0124092C01240A2C01240B2C01240C230324040200000004230410000A76616C696456616C75652404230409014004316E616E23012404020000001B230410010B6E657874507574416C6C3A240423041E010123032404230424082304240D400435302E30230D2404020000003F23041001013C240423040A02400336343523012404020000005623041001086E6578745075743A240423032404020000006623041000076E6567617465642404230424080102400835352E30652D3131240423042409400435302E3023082404020000008823041001013D240423040A0340023130230240023130240402000000A223041001012C240402000000AE23041001012C240423042301240402000000C0230410010B6E657874507574416C6C3A240423041E01034002343024042304240A0804010540053531302E302308240402000000E523041001012F24042304240840023431230A240402000000FC23041001012B24042304240A010440053531302E3023082404020000011523041001023E3D2404230409050806010740053531302E3023082404020000013023041001012A24042304240840023431230A2404020000014723041001012D24042304240A0106400435312E3023082404020000016023041001013C240423040907230923082404020000017623041001012B24042304240840053531302E3023082404020000018D23041001023E3D240423040A0840053531302E302308240402000001A423041001012F24042304240840023431230A240402000001BB23041001012B24042304240A010840023437230A240402000001D423041001013E2404230409094003342D37230A240402000001EB23041001013C24042304090A40023430230A2404020000020223041001013C240423040A0B230A400234372404020000021923041001012B2404020000022523041000076173466C6F61742404230440053531302E30240402000002382304100109726169736564546F3A2404230423082404020000024A23041001012A24042304240B40023430230B2404020000026123041000097472756E636174656424042304230B2404020000027323041001012D24042304240D230A2404020000028723041000076E6567617465642404020000029323041000076173466C6F61742404230440053531302E30240402000002A62304100109726169736564546F3A24042304230D240402000002B823041001012A240402000002C423041000097472756E6361746564240402000002D023041001027E3D2404010B010A01092304090C230A240402000002EA23041000076173466C6F61742404230440053531302E30240402000002FD2304100109726169736564546F3A2404230423082404020000030F23041001012A240423042408230A2404020000032323041000076173466C6F61742404230440053531302E30240402000003362304100109726169736564546F3A2404230423092404020000034823041001012A2404230424094002343024042304240A010C23082404020000036723041000097472756E6361746564240423042407230723082404020000037D23041001012D240423042408230724040200000391230410000B7072696E74537472696E6724042304240C230C240402000003A5230410000473697A652404230440023439240402000003B823041001012D240423042406230C2301240402000003CE230410010B6E657874507574416C6C3A240423022301240402000003E0230410010B6E657874507574416C6C3A2404400234322309240402000003F323041001012A240423042409080D010E2C012404010D40053531302E3023082404020000041423041001012A24042304240823082404020000042823041000097472756E6361746564240423042407230723082404020000043E23041001012D24042304240823072C01400A3343686172616374657215020D7072696D476574476C6F62616C002404020000045B230410010B646967697456616C75653A2404230423012404020000046D23041001086E6578745075743A24044002343123062404020000048023041001012D2404230424062304240D40023430230D2404020000049B23041001013E240423040A0F40033431302309240402000004B223041001012A2404230424092304240D2308230D240402000004CC23041001023C3D2404010F2304090E40023430230A240402000004E523041001013D2404230409104004363130312301240402000004FC23041001086E6578745075743A24042301230A2404020000050E23041001087072696E744F6E3A2404081101102C012404011123031Einstance,class=Float,selector=exponent,codeType=rtalk,modified=726186727,pbc=040000001600117072696D466C6F61744578706F6E656E740B2F466C6F61745072696D732301240202000000042302100005636C61737324020200000010230210000A666C6F61744572726F72240223021Einstance,class=Float,selector=negated,codeType=rtalk,modified=571795337,pbc=040000002301400435302E302402020000000723021001012D240223021Einstance,class=Float,selector=asFloat,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Float,selector=asInteger,codeType=rtalk,modified=571795337,pbc=040000002301240202000000042302100007726F756E646564240223021Einstance,class=Float,selector=im,codeType=rtalk,modified=571795337,pbc=04000000400435302E30240223021Einstance,class=Float,selector=printPaddedTo:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031000096173496E746567657224030200000012230310010E7072696E74506164646564546F3A240323031Einstance,class=IndexedCollection,selector=do:,codeType=rtalk,modified=571795337,pbc=040100024002343124032303240523022403020000000D230310000473697A65240323032406080101022305230224030200000027230310010361743A24032303230124030200000039230310010676616C75653A24034002343123052403020000004C23031001012B2403230324050101230623052403020000006423031001013E240323030A022C01240323021Einstance,class=IndexedCollection,selector=growSize,codeType=rtalk,modified=571795337,pbc=0400000040033431304002343323012402020000000A230210000473697A652402020000001623021001022F2F2402020000002223021001012B240223021Einstance,class=IndexedCollection,selector=findLast:,codeType=rtalk,modified=571795337,pbc=04010001230224030200000004230310000473697A6524032303240508010102230523022403020000001E230310010361743A24032303230124030200000030230310010676616C75653A240323030A032305240323031E01034002343123052403020000005023031001012D24032303240501014002343023052403020000006923031001013E24032303090223022403020000007D23031000116572726F72416273656E744F626A656374240323031Einstance,class=IndexedCollection,selector=copyReplaceFrom:to:with:,codeType=rtalk,modified=571795337,pbc=04030002230323042407400234314002343123012405020000001023051001012D24052305230724050200000022230510020C636F707946726F6D3A746F3A2405020000002E23051001012C240523052407230424084002343123022405020000004923051001012B2405230523042405020000005B230510000473697A652405230523082405020000006D230510020C636F707946726F6D3A746F3A2405230523072405020000007F23051001012C240523051Einstance,class=IndexedCollection,selector=size,codeType=rtalk,modified=571795337,pbc=040000002301240202000000042302100015696D706C656D656E7465644279537562636C617373240223021Einstance,class=IndexedCollection,selector=,codeType=rtalk,modified=571795337,pbcinstance,class=IndexedCollection,selector=replaceFrom:to:with:startingAt:,codeType=rtalk,modified=571795337,pbcinstance,class=IndexedCollection,selector=with:do:,codeType=rtalk,modified=571795337,pbcinstance,class=IndexedCollection,selector=reverseDo:,codeType=rtalk,modified=571795337,pbc=04010001230224030200000004230310000473697A6524032303240508010102230523022403020000001E230310010361743A24032303230124030200000030230310010676616C75653A24034002343123052403020000004323031001012D24032303240501014002343023052403020000005C23031001013E2403230309022C01240323021Einstance,class=IndexedCollection,selector=indexOf:ifAbsent:,codeType=rtalk,modified=571795337,pbc=04020002230324040200000004230410000473697A65240423042407400234312404230424060801010223012306230324040200000029230410010361743A2404020000003523041001013D240423040A032306240423041E01034002343123062404020000005523041001012B2404230424060101230723062404020000006D23041001023C3D240423040902230224040200000081230410000576616C7565240423041Einstance,class=IndexedCollection,selector=copyWithout:,codeType=rtalk,modified=571795337,pbcinstance,class=IndexedCollection,selector=do:ifFirst:,codeType=rtalk,modified=568320621,pbcinstance,class=IndexedCollection,selector=accessEmptyCollection,codeType=rtalk,modified=571795337,pbc=0400000040183174686520636F6C6C656374696F6E20697320656D70747923012402020000000723021001066572726F723A240223021Einstance,class=IndexedCollection,selector=copyFrom:to:,codeType=rtalk,modified=571795337,pbc=0402000240023431230123022404020000000923041001012D2404020000001523041001012B240423042406230623032404020000002B2304100007737065636965732404020000003723041001046E65773A24042304240740023431230623032301230724040200000054230410041F7265706C61636546726F6D3A746F3A776974683A7374617274696E6741743A240423041Einstance,class=IndexedCollection,selector=indexFromLastOf:,codeType=rtalk,modified=571795337,pbc=0601000281002301260125011800012302240302000000162303100219696E64657846726F6D4C6173744F663A6966416273656E743A240323031E050100800040023430240223021Finstance,class=IndexedCollection,selector=errorInBounds:,codeType=rtalk,modified=571795337,pbc=0401000123022405402131206973206F757473696465206F6620636F6C6C656374696F6E20626F756E647323012403020000000B230310000B7072696E74537472696E6724032303400831696E6465783A202403020000001E23031001012C2403020000002A23031001012C2403230323052403020000003C23031001066572726F723A240323031Einstance,class=IndexedCollection,selector=atAllPut:,codeType=rtalk,modified=571795337,pbc=04010001230224054002343123022403020000000B230310000473697A6524032303230123052403020000001F230310031A7265706C61636546726F6D3A746F3A776974684F626A6563743A240323021Einstance,class=IndexedCollection,selector=hash,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000473697A65240223021Einstance,class=IndexedCollection,selector=indexFromLastOf:ifAbsent:,codeType=rtalk,modified=571795337,pbc=04020001230324040200000004230410000473697A652404230424060801010223012306230324040200000020230410010361743A2404020000002C23041001013D240423040A032306240423041E01034002343123062404020000004C23041001012D24042304240601014002343123062404020000006523041001023E3D240423040902230224040200000079230410000576616C7565240423041Einstance,class=IndexedCollection,selector=any,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000056669727374240223021Einstance,class=IndexedCollection,selector=riAsCsv,codeType=rtalk,modified=571795337,pbc=0600000401002C0126034001312C01400C33577269746553747265616D15020D7072696D476574476C6F62616C002402020000000E23021001036F6E3A24022302260118010123012402020000006E2302100103646F3A24022C01250124020200000080230210010B6261636B75704F7665723A24022501240202000000902302100008636F6E74656E7473240223021E050101000123012403230326032501240525032403020000003623031000086173537472696E6724032303230524030200000048230310010B6E657874507574416C6C3A2403400336343425012403020000005B23031001086E6578745075743A240323031Einstance,class=IndexedCollection,selector=checkIndex:,codeType=rtalk,modified=571795337,pbc=0401000023012403020000000423031000096973496E7465676572240323030901402C31496E646578656420636F6C6C656374696F6E732061726520696E646578656420627920696E74656765727323022403020000001B23031001066572726F723A240323031E010140023431230224030200000033230310000473697A6524032303230124030200000045230310020C6265747765656E3A616E643A240323030902230123022403020000005B230310010E6572726F72496E426F756E64733A240323031E080301022C012403010323021Einstance,class=IndexedCollection,selector=copyWith:,codeType=rtalk,modified=571795337,pbc=0401000123022405230123022403020000000A230310000773706563696573240302000000162303100105776974683A2403230323052403020000002823031001012C240323031Einstance,class=IndexedCollection,selector=findFirst:,codeType=rtalk,modified=571795337,pbc=04010002230224030200000004230310000473697A6524032303240640023431240323032405080101022305230224030200000027230310010361743A24032303230124030200000039230310010676616C75653A240323030A032305240323031E01034002343123052403020000005923031001012B2403230324050101230623052403020000007123031001023C3D24032303090223022403020000008523031000116572726F72416273656E744F626A656374240323031Einstance,class=IndexedCollection,selector=replaceFrom:to:with:,codeType=rtalk,modified=571795337,pbc=0403000140023431230123022405020000000923051001012D2405020000001523051001012B240523052407230324050200000029230510000473697A652405230523072405020000003B23051001013D2405230509014026317265706C6163656D656E7420636F6C6C656374696F6E206861732077726F6E672073697A6523042405020000005223051001066572726F723A240523051E010123012302230340023431230424050200000070230510041F7265706C61636546726F6D3A746F3A776974683A7374617274696E6741743A240523041Einstance,class=IndexedCollection,selector=atAll:put:,codeType=rtalk,modified=571795337,pbc=0602000441002C01260123032604230126032302260218010125032404020000002B2304100103646F3A240423031E0501014000230124032303260125012502250424030200000018230310020761743A7075743A240323031Einstance,class=IndexedCollection,selector==,codeType=rtalk,modified=571795337,pbcinstance,class=IndexedCollection,selector=asArrayOfSubstrings,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=IndexedCollection,selector=indexOf:startingAt:ifAbsent:,codeType=rtalk,modified=571795337,pbc=04030002230424050200000004230510000473697A6524052305240823022405230524070801010223012307230424050200000028230510010361743A2405020000003423051001013D240523050A032307240523051E01034002343123072405020000005423051001012B2405230524070101230823072405020000006C23051001023C3D240523050902230324050200000080230510000576616C7565240523051Einstance,class=IndexedCollection,selector=replaceFrom:to:withObject:,codeType=rtalk,modified=571795337,pbc=0403000123012405230524070801010223072303230424050200000014230510020761743A7075743A24054002343123072405020000002723051001012B2405230524070101230223072405020000003F23051001023C3D2405230509022303240523051Einstance,class=IndexedCollection,selector=do:ifLast:,codeType=rtalk,modified=571795337,pbcinstance,class=IndexedCollection,selector=rejectComments,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=IndexedCollection,selector=includes:,codeType=rtalk,modified=571795337,pbc=0401000240023431230224030200000007230310000473697A652403020000001323031001012B24032303240508010102230523022403020000002D230310010361743A2403230323012403020000003F23031001013D240323030A032C02240323031E080401032C012403010401014002343123052403020000006923031001012D240323032405230324064002343023062403020000008423031001013E2403230309022C03240323031Einstance,class=IndexedCollection,selector=last,codeType=rtalk,modified=571795337,pbc=0400000123012402020000000423021000076973456D707479240223020A012301240202000000182302100015616363657373456D707479436F6C6C656374696F6E240223021E010123012404230124020200000031230210000473697A6524022302230424020200000043230210010361743A240223021Einstance,class=IndexedCollection,selector=indexOf:,codeType=rtalk,modified=571795337,pbc=0601000281002301260125011800012302240302000000162303100211696E6465784F663A6966416273656E743A240323031E050100800040023430240223021Finstance,class=IndexedCollection,selector=copyAllFrom:,codeType=rtalk,modified=571795337,pbc=0401000123022405230123022403020000000A230310000473697A652403230323052403020000001C230310020C636F707946726F6D3A746F3A240323031Einstance,class=IndexedCollection,selector=grow,codeType=rtalk,modified=571795337,pbc=04000003230124020200000004230210000473697A6524022302240423012402020000001823021000077370656369657324022302240623012402020000002C230210000867726F7753697A652402230223042402020000003E23021001012B2402230223062402020000005023021001046E65773A24022302240540023431230124020200000067230210000473697A6524022302230123052402020000007B23021003147265706C61636546726F6D3A746F3A776974683A2402230523012402020000008D23021001076265636F6D653A240223011Einstance,class=IndexedCollection,selector=first,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076973456D707479240223020A012301240202000000182302100015616363657373456D707479436F6C6C656374696F6E240223021E010140023431230124020200000030230210010361743A240223021Einstance,class=IndexedCollection,selector=reversed,codeType=rtalk,modified=571795337,pbc=0400000023012C01400B335265616453747265616D15020D7072696D476574476C6F62616C002402020000000D23021001036F6E3A24020200000019230210000F72657665727365436F6E74656E7473240223021Einstance,class=IndexedCollection,selector=indexOfCollection:,codeType=rtalk,modified=571795337,pbc=040100052C012406230124030200000004230310000473697A6524032303240840023431230823022403020000001D230310000473697A652403020000002923031001012D2403020000003523031001012B24032303240740023431240323032405080101022305230224030200000058230310010361743A2403230324094002343123012403020000006F230310010361743A2403230323092403020000008123031001013D240323030A034002343224032303240608040105400234312306240302000000A523031001012B240323032406010423082306240302000000BD23031001023C3D240323030A06230224094002343123062305240302000000DA23031001012B240302000000E623031001012D240323032309240302000000F8230310010361743A240323032409230623012403020000010E230310010361743A2403230323092403020000012023031001013D2403010623030905230823062403020000013823031001013E240323030A072305240323031E080801072C012403010801034002343123052403020000016223031001012B2403230324050101230723052403020000017A23031001023C3D24032303090240023430240323031Einstance,class=IndexedCollection,selector=indexFromLastOf:startingAt:ifAbsent:,codeType=rtalk,modified=571795337,pbc=0403000123022405230524070801010223012307230424050200000014230510010361743A2405020000002023051001013D240523050A032307240523051E01034002343123072405020000004023051001012D24052305240701014002343123072405020000005923051001023E3D24052305090223032405020000006D230510000576616C7565240523051Einstance,class=IndexedCollection,selector=indexOfIgnoreCase:,codeType=rtalk,modified=571795337,pbc=04010002230224030200000004230310000473697A65240323032406400234312403230324050801010223012305230224030200000029230310010361743A240302000000352303100111657175616C7349676E6F7265436173653A240323030A032305240323031E01034002343123052403020000005523031001012B2403230324050101230623052403020000006D23031001023C3D24032303090240023430240323031Einstance,class=RtBlock1Arg,selector=value:,codeType=rtalk,modified=726196882,pbc=040100001601137072696D426C6F636B496E766F6B65576974680C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Number,selector=sqrt,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F617424020200000010230210000473717274240223021Einstance,class=Number,selector=sin,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F617424020200000010230210000373696E240223021Einstance,class=Number,selector=random,codeType=rtalk,modified=571795337,pbc=040000012C014007334E756D62657215020D7072696D476574476C6F62616C002402020000000B230210000672616E646F6D240223022404230123042402020000002123021001012A240223021Einstance,class=Number,selector=mag,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Number,selector=max,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Number,selector=riIsFloat,codeType=rtalk,modified=571795337,pbc=040000002C03240223021Einstance,class=Number,selector=min,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Number,selector=arcCos,codeType=rtalk,modified=571795337,pbc=04000001400234322C01400633466C6F617415020D7072696D476574476C6F62616C002402020000000E230210000270692402020000001A23021001012F24022302240423012402020000002E230210000661726353696E2402230223042402020000004023021001012D240223021Einstance,class=Number,selector=printHex:,codeType=rtalk,modified=571795337,pbc=040100062C0124062C012407400234312302240302000000072303100009626173696353697A652403020000001323031001012B2403230324054002343131240823022403020000002D2303100009626173696353697A652403230324090801010223082403230324072302240A230723052403020000005323031001012D24032303230A240302000000652303100108626173696341743A2403230324062301240A4003342D34230624030200000080230310010962697453686966743A2403020000008C230310000E617348657843686172616374657224032303230A2403020000009E23031001086E6578745075743A2403230A240A2306240302000000B2230310000E617348657843686172616374657224032303230A240302000000C423031001086E6578745075743A240323084002343102000000D51001012B3124080101230902000000E41001013C240323030A022301240323031Einstance,class=Number,selector=@,codeType=rtalk,modified=571795337,pbc=0401000123012C01400633506F696E7415020D7072696D476574476C6F62616C002403020000000D23031000036E657724032303240523022305240302000000232303100102783A24032305240302000000332303100102793A240323031Einstance,class=Number,selector=printOn:,codeType=rtalk,modified=571795337,pbc=040100002302240302000000042303100015696D706C656D656E7465644279537562636C617373240323031Einstance,class=Number,selector=cos,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F6174240202000000102302100003636F73240223021Einstance,class=Number,selector=to:,codeType=rtalk,modified=571795337,pbc=04010000230223012C01400933496E74657276616C15020D7072696D476574476C6F62616C002403020000000F230310020866726F6D3A746F3A240323031Einstance,class=Number,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Number,selector=floor,codeType=rtalk,modified=571795337,pbc=040000004002343123012402020000000723021001022F2F240223021Einstance,class=Number,selector=raisedToInteger:,codeType=rtalk,modified=706058733,pbcinstance,class=Number,selector=isNumber,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Number,selector=exp,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F6174240202000000102302100003657870240223021Einstance,class=Number,selector=radiansToDegrees,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F617424020200000010230210001072616469616E73546F44656772656573240223021Einstance,class=Number,selector=truncateTo:,codeType=rtalk,modified=571795337,pbc=0401000023012301230224030200000008230310010471756F3A2403020000001423031001012A240323031Einstance,class=Number,selector=ln,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F61742402020000001023021000026C6E240223021Einstance,class=Number,selector=squared,codeType=rtalk,modified=571795337,pbc=04000000230123012402020000000623021001012A240223021Einstance,class=Number,selector=even,codeType=rtalk,modified=571795337,pbc=04000000400234304002343223012402020000000A23021001025C5C2402020000001623021001013D240223021Einstance,class=Number,selector=/,codeType=rtalk,modified=571795337,pbc=040100002302240302000000042303100015696D706C656D656E7465644279537562636C617373240323031Einstance,class=Number,selector=to:by:,codeType=rtalk,modified=571795337,pbc=040200002303230123022C01400933496E74657276616C15020D7072696D476574476C6F62616C0024040200000011230410030B66726F6D3A746F3A62793A240423041Einstance,class=Number,selector=-,codeType=rtalk,modified=571795337,pbc=040100002302240302000000042303100015696D706C656D656E7465644279537562636C617373240323031Einstance,class=Number,selector=tan,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F617424020200000010230210000374616E240223021Einstance,class=Number,selector=+,codeType=rtalk,modified=571795337,pbc=040100002302240302000000042303100015696D706C656D656E7465644279537562636C617373240323031Einstance,class=Number,selector=*,codeType=rtalk,modified=571795337,pbc=040100002302240302000000042303100015696D706C656D656E7465644279537562636C617373240323031Einstance,class=Number,selector=reciprocal,codeType=rtalk,modified=571795337,pbc=040000002301240202000000042302100015696D706C656D656E7465644279537562636C617373240223021Einstance,class=Number,selector=odd,codeType=rtalk,modified=571795337,pbc=04000000400234314002343223012402020000000A23021001025C5C2402020000001623021001013D240223021Einstance,class=Number,selector=to:by:do:,codeType=rtalk,modified=571795337,pbc=0403000123042405230524074002343023022405020000000F23051001013E240523050A01080201032307230324050200000029230510010676616C75653A2405230223072405020000003B23051001012B2405230524070102230123072405020000005323051001023C3D2405230509032C01240508040101080501062307230324050200000075230510010676616C75653A2405230223072405020000008723051001012B2405230524070105230723012405020000009F23051001023C3D2405230509062C012405010423041Einstance,class=Number,selector=numerator,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Number,selector=quo:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031001012F2403020000001223031000097472756E6361746564240323031Einstance,class=Number,selector=printFraction:decimalSeparator:,codeType=rtalk,modified=571795337,pbcinstance,class=Number,selector=overflow:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031000036162732403020000001223031001013E240323031Einstance,class=Number,selector=rounded,codeType=rtalk,modified=571795337,pbc=0400000140023432230123012402020000000923021001012B24022302240423012402020000001D23021000047369676E2402230223042402020000002F23021001012B2402020000003B230210010471756F3A240223021Einstance,class=Number,selector=abs,codeType=rtalk,modified=571795337,pbc=040000004002343023012402020000000723021001013C240223020A0123012402020000001B23021000076E656761746564240223021E01012301240223021Einstance,class=Number,selector=arcTan,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F617424020200000010230210000661726354616E240223021Einstance,class=Number,selector=//,codeType=rtalk,modified=571795337,pbc=040100002302240302000000042303100015696D706C656D656E7465644279537562636C617373240323031Einstance,class=Number,selector=negative,codeType=rtalk,modified=571795337,pbc=040000004002343023012402020000000723021001013C240223021Einstance,class=Number,selector=log10,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F61742402020000001023021000056C6F673130240223021Einstance,class=Number,selector=ceiling,codeType=rtalk,modified=571795337,pbc=040000014002343123012402020000000723021001022F2F240223022404230123042402020000001D23021001013D240223020A012304240223021E01014002343123042402020000003D23021001012B240223021Einstance,class=Number,selector=sign,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000107374726963746C79506F736974697665240223020A0140023431240223021E010123012402020000002223021000086E65676174697665240223020A024003342D31240223021E010240023430240223021Einstance,class=Number,selector=higherOf:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031001046D61783A240323031Einstance,class=Number,selector=timesTwoPower:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031000076173466C6F617424030200000012230310010E74696D657354776F506F7765723A240323031Einstance,class=Number,selector=rem:,codeType=rtalk,modified=571795337,pbc=04010001230224052301230123022403020000000C230310010471756F3A2403020000001823031001012A2403230323052403020000002A23031001012D240323031Einstance,class=Number,selector=deepCopy,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Number,selector=positive,codeType=rtalk,modified=571795337,pbc=040000004002343023012402020000000723021001023E3D240223021Einstance,class=Number,selector=printRounded:,codeType=rtalk,modified=571795337,pbcinstance,class=Number,selector=denominator,codeType=rtalk,modified=571795337,pbc=0400000040023431240223021Einstance,class=Number,selector=raisedTo:,codeType=rtalk,modified=571795337,pbc=0401000023022403020000000423031000026C6E2403230323012403020000001623031001012A240302000000222303100003657870240323031Einstance,class=Number,selector=log,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076173466C6F61742402020000001023021000056C6F6731302402230240053532302E302402020000002323021001012A240223021Einstance,class=Number,selector=roundTo:,codeType=rtalk,modified=571795337,pbc=0401000123022403020000000423031000086E65676174697665240323030A012301230224054002343223012403020000002123031001012F2403230323052403020000003323031001012D2403020000003F230310010B7472756E63617465546F3A240323031E080201012301230224054002343223012403020000005F23031001012F2403230323052403020000007123031001012B2403020000007D230310010B7472756E63617465546F3A240323031E010223021Einstance,class=Number,selector=arcSin,codeType=rtalk,modified=571795337,pbcinstance,class=Number,selector=\\,codeType=rtalk,modified=571795337,pbc=04010001230224052301230123022403020000000C23031001022F2F2403020000001823031001012A2403230323052403020000002A23031001012D2403020000003623031000097472756E6361746564240323031Einstance,class=Number,selector=to:do:,codeType=rtalk,modified=571795337,pbc=040200012303240423042406080101022306230224040200000012230410010676616C75653A24044002343123062404020000002523041001012B2404230424060101230123062404020000003D23041001023C3D2404230409022C01240423031Einstance,class=Number,selector=negated,codeType=rtalk,modified=571795337,pbc=040000002301240202000000042302100015696D706C656D656E7465644279537562636C617373240223011Einstance,class=Number,selector=riIsNumber,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Number,selector=strictlyPositive,codeType=rtalk,modified=571795337,pbc=040000004002343023012402020000000723021001013E240223021Einstance,class=Number,selector=riIsNumeric,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Number,selector=printFraction:,codeType=rtalk,modified=673828400,pbc=0401000023014002312E230224030200000009230310021F7072696E744672616374696F6E3A646563696D616C536570617261746F723A240323031Einstance,class=Number,selector=log:,codeType=rtalk,modified=571795337,pbc=0401000123022403020000000423031000076173466C6F61742403020000001023031000026C6E24032303240523012403020000002423031000076173466C6F61742403020000003023031000026C6E2403230323052403020000004223031001012F240323031Einstance,class=ByteArray,selector=riAsHexString,codeType=rtalk,modified=670615650,pbcinstance,class=ByteArray,selector=replaceFrom:to:with:startingAt:,codeType=rtalk,modified=726202137,pbcinstance,class=ByteArray,selector=atByte:,codeType=rtalk,modified=614003552,pbc=040100002301230224030200000006230310010361743A240323031Einstance,class=ByteArray,selector=replaceFrom:to:withAddress:startingAt:,codeType=rtalk,modified=571795337,pbc=04040000230123022303230423052406020000000C230610041F7265706C61636546726F6D3A746F3A776974683A7374617274696E6741743A240623061Einstance,class=ByteArray,selector=replace:with:,codeType=rtalk,modified=726202119,pbc=040200001602197072696D42797465735265706C616365436F756E7457697468102F42797465537472696E675072696D7323022404020000000423041000126973446F75626C6542797465537472696E67240423040A012301230223032404020000001C23041002127265706C61636542797465733A776974683A240423041E0101230324040200000031230410000F7072696D69746976654661696C6564240423041Einstance,class=ByteArray,selector=bitXor:,codeType=rtalk,modified=670615650,pbc=040100052C0124054002343131240623022403020000000A230310000473697A652403230324070801010223062403230324052302240823052305230224030200000032230310010361743A2403230324092305230124030200000048230310010361743A2403230323092403020000005A2303100107626974586F723A2403230323082403020000006C230310020761743A7075743A2403230640023431020000007D1001012B31240601012307020000008C1001013C240323030A0223021Einstance,class=ByteArray,selector=isByteArray,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=ByteArray,selector=bitOr:,codeType=rtalk,modified=670615650,pbc=040100052C0124054002343131240623022403020000000A230310000473697A652403230324070801010223062403230324052302240823052305230224030200000032230310010361743A2403230324092305230124030200000048230310010361743A2403230323092403020000005A23031001066269744F723A2403230323082403020000006C230310020761743A7075743A2403230640023431020000007D1001012B31240601012307020000008C1001013C240323030A0223021Einstance,class=ByteArray,selector=atByte:put:,codeType=rtalk,modified=614003562,pbc=0402000023012302230324040200000008230410020761743A7075743A240423041Einstance,class=ByteArray,selector=findByte:startingAt:,codeType=rtalk,modified=726202396,pbc=0402000016020D7072696D4D6174636842797465102F42797465537472696E675072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=ByteArray,selector=bitAnd:,codeType=rtalk,modified=670615650,pbc=040100052C0124054002343131240623022403020000000A230310000473697A652403230324070801010223062403230324052302240823052305230224030200000032230310010361743A2403230324092305230124030200000048230310010361743A2403230323092403020000005A2303100107626974416E643A2403230323082403020000006C230310020761743A7075743A2403230640023431020000007D1001012B31240601012307020000008C1001013C240323030A0223021Einstance,class=ByteArray,selector=hash,codeType=rtalk,modified=726202566,pbc=0400000016000E7072696D537472696E6748617368102F42797465537472696E675072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=ByteArray,selector=grow:,codeType=rtalk,modified=741564529,pbc=0401000016010E7072696D4F626A65637447726F770C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=ByteArray,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=04000001230124044002343123012402020000000B230210000473697A652402230223042402020000001D230210020C636F707946726F6D3A746F3A240223021Einstance,class=ByteArray,selector=asByteArray,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=ByteArray,selector=findPattern:startingAt:,codeType=rtalk,modified=726202406,pbc=040200001602147072696D4D61746368427974655061747465726E102F42797465537472696E675072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=ByteArray,selector=replaceBytesFrom:to:with:startingAt:,codeType=rtalk,modified=726202131,pbcinstance,class=ByteArray,selector=<,codeType=rtalk,modified=571795337,pbc=04010002230224030200000004230310000473697A65240323032405230124030200000018230310000473697A652403230323052403020000002A23031001013C240323030A012C02240323031E010108020103230523022403020000004D230310010361743A2403230324062305230124030200000063230310010361743A2403230323062403020000007523031001023E3D240323030A042C03240323031E01044002343123052403020000009523031001012D2403230324050102400234302305240302000000AE23031001023C3D240323030A032C02240323031Einstance,class=ByteArray,selector=fromBase36From:to:,codeType=rtalk,modified=670615650,pbcinstance,class=ByteArray,selector=>,codeType=rtalk,modified=571795337,pbc=04010002230224030200000004230310000473697A65240323032405230124030200000018230310000473697A652403230323052403020000002A23031001013C240323030A012C03240323031E010108020103230523022403020000004D230310010361743A2403230324062305230124030200000063230310010361743A2403230323062403020000007523031001023C3D240323030A042C03240323031E01044002343123052403020000009523031001012D2403230324050102400234302305240302000000AE23031001023C3D240323030A032C02240323031Einstance,class=ByteArray,selector=asString,codeType=rtalk,modified=571795337,pbc=040000012C01400733537472696E6715020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A240223022404230124020200000035230210000473697A65240223022301230424020200000049230210020D7265706C6163653A776974683A240223021Einstance,class=ByteArray,selector=replaceBase36:startingAt:to:,codeType=rtalk,modified=670615650,pbcinstance,class=Collection,selector=removeAll:,codeType=rtalk,modified=571795337,pbc=0601000341002C01260123022603230126021801012502240302000000292303100103646F3A24032502240323031E050101400023012403230326012501250324030200000016230310010772656D6F76653A240323031Einstance,class=Collection,selector=do:,codeType=rtalk,modified=571795337,pbc=040100002302240302000000042303100015696D706C656D656E7465644279537562636C617373240323031Einstance,class=Collection,selector=errorAbsentObject,codeType=rtalk,modified=571795337,pbc=040000004020316F626A656374206973206E6F7420696E2074686520636F6C6C656374696F6E23012402020000000723021001066572726F723A240223021Einstance,class=Collection,selector=asArray,codeType=rtalk,modified=571795337,pbc=0600000401012C0126032C01400633417272617915020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A2402230226014002343124022302260218010123012402020000007C2302100103646F3A24022501240223021E0501010000230124032303260325022503250124030200000052230310020761743A7075743A24034002343125022403020000006523031001012B24032303260223031Einstance,class=Collection,selector=riSepStringBy:,codeType=rtalk,modified=571795337,pbcinstance,class=Collection,selector=errorNotIndexable,codeType=rtalk,modified=571795337,pbc=04000001230124044026317320646F206E6F7420726573706F6E6420746F20696E646578696E67206D6573736167657323012402020000000B2302100005636C6173732402020000001723021000046E616D652402020000002323021001012C2402230223042402020000003523021001066572726F723A240223021Einstance,class=Collection,selector=occurrencesOf:,codeType=rtalk,modified=571795337,pbc=0601000401002C0126012C012602230126034002343018020123022403020000005E230310020C696E6A6563743A696E746F3A240323031E05010200012301240423042601230224042304260225012406250325022404020000002523041001013D240423040A01400234312404080201014002343024040102230423062404020000004B23041001012B240423041Einstance,class=Collection,selector=isCollection,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Collection,selector=detect:,codeType=rtalk,modified=571795337,pbc=06010002410023022602230126012501180001230224030200000021230310020E6465746563743A69664E6F6E653A240323031E050100400025022402020000000E23021000116572726F72416273656E744F626A656374240223021Einstance,class=Collection,selector=riDetectAll:,codeType=rtalk,modified=571795337,pbc=0601000401002C012602230126032C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002403020000000B23031000036E65772403230326011801012302240302000000642303100103646F3A24032501240323031E050101000023012403230326022502250324030200000031230310010676616C75653A240323030A01250225012403020000004723031001046164643A2403080201012C012403010223031Einstance,class=Collection,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=040000012301240202000000042302100007737065636965732402020000001023021000036E657724022302240423012304240202000000262302100107616464416C6C3A24022304240202000000362302100008796F757273656C66240223021Einstance,class=Collection,selector=riDetect:do:ifNone:,codeType=rtalk,modified=571795337,pbc=0603000581002C01260123012604230226032303260218010123042405020000004C2305100103646F3A240525022405020000005C230510000576616C7565240523051E050101800023012403230326012501250424030200000016230310010676616C75653A240323030A01250125032403020000002C230310010676616C75653A240323031F080201012C012403010223031Einstance,class=Collection,selector=detectAll:ifNone:,codeType=rtalk,modified=714277013,pbc=0602000501002C01260223012604230226032C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002404020000000B23041000036E65772404230426011801012303240402000000642304100103646F3A240425012404020000007423041000076973456D707479240423040A03250324040200000088230410000576616C7565240423041E080401032501240423041E010423031E050101000023012403230326022502250424030200000031230310010676616C75653A240323030A01250225012403020000004723031001046164643A2403080201012C012403010223031Einstance,class=Collection,selector=riDetectAll:ifNone:,codeType=rtalk,modified=571795337,pbc=0602000501002C01260223012604230226032C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002404020000000B23041000036E65772404230426011801012303240402000000642304100103646F3A240425012404020000007423041000076973456D707479240423040A03250324040200000088230410000576616C7565240423041E080401032501240423041E010423031E050101000023012403230326022502250424030200000031230310010676616C75653A240323030A01250225012403020000004723031001046164643A2403080201012C012403010223031Einstance,class=Collection,selector=detect:ifNone:,codeType=rtalk,modified=571795337,pbc=0602000481002C012601230126032302260218010123032404020000003E2304100103646F3A240425022404020000004E230410000576616C7565240423041E050101800023012403230326012501250324030200000016230310010676616C75653A240323030A012501240323031F080201012C012403010223031Einstance,class=Collection,selector=addAll:,codeType=rtalk,modified=571795337,pbc=0601000341002C01260123022603230126021801012502240302000000292303100103646F3A24032502240323031E05010140002301240323032601250125032403020000001623031001046164643A240323031Einstance,class=Collection,selector=asSet,codeType=rtalk,modified=571795337,pbc=040000012C0140043353657415020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A24022302240423012304240202000000372302100107616464416C6C3A24022304240202000000472302100008796F757273656C66240223021Einstance,class=Collection,selector=deepCopy,codeType=rtalk,modified=571795337,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E657724022302260118010123012402020000005D2302100103646F3A24022501240223021E05010100012301240323032602250124052502240302000000382303100004636F70792403230323052403020000004A23031001046164643A240323031Einstance,class=Collection,selector=detectAll:,codeType=rtalk,modified=714276974,pbc=0601000401002C012602230126032C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002403020000000B23031000036E65772403230326011801012302240302000000642303100103646F3A24032501240323031E050101000023012403230326022502250324030200000031230310010676616C75653A240323030A01250225012403020000004723031001046164643A2403080201012C012403010223031Einstance,class=Collection,selector=asSortedCollection,codeType=rtalk,modified=571795337,pbc=040000012C01401133536F72746564436F6C6C656374696F6E15020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A24022302240423012304240202000000372302100107616464416C6C3A24022304240202000000472302100008796F757273656C66240223021Einstance,class=Collection,selector=remove:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200002303240402000000042304100015696D706C656D656E7465644279537562636C617373240423041Einstance,class=Collection,selector=collect:,codeType=rtalk,modified=571795337,pbc=0601000401002C012602230126032302240302000000042303100007737065636965732403020000001023031000036E657724032303260118010123022403020000005F2303100103646F3A24032501240323031E0501010001230124032303260225012405250225032403020000003A230310010676616C75653A2403230323052403020000004C23031001046164643A240323031Einstance,class=Collection,selector=notEmpty,codeType=rtalk,modified=571795337,pbc=0400000040023430230124020200000007230210000473697A652402020000001323021001013E240223021Einstance,class=Collection,selector=riDetectAllIfNoneNil:,codeType=rtalk,modified=638919106,pbc=0601000401002C012602230126032C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002403020000000B23031000036E65772403230326011801012302240302000000642303100103646F3A240325012403020000007423031000076973456D707479240323030A032C01240323031E01032501240323031E050101000023012403230326022502250324030200000031230310010676616C75653A240323030A01250225012403020000004723031001046164643A2403080201012C012403010223031Einstance,class=Collection,selector=isNilOrEmpty,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000076973456D707479240223021Einstance,class=Collection,selector=includes:,codeType=rtalk,modified=571795337,pbc=0601000381002C0126012301260218010123022403020000003E2303100103646F3A24032C03240323031E05010180002301240323032601250125022403020000001623031001013D240323030A012C02240323031F080201012C012403010223031Einstance,class=Collection,selector=remove:,codeType=rtalk,modified=571795337,pbc=06010002410023022602230126012501180001230224030200000021230310021072656D6F76653A6966416273656E743A240323031E050100400025022402020000000E23021000116572726F72416273656E744F626A656374240223021Einstance,class=Collection,selector=asSortedCollection:,codeType=rtalk,modified=571795337,pbc=040100012C01401133536F72746564436F6C6C656374696F6E15020D7072696D476574476C6F62616C00240523022403020000000F230310000473697A652403230323052403020000002123031001046E65773A2403230324052301230524030200000037230310010A736F7274426C6F636B3A240323052405230223052403020000004D2303100107616464416C6C3A240323052403020000005D2303100008796F757273656C66240323031Einstance,class=Collection,selector=asBag,codeType=rtalk,modified=571795337,pbc=040000012C0140043342616715020D7072696D476574476C6F62616C002402020000000B23021000036E657724022302240423012304240202000000212302100107616464416C6C3A24022304240202000000312302100008796F757273656C66240223021Einstance,class=Collection,selector=add:,codeType=rtalk,modified=571795337,pbc=040100002302240302000000042303100015696D706C656D656E7465644279537562636C617373240323031Einstance,class=Collection,selector=fullCopy,codeType=rtalk,modified=571795337,pbc=0600000301002C0126022301240202000000042302100007737065636965732402020000001023021000036E657724022302260118010123012402020000005D2302100103646F3A24022501240223021E0501010001230124032303260225012405250224030200000038230310000866756C6C436F70792403230323052403020000004A23031001046164643A240323031Einstance,class=Collection,selector=reject:,codeType=rtalk,modified=571795337,pbc=0601000301002C01260123012602180101230224030200000035230310010773656C6563743A240323031E050101000023012403230326012501250224030200000016230310010676616C75653A2403020000002223031000036E6F74240323031Einstance,class=Collection,selector=select:,codeType=rtalk,modified=571795337,pbc=0601000401002C012602230126032302240302000000042303100007737065636965732403020000001023031000036E65772403230326011801012302240302000000692303100103646F3A24032501240323031E050101000023012403230326022502250324030200000036230310010676616C75653A240323030A01250225012403020000004C23031001046164643A2403080201012C012403010223031Einstance,class=Collection,selector=inject:into:,codeType=rtalk,modified=571795337,pbc=0602000501002C012602230126042302260325042404230426011801012303240402000000372304100103646F3A24042501240423041E0501010000230124032303260225012502250324030200000020230310020C76616C75653A76616C75653A24032303260123031Einstance,class=Collection,selector=isEmpty,codeType=rtalk,modified=571795337,pbc=0400000040023430230124020200000007230210000473697A652402020000001323021001013D240223021Einstance,class=Collection,selector=asOrderedCollection,codeType=rtalk,modified=571795337,pbc=040000012C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A24022302240423012304240202000000372302100107616464416C6C3A24022304240202000000472302100008796F757273656C66240223021Einstance,class=RtClass,selector=structure:,codeType=rtalk,modified=571795337,pbc=04010000230124032303220323021Einstance,class=RtClass,selector=hash,codeType=rtalk,modified=672825775,pbc=04000000210424020200000004230210000468617368240223021Einstance,class=RtClass,selector=isClass,codeType=rtalk,modified=672825860,pbc=040000002C02240223021Einstance,class=RtClass,selector=allSubclasses,codeType=rtalk,modified=652780303,pbcinstance,class=RtClass,selector=subclasses,codeType=rtalk,modified=571795337,pbc=04000000210624020200000004230210000569734E696C240223020A012C01400633417272617915020D7072696D476574476C6F62616C002402020000001F23021000036E6577240223021E080201012106240223021E010223011Einstance,class=RtClass,selector=isBytes,codeType=rtalk,modified=672855195,pbc=04000000400234304002343421032402020000000A2302100107626974416E643A2402020000001623021001027E3D240223021Einstance,class=RtClass,selector=allSubclassesDo:,codeType=rtalk,modified=770952771,pbc=0601000301002C012601230126022302250224030200000006230310010676616C75653A240318010123022403020000003B230310000A737562636C6173736573240302000000472303100103646F3A240323021E0501010000230124032303260125022501240302000000282303100110616C6C537562636C6173736573446F3A240323031Einstance,class=RtClass,selector=removeSubclass:,codeType=rtalk,modified=571795337,pbc=0601000301022301260223022405230224030200000008230310000A737562636C617373657324030200000014230310000561735365742403230324062502180001230624030200000039230310021072656D6F76653A6966416273656E743A24032306240302000000492303100008796F757273656C662403230323052403020000005B230310010B737562636C61737365733A240323021E05010000002C01240223021Einstance,class=RtClass,selector=printOn:,codeType=rtalk,modified=676331086,pbc=0401000023022403020000000423031000046E616D6524032303230124030200000016230310010B6E657874507574416C6C3A240323021Einstance,class=RtClass,selector=shallowCopy,codeType=rtalk,modified=672826200,pbc=040000002301240223021Einstance,class=RtClass,selector=symbol,codeType=rtalk,modified=571795337,pbc=040000002104240223021Einstance,class=RtClass,selector=loadPreferences:,codeType=rtalk,modified=571795337,pbc=0401000023021Einstance,class=RtClass,selector=monitorsTopic:message:,codeType=rtalk,modified=635441203,pbc=040200002303240423041Einstance,class=RtClass,selector=basicNew:,codeType=rtalk,modified=726196513,pbc=040100001601117072696D4F626A6563744E657753697A650C2F4F626A6563745072696D73230224030200000004230310000769734669786564240323030A0123022403020000001823031000116572726F724E6F74496E64657861626C65240323031E010123022403020000002D230310000F7072696D69746976654661696C6564240323031Einstance,class=RtClass,selector=new:,codeType=rtalk,modified=726196621,pbc=040100001601117072696D4F626A6563744E657753697A650C2F4F626A6563745072696D73230224030200000004230310000769734669786564240323030A0123022403020000001823031000116572726F724E6F74496E64657861626C65240323031E010123022403020000002D230310000F7072696D69746976654661696C6564240323031Einstance,class=RtClass,selector=isFixed,codeType=rtalk,modified=681851967,pbc=0400000040023430400334333821032402020000000A2302100107626974416E643A2402020000001623021001013D240223021Einstance,class=RtClass,selector=removeSelector:,codeType=rtalk,modified=571795337,pbc=06010002010023012601250118000123022403020000001523031000106D6574686F6444696374696F6E61727924030200000021230310021372656D6F76654B65793A6966416273656E743A240323021E05010000002C01240223021Einstance,class=RtClass,selector=isBits,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000A6973506F696E746572732402020000001023021000036E6F74240223021Einstance,class=RtClass,selector=isJavaObject,codeType=rtalk,modified=672855305,pbc=0400000040023430400334313621032402020000000A2302100107626974416E643A2402020000001623021001027E3D240223021Einstance,class=RtClass,selector=methodDictionary,codeType=rtalk,modified=744774847,pbc=040000002102240223021Einstance,class=RtClass,selector=addSelector:withMethod:,codeType=rtalk,modified=571795337,pbc=0402000023012C0140073353796D626F6C15020D7072696D476574476C6F62616C002404020000000D230410010D6D757374426553796D626F6C3A24042301230223032404020000002123041000106D6574686F6444696374696F6E6172792404020000002D230410020761743A7075743A240423031Einstance,class=RtClass,selector=superclass:,codeType=rtalk,modified=571795337,pbc=0401000023012C01400633417272617915020D7072696D476574476C6F62616C002403020000000D2303100105776974683A24032303220123021Einstance,class=RtClass,selector=subclassNamed:,codeType=rtalk,modified=744953545,pbcinstance,class=RtClass,selector=sharedVariableString,codeType=rtalk,modified=670615650,pbcinstance,class=RtClass,selector=basicNew,codeType=rtalk,modified=726196506,pbc=0400000016000D7072696D4F626A6563744E65770C2F4F626A6563745072696D73230124020200000004230210000A69735661726961626C65240223020A014002343023012402020000001B230210010962617369634E65773A240223021E0101230124020200000030230210000F7072696D69746976654661696C6564240223021Einstance,class=RtClass,selector=sourceCodeAt:,codeType=rtalk,modified=571795337,pbcinstance,class=RtClass,selector=allSuperclasses,codeType=rtalk,modified=571795337,pbc=0600000401002C0126032C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002402020000000B23021000036E657724022302260118010121012402020000008C2302100103646F3A24022501240223021E0501010001230124032303260325032403020000002F230310000569734E696C24032303090125012405250323052403020000004923031001046164643A24032305240525032403020000005D230310000F616C6C5375706572636C61737365732403230323052403020000006F2303100107616464416C6C3A2403080201012C012403010223031Einstance,class=RtClass,selector=canUnderstand:,codeType=rtalk,modified=771792047,pbc=04010000230123022403020000000623031000106D6574686F6444696374696F6E617279240302000000122303100111696D706C656D656E74734D6574686F643A240323031Einstance,class=RtClass,selector=inheritsFrom:,codeType=rtalk,modified=571795337,pbc=04010001230224032303240508010102230123052403020000001223031001023D3D240323030A032C02240323031E010323052403020000002F230310000A7375706572636C61737324032303240501012C0123052403020000004723031001023D3D240323030A022C03240323031Einstance,class=RtClass,selector=subclasses:,codeType=rtalk,modified=571795337,pbc=0401000023012403020000000423031000076973456D707479240323030A012C0124032303220608020101230124030200000024230310000761734172726179240323032206010223021Einstance,class=RtClass,selector=name,codeType=rtalk,modified=652778422,pbc=0400000021042402020000000423021000086173537472696E67240223021Einstance,class=RtClass,selector=structure,codeType=rtalk,modified=672837209,pbc=040000002103240223021Einstance,class=RtClass,selector=initialize,codeType=rtalk,modified=744952610,pbc=0400000023011Einstance,class=RtClass,selector=loadShortcut:,codeType=rtalk,modified=726029119,pbcinstance,class=RtClass,selector=isVariable,codeType=rtalk,modified=571795337,pbc=040000002301240202000000042302100007697346697865642402020000001023021000036E6F74240223021Einstance,class=RtClass,selector=isFloatArray,codeType=rtalk,modified=672855281,pbc=0400000040023430400334333221032402020000000A2302100107626974416E643A2402020000001623021001027E3D240223021Einstance,class=RtClass,selector=addSubclass:,codeType=rtalk,modified=571795337,pbc=040100012301230224030200000006230310000A737562636C6173736573240302000000122303100109696E636C756465733A240323030A012302240323031E0101230224052301230224030200000035230310000A737562636C6173736573240302000000412303100109636F7079576974683A24032303230524030200000053230310010B737562636C61737365733A24032302230124030200000065230310010B7375706572636C6173733A240323021Einstance,class=RtClass,selector=isPointers,codeType=rtalk,modified=672855215,pbc=04000000400234304002343421032402020000000A2302100107626974416E643A2402020000001623021001013D240223021Einstance,class=RtClass,selector=instancesMethods,codeType=rtalk,modified=744953202,pbc=040000002102240223021Einstance,class=RtClass,selector=errorNotIndexable,codeType=rtalk,modified=571795337,pbc=04000001230124044029317320646F206E6F74206861766520696E646578656420696E7374616E6365207661726961626C657321042402020000000B23021001012C2402230223042402020000001D23021001066572726F723A240223021Einstance,class=RtClass,selector=deepCopy,codeType=rtalk,modified=672825739,pbc=040000002301240223021Einstance,class=RtClass,selector=compiledMethodAt:,codeType=rtalk,modified=571795337,pbc=06010002810023012601250118000123022403020000001523031000106D6574686F6444696374696F6E61727924030200000021230310020C61743A6966416273656E743A240323031E05010080002C01240223021Finstance,class=RtClass,selector=classPool,codeType=rtalk,modified=693265166,pbc=04000000210824020200000004230210000569734E696C240223020A012C01400D33527444696374696F6E61727915020D7072696D476574476C6F62616C002402020000001F23021000036E657724022302220801012108240223021Einstance,class=RtClass,selector=new,codeType=rtalk,modified=726196617,pbc=0400000016000D7072696D4F626A6563744E65770C2F4F626A6563745072696D73230124020200000004230210000A69735661726961626C65240223020A014002343023012402020000001B23021001046E65773A240223021E0101230124020200000030230210000F7072696D69746976654661696C6564240223021Einstance,class=RtClass,selector=rename:,codeType=rtalk,modified=741719062,pbcinstance,class=RtClass,selector=withAllSubclasses,codeType=rtalk,modified=571795337,pbc=0600000301002C01260223012C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002402020000000D2302100105776974683A240223022601180101230124020200000046230210000D616C6C537562636C6173736573240202000000522302100103646F3A24022501240223021E05010100002301240323032602250225012403020000003323031001046164643A240323031Einstance,class=RtClass,selector=isInteger,codeType=rtalk,modified=713240233,pbc=04000000400234304002343121032402020000000A2302100107626974416E643A2402020000001623021001027E3D240223021Einstance,class=RtClass,selector=instancesMethods:,codeType=rtalk,modified=744953411,pbc=04010000230124032303220223021Einstance,class=RtClass,selector=isFloat,codeType=rtalk,modified=713240244,pbc=04000000400234304002343821032402020000000A2302100107626974416E643A2402020000001623021001027E3D240223021Einstance,class=RtClass,selector=hasClassVarNamed:,codeType=rtalk,modified=770876570,pbc=0401000023012302240302000000062303100009636C617373506F6F6C24030200000012230310010C696E636C756465734B65793A240323031Einstance,class=RtClass,selector=selectors,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000106D6574686F6444696374696F6E6172792402020000001023021000046B657973240223021Einstance,class=RtClass,selector=superclass,codeType=rtalk,modified=571795337,pbc=0400000040023431210124020200000007230210010361743A240223021Einstance,class=RtClass,selector=allInstances,codeType=rtalk,modified=726196476,pbc=0400000016001A7072696D4F626A656374416C6C496E7374616E6365735072696D0C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223011Einstance,class=Magnitude,selector=testMH,codeType=rtalk,modified=667476425,pbc=0400000040053435303030240223021Einstance,class=Magnitude,selector=min:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031001013C240323030A012302240323031E080201012301240323031E010223021Einstance,class=Magnitude,selector=between:and:,codeType=rtalk,modified=571795337,pbc=04020000230323012404020000000623041001023C3D240423040A01230223032404020000001C23041001023C3D2404010123041Einstance,class=Magnitude,selector=max:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031001013E240323030A012302240323031E080201012301240323031E010223021Einstance,class=Object,selector=yourself,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=Object,selector=rtLogMsg:,codeType=rtalk,modified=726204222,pbc=040100001601127072696D5772697465546F436F6E736F6C650B2F5274616C6B5072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Object,selector=perform:withArguments:,codeType=rtalk,modified=726196121,pbcinstance,class=Object,selector=hash,codeType=rtalk,modified=726195950,pbc=0400000016000E7072696D4F626A656374486173680C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=Object,selector=perform:with:with:with:,codeType=rtalk,modified=571795337,pbc=040400012305240823012302230323042C01400633417272617915020D7072696D476574476C6F62616C0024060200000017230610030F776974683A776974683A776974683A240623062308240602000000292306100216706572666F726D3A77697468417267756D656E74733A240623061Einstance,class=Object,selector=debugStep:arg:arg:arg:,codeType=rtalk,modified=726203271,pbc=040400001604197072696D4465627567537465705769746857697468576974680B2F44656275675072696D73230524060200000004230610000F7072696D69746976654661696C6564240623061Einstance,class=Object,selector=instVarAt:put:,codeType=rtalk,modified=726196082,pbc=040200001602167072696D4F626A656374496E737456617241745075740C2F4F626A6563745072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=Object,selector=notNil,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Object,selector=class,codeType=rtalk,modified=726196041,pbc=0400000016000F7072696D4F626A656374436C6173730C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=Object,selector=at:put:,codeType=rtalk,modified=726196319,pbc=0402000016020F7072696D4F626A65637441745075740C2F4F626A6563745072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=Object,selector=species,codeType=rtalk,modified=571795337,pbc=040000002301240202000000042302100005636C617373240223021Einstance,class=Object,selector=~~,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031001023D3D2403020000001223031000036E6F74240323031Einstance,class=Object,selector==,codeType=rtalk,modified=726196359,pbc=040100001601157072696D4F626A6563744964656E74457175616C730C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Object,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000116F626A6563745368616C6C6F77436F7079240223021Einstance,class=Object,selector=error:,codeType=rtalk,modified=571795337,pbc=0401000023012C032C014012335269526D7456696577446562756767657215020D7072696D476574476C6F62616C002403020000000F230310020D64656275673A726573756D653A240323021Einstance,class=Object,selector=perform:with:with:with:with:,codeType=rtalk,modified=571795337,pbc=0405000123062409230123022303230423052C01400633417272617915020D7072696D476574476C6F62616C00240702000000192307100414776974683A776974683A776974683A776974683A2407230723092407020000002B2307100216706572666F726D3A77697468417267756D656E74733A240723071Einstance,class=Object,selector===,codeType=rtalk,modified=726196365,pbc=040100001601157072696D4F626A6563744964656E74457175616C730C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Object,selector=debugStep:arg:,codeType=rtalk,modified=726203252,pbc=040200001602147072696D446562756753746570576974684172670B2F44656275675072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=Object,selector=invalidMessage,codeType=rtalk,modified=571795337,pbc=04000000402631696E617070726F707269617465206D65737361676520666F722074686973206F626A65637423012402020000000723021001066572726F723A240223021Einstance,class=Object,selector=respondsTo:,codeType=rtalk,modified=771791854,pbc=040100002301230224030200000006230310000C6D6574686F644C6F6F6B7570240302000000122303100111696D706C656D656E74734D6574686F643A240323031Einstance,class=Object,selector=instVarAt:,codeType=rtalk,modified=726196075,pbc=040100001601137072696D4F626A656374496E737456617241740C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Object,selector=newFromInstance:,codeType=rtalk,modified=741564904,pbc=0401000016011D7072696D4F626A6563744E657746726F6D496E7374616E636553697A650C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Object,selector=size,codeType=rtalk,modified=726196147,pbc=0400000016000E7072696D4F626A65637453697A650C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=Object,selector=~=,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031001013D2403020000001223031000036E6F74240323031Einstance,class=Object,selector=doesNotUnderstand:,codeType=rtalk,modified=710296534,pbc=040100022302240540113122206E6F7420756E64657273746F6F644002312023012403020000000E230310000872656365697665722403020000001A2303100005636C6173732403020000002623031000046E616D6524032303400231222403020000003923031001012C2403020000004523031001012C240323032406230124030200000059230310000873656C6563746F722403230323062403020000006B23031001012C2403020000007723031001012C2403230323052403020000008923031001066572726F723A240323031Einstance,class=Object,selector=at:,codeType=rtalk,modified=726196313,pbc=0401000016010C7072696D4F626A65637441740C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Object,selector=equalsIgnoreCase:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031001013D240323031Einstance,class=Object,selector=debugStep:,codeType=rtalk,modified=726203224,pbc=0401000016010D7072696D4465627567537465700B2F44656275675072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Object,selector=methodLookup,codeType=rtalk,modified=741563270,pbc=040000001600177072696D4F626A656374436C6173734669656C644765740C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=Object,selector=basicAt:put:,codeType=rtalk,modified=726196228,pbc=0402000016020F7072696D4F626A65637441745075740C2F4F626A6563745072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=Object,selector=perform:,codeType=rtalk,modified=571795337,pbc=0401000023014001422302240302000000092303100216706572666F726D3A77697468417267756D656E74733A240323031Einstance,class=Object,selector=newFromInstance,codeType=rtalk,modified=741564848,pbc=040000001600197072696D4F626A6563744E657746726F6D496E7374616E63650C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=Object,selector=halt,codeType=rtalk,modified=571795337,pbc=040000002C01400933527454687265616415020D7072696D476574476C6F62616C002402020000000B230210000B6973446562756767696E6724022302090140113168616C7420656E636F756E74657265642C022C014012335269526D7456696577446562756767657215020D7072696D476574476C6F62616C002402020000002B230210020D64656275673A726573756D653A2402080201012C012402010223011Einstance,class=Object,selector=basicSize,codeType=rtalk,modified=726196241,pbc=0400000016000E7072696D4F626A65637453697A650C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=Object,selector=objectShallowCopy,codeType=rtalk,modified=571795337,pbcinstance,class=Object,selector=debugStep:arg:arg:,codeType=rtalk,modified=726203262,pbc=040300001603157072696D44656275675374657057697468576974680B2F44656275675072696D73230424050200000004230510000F7072696D69746976654661696C6564240523051Einstance,class=Object,selector=riLogMsgQ:,codeType=rtalk,modified=713951366,pbc=04010001400B315452414E5343524950542C01401733526953797374656D4D6573736167654D616E6167657215020D7072696D476574476C6F62616C002403020000000E230310000A6D73674D616E616765722403020000001A230310010D68616E646C65724E616D65643A24032303240523052403020000002E230310000569734E696C240323030901230124030200000042230310000B7072696E74537472696E672403230323052403020000005423031001126D6F6E69746F725472616E7363726970743A240301012301230224030200000068230310010972744C6F674D73673A240323021Einstance,class=Object,selector=copy,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000B7368616C6C6F77436F7079240223021Einstance,class=Object,selector=methodLookup:,codeType=rtalk,modified=741563365,pbc=040100001601177072696D4F626A656374436C6173734669656C645075740C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Object,selector=deepCopy,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000E6F626A65637444656570436F7079240223021Einstance,class=Object,selector=allReferences,codeType=rtalk,modified=726196939,pbc=0400000016001B7072696D4F626A656374416C6C5265666572656E6365735072696D0C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223011Einstance,class=Object,selector=basicHash,codeType=rtalk,modified=726196210,pbc=0400000016000E7072696D4F626A656374486173680C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=Object,selector=primitiveFailed,codeType=rtalk,modified=713726330,pbc=040000004011317072696D6974697665206661696C656423012402020000000723021001066572726F723A240223011Einstance,class=Object,selector=perform:with:with:,codeType=rtalk,modified=571795337,pbc=04030001230424072301230223032C01400633417272617915020D7072696D476574476C6F62616C0024050200000015230510020A776974683A776974683A240523052307240502000000272305100216706572666F726D3A77697468417267756D656E74733A240523051Einstance,class=Object,selector=riLogMsg:,codeType=rtalk,modified=713951383,pbcinstance,class=Object,selector=basicAt:,codeType=rtalk,modified=726196220,pbc=0401000016010C7072696D4F626A65637441740C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=Object,selector=classNameString,codeType=rtalk,modified=741564232,pbc=040000002301240202000000042302100005636C6173732402020000001023021000046E616D65240223021Einstance,class=Object,selector=classSymbol,codeType=rtalk,modified=741563613,pbc=040000002301240202000000042302100005636C61737324020200000010230210000673796D626F6C240223021Einstance,class=Object,selector=perform:with:,codeType=rtalk,modified=571795337,pbc=0402000123032406230123022C01400633417272617915020D7072696D476574476C6F62616C00240402000000132304100105776974683A240423042306240402000000252304100216706572666F726D3A77697468417267756D656E74733A240423041Einstance,class=Object,selector=objectDeepCopy,codeType=rtalk,modified=571795337,pbc=040000062C0124042C0124062C0124072301240202000000042302100005636C617373240223022405230524020200000018230210000A69735661726961626C65240223020A0123012402020000002C2302100009626173696353697A65240223022406230623052402020000004223021001046E65773A240223022404080201014002343024022302240623052402020000006323021000036E65772402230224040102230524020200000079230210000A6973506F696E74657273240223020A03400234313124082305240202000000932302100008696E737453697A65240223022306240202000000A523021001012B240223022409080401052308240223022407230723072301240202000000C9230210010A696E737456617241743A240202000000D52302100004636F7079240223022304240202000000E7230210020E696E737456617241743A7075743A240223084002343102000000F81001012B3124080104230902000001071001013C240223020A05080601034002343131240823062409080701082308240223022407230723072301240202000001372302100108626173696341743A24022302230424020200000149230210020C626173696341743A7075743A2402230840023431020000015A1001012B3124080107230902000001691001013C240223020A0801062304240223021Einstance,class=True,selector=xor:,codeType=rtalk,modified=571795337,pbc=0401000023012403020000000423031000036E6F74240323031Einstance,class=True,selector=hash,codeType=rtalk,modified=571795337,pbc=040000004006343136333832240223021Einstance,class=True,selector=basicHash,codeType=rtalk,modified=571795337,pbc=040000004006343136333832240223021Einstance,class=True,selector=not,codeType=rtalk,modified=571795337,pbc=040000002C03240223021Einstance,class=True,selector=&,codeType=rtalk,modified=571795337,pbc=040100002301240323031Einstance,class=True,selector=or:,codeType=rtalk,modified=571795337,pbc=040100002C02240323031Einstance,class=True,selector=|,codeType=rtalk,modified=571795337,pbc=040100002C02240323031Einstance,class=True,selector=and:,codeType=rtalk,modified=571795337,pbc=04010000230124030200000004230310000576616C7565240323031Einstance,class=FixedSizeCollection,selector=collect:,codeType=rtalk,modified=571795337,pbcinstance,class=FixedSizeCollection,selector=copyReplaceFrom:to:with:,codeType=rtalk,modified=571795337,pbcinstance,class=FixedSizeCollection,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000116F626A6563745368616C6C6F77436F7079240223021Einstance,class=FixedSizeCollection,selector=remove:ifAbsent:,codeType=rtalk,modified=571795337,pbc=04020000230324040200000004230410000E696E76616C69644D657373616765240423041Einstance,class=FixedSizeCollection,selector=add:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000E696E76616C69644D657373616765240323031Einstance,class=FixedSizeCollection,selector=select:,codeType=rtalk,modified=571795337,pbc=040100042C012408230224030200000004230310000473697A6524032303240723072C014012334F726465726564436F6C6C656374696F6E15020D7072696D476574476C6F62616C002403020000002123031001046E65773A24032303240540023431240323032406080101022306230224030200000044230310010361743A240323032408230823012403020000005A230310010676616C75653A240323030A03230823052403020000007023031001046164643A240301034002343123062403020000008523031001012B2403230324060101230723062403020000009D23031001013E240323030A022305240302000000B1230310000473697A65240323032407400234312307230523072302240302000000CE230310000773706563696573240302000000DA23031001046E65773A240302000000E623031003147265706C61636546726F6D3A746F3A776974683A240323031Einstance,class=FixedSizeCollection,selector=deepCopy,codeType=rtalk,modified=571795337,pbc=04000000230124020200000004230210000E6F626A65637444656570436F7079240223021Einstance,class=FixedSizeCollection,selector=size,codeType=rtalk,modified=726196410,pbc=0400000016000E7072696D4F626A65637453697A650C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=FixedSizeCollection,selector=fullCopy,codeType=rtalk,modified=571795337,pbc=040000052C012406230124020200000004230210000473697A65240223022405230523012402020000001A2302100007737065636965732402020000002623021001046E65773A240223022404400234313124072305240808010102230724022302240623062306230124020200000054230210010361743A24020200000060230210000866756C6C436F707924022302230424020200000072230210020761743A7075743A240223074002343102000000831001012B3124070101230802000000921001013C240223020A022304240223021Einstance,class=String,selector=asLowerCase,codeType=rtalk,modified=571795337,pbcinstance,class=String,selector=fileExtension,codeType=rtalk,modified=571795337,pbcinstance,class=String,selector=hash,codeType=rtalk,modified=726202475,pbcinstance,class=String,selector=find:,codeType=rtalk,modified=716243352,pbc=04010001230224052301400234312403020000000B230310000A6E65774D757461626C652403230323052403020000001D230310021766696E645061747465726E3A7374617274696E6741743A240323031Einstance,class=String,selector=riPadStartWith:to:,codeType=rtalk,modified=571795337,pbcinstance,class=String,selector=<,codeType=rtalk,modified=571795337,pbc=04010000230223012403020000000623031001023C3D2403020000001223031000036E6F74240323031Einstance,class=String,selector==,codeType=rtalk,modified=726202173,pbc=040100031601107072696D537472696E67457175616C73102F42797465537472696E675072696D732301240302000000042303100008697353796D626F6C240323030A012C03240323031E01012C03240323031Einstance,class=String,selector=>,codeType=rtalk,modified=571795337,pbc=0401000123022403020000000423031000086173537472696E6724032303240523012403020000001823031000086173537472696E672403230323052403020000002A23031001023C3D2403020000003623031000036E6F74240323031Einstance,class=String,selector=at:put:,codeType=rtalk,modified=726202436,pbc=0402000016020F7072696D537472696E674174507574102F42797465537472696E675072696D732301230324040200000006230410010B636865636B496E6465783A24042302230324040200000018230410010F636865636B4368617261637465723A2404230324040200000028230410000F7072696D69746976654661696C6564240423041Einstance,class=String,selector=rejectComments,codeType=rtalk,modified=571795337,pbc=0400000223012C01400B335265616453747265616D15020D7072696D476574476C6F62616C002402020000000D23021001036F6E3A240223022404400336333423042402020000002423021001057570546F3A24022302240508010102400336333423042402020000003F23021001057570546F3A2402230223052402020000005123021001012C2402230224050101400336333423042402020000006A2302100107736B6970546F3A2402230209022305240223021Einstance,class=String,selector=asStream,codeType=rtalk,modified=571795337,pbc=0400000023012C0140103352656164577269746553747265616D15020D7072696D476574476C6F62616C002402020000000D23021001036F6E3A240223021Einstance,class=String,selector=replaceBytesFrom:to:with:startingAt:,codeType=rtalk,modified=726202326,pbcinstance,class=String,selector=asSymbol,codeType=rtalk,modified=726201986,pbc=040000001600147072696D53796D626F6C46726F6D537472696E67102F42797465537472696E675072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=String,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=04000001230124044002343123012402020000000B230210000473697A652402230223042402020000001D230210020C636F707946726F6D3A746F3A240223021Einstance,class=String,selector=replace:with:,codeType=rtalk,modified=726202340,pbc=040200001602197072696D42797465735265706C616365436F756E7457697468102F42797465537472696E675072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=String,selector=>=,codeType=rtalk,modified=571795337,pbc=0401000023012403020000000423031000086973537472696E67240323030901401831696E76616C696420737472696E6720617267756D656E7423022403020000001B23031001066572726F723A240323031E0101230223012403020000003223031001023C3D240323031Einstance,class=String,selector=<=,codeType=rtalk,modified=726202166,pbc=040100001601167072696D537472696E674C6573734F72457175616C73102F42797465537472696E675072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=String,selector=asArrayOfWordsOrNumbers,codeType=rtalk,modified=571795337,pbcinstance,class=String,selector=fileName,codeType=rtalk,modified=571795337,pbc=040000032C01240523012C01400B335265616453747265616D15020D7072696D476574476C6F62616C002402020000000D23021001036F6E3A240223022404080101022304240202000000252302100008706F736974696F6E2402230224050101400336343623042402020000003E2302100107736B6970546F3A24022302090223052402020000005223021000066E6F744E696C240223020A0323012406400234314002343123052402020000007023021001012D24022302230624020200000082230210020C636F707946726F6D3A746F3A240223021E01032301240223021Einstance,class=String,selector=checkCharacter:,codeType=rtalk,modified=571795337,pbc=04010002230124030200000004230310000B697343686172616374657224032303090123022405400D312063616E277420686F6C642023022403020000001F2303100005636C6173732403020000002B23031000046E616D652403020000003723031001012C24032303240623012403020000004B2303100005636C6173732403020000005723031000046E616D652403230323062403020000006923031001012C2403230323052403020000007B23031001066572726F723A240323031E080201012C012403010223021Einstance,class=String,selector=findPattern:startingAt:,codeType=rtalk,modified=726202537,pbc=040200001602147072696D4D61746368427974655061747465726E102F42797465537472696E675072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=String,selector=size,codeType=rtalk,modified=726203080,pbc=0400000016000E7072696D4F626A65637453697A650C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=String,selector=asUpperCase,codeType=rtalk,modified=571795337,pbcinstance,class=String,selector=,codeType=rtalk,modified=672341615,pbc=040100022C01240523012403020000000423031000086973537472696E67240323032406230124030200000018230310000B69734279746541727261792403230323062403020000002A23031001017C240323030A0123012403230324050802010123012403020000004A23031000086173537472696E672403230324050102230523022403020000006223031101012C13466978656453697A65436F6C6C656374696F6E240323031Einstance,class=String,selector=at:,codeType=rtalk,modified=726202425,pbc=0401000016010C7072696D537472696E674174102F42797465537472696E675072696D732301230224030200000006230310010B636865636B496E6465783A2403230224030200000016230310000F7072696D69746976654661696C6564240323031Einstance,class=String,selector=equals:,codeType=rtalk,modified=726202355,pbc=040100031601107072696D537472696E67457175616C73102F42797465537472696E675072696D732301240302000000042303100008697353796D626F6C240323030A012C03240323031E01012C03240323031Einstance,class=String,selector=equalsIgnoreCase:,codeType=rtalk,modified=571795337,pbc=0401000023012403020000000423031000086973537472696E67240323030A01230123022403020000001A23031001023C3D240323030A02230123022403020000003023031001013C2403020000003C23031000036E6F7424030102010123031Einstance,class=String,selector=replaceFrom:to:with:startingAt:,codeType=rtalk,modified=726202310,pbcinstance,class=String,selector=asByteArray,codeType=rtalk,modified=571795337,pbc=040000012C01400A3342797465417272617915020D7072696D476574476C6F62616C00240423012402020000000F230210000473697A652402230223042402020000002123021001046E65773A240223022404230124020200000035230210000473697A65240223022301230424020200000049230210020D7265706C6163653A776974683A240223021Einstance,class=String,selector=riNumericTrim,codeType=rtalk,modified=571795337,pbcinstance,class=String,selector=asArrayOfSubstrings,codeType=rtalk,modified=673956713,pbcinstance,class=String,selector=isString,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=String,selector=withQuotes,codeType=rtalk,modified=571795337,pbc=040000032C01400C33577269746553747265616D15020D7072696D476574476C6F62616C0024052C01400733537472696E6715020D7072696D476574476C6F62616C0024064002343823012402020000001D230210000473697A652402020000002923021001012B2402230223062402020000003B23021001046E65773A2402230223052402020000004D23021001036F6E3A240223022404230423012402020000006323021001087072696E744F6E3A24022304240202000000732302100008636F6E74656E7473240223021Einstance,class=String,selector=riRemoveChar:,codeType=rtalk,modified=671559480,pbcinstance,class=String,selector=basicAt:put:,codeType=rtalk,modified=726202456,pbc=0402000016020F7072696D537472696E674174507574102F42797465537472696E675072696D732301230324040200000006230410010B636865636B496E6465783A24042302230324040200000018230410010F636865636B4368617261637465723A2404230324040200000028230410000F7072696D69746976654661696C6564240423041Einstance,class=String,selector=before:,codeType=rtalk,modified=571795337,pbcinstance,class=String,selector=findByte:startingAt:,codeType=rtalk,modified=726202530,pbc=0402000016020D7072696D4D6174636842797465102F42797465537472696E675072696D73230324040200000004230410000F7072696D69746976654661696C6564240423041Einstance,class=String,selector=riAsFloat,codeType=rtalk,modified=673288626,pbcinstance,class=String,selector=asString,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=String,selector=asCharacter,codeType=rtalk,modified=571795337,pbc=0400000040023431230124020200000007230210010361743A240223021Einstance,class=String,selector=withCrs,codeType=rtalk,modified=673956734,pbc=040000042C0124044002343131240523012402020000000A230210000473697A652402230224060801010223052402230224044003363932230423012402020000002F230210010361743A2402020000003B23021001013D240223020A032301240723042C01400A3343686172616374657215020D7072696D476574476C6F62616C002402020000005C23021000026C662402230223072402020000006E230210020761743A7075743A2402080401032C012402010423054002343102000000891001012B3124050101230602000000981001013C240223020A0223011Einstance,class=String,selector=asArrayOfSubstringsSepAt:,codeType=rtalk,modified=571795337,pbcinstance,class=String,selector=asFloat,codeType=rtalk,modified=571795337,pbc=0400000023012C01400633466C6F617415020D7072696D476574476C6F62616C002402020000000D230210010B66726F6D537472696E673A240223021Einstance,class=String,selector=trimBlanks,codeType=rtalk,modified=571795337,pbcinstance,class=String,selector=asCompactString,codeType=rtalk,modified=571795337,pbc=040000002301240223021Einstance,class=String,selector=basicAt:,codeType=rtalk,modified=726202446,pbc=0401000016010C7072696D537472696E674174102F42797465537472696E675072696D732301230224030200000006230310010B636865636B496E6465783A2403230224030200000016230310000F7072696D69746976654661696C6564240323031Einstance,class=String,selector=replaceFrom:to:withObject:,codeType=rtalk,modified=726202272,pbc=0403000116031E7072696D42797465735265706C61636546726F6D546F5769746842797465102F42797465537472696E675072696D732303230424050200000006230510010F636865636B4368617261637465723A240523012302230323042405020000001C230511031A7265706C61636546726F6D3A746F3A776974684F626A6563743A13466978656453697A65436F6C6C656374696F6E240523051Einstance,class=String,selector=appendCrLf,codeType=rtalk,modified=673956686,pbc=04000002230124042C01400733537472696E6715020D7072696D476574476C6F62616C0024052C01400A3343686172616374657215020D7072696D476574476C6F62616C002402020000001A23021000026372240223022C01400A3343686172616374657215020D7072696D476574476C6F62616C002402020000003323021000026C6624022302230524020200000045230210020A776974683A776974683A2402230223042402020000005723021001012C240223021Einstance,class=String,selector=asInteger,codeType=rtalk,modified=571795337,pbcinstance,class=Set,selector=includes:,codeType=rtalk,modified=571795337,pbc=0401000121022405230123022403020000000A230310011166696E64456C656D656E74496E6465783A2403230323052403020000001C230310010361743A2403230324052C0123052403020000003223031001023D3D2403020000003E23031000036E6F74240323031Einstance,class=Set,selector=at:put:,codeType=rtalk,modified=571795337,pbc=0402000023032404020000000423041000116572726F724E6F74496E64657861626C65240423041Einstance,class=Set,selector=add:,codeType=rtalk,modified=571795337,pbc=040100022C012405230124030200000004230310000569734E696C240323030A012301240323031E0101230224030200000021230310000A61646A75737453697A652403210224062301230224030200000037230310011166696E64456C656D656E74496E6465783A240323032405230323062403020000004D230310010361743A24030200000059230310000569734E696C240323030A024002343121012403020000007023031001012B24032303220123052301210224030200000088230310020761743A7075743A240323031E01022301240323031Einstance,class=Set,selector=grow,codeType=rtalk,modified=571795337,pbc=0600000301012C01260223012402020000000423021000077370656369657324022302240440033431304002343340023434210224020200000021230210000473697A652402020000002D23021001012A2402020000003923021001022F2F2402020000004523021001012B2402230223042402020000005723021001046E65773A2402230226011801012301240202000000902302100103646F3A24022501240202000000A02302100008636F6E74656E747324022302220223011E05010100002301240323032602250225012403020000007D23031001046164643A240323031Einstance,class=Set,selector=remove:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200022301230324040200000006230410011166696E64456C656D656E74496E6465783A240423042406230621022404020000001C230410010361743A2404230424072C0123072404020000003223041001023D3D240423040A01230224040200000046230410000576616C7565240423041E010123062C0121022404020000005F230410020761743A7075743A24044002343121012404020000007223041001012D2404230422012306230324040200000088230410010B72656861736846726F6D3A24042301240423041Einstance,class=Set,selector=occurrencesOf:,codeType=rtalk,modified=571795337,pbc=0401000023012302240302000000062303100109696E636C756465733A240323030A0140023431240323031E010140023430240323031Einstance,class=Set,selector=size,codeType=rtalk,modified=571795337,pbc=040000002101240223021Einstance,class=Set,selector=findElementIndex:,codeType=rtalk,modified=571795337,pbcinstance,class=Set,selector=adjustSize,codeType=rtalk,modified=571795337,pbc=04000001400334313021012402020000000723021001012A2402230224044002343940023432210224020200000021230210000473697A652402020000002D23021001012D2402020000003923021001012A2402230223042402020000004B23021001023E3D240223020A0123012402020000005F230210000467726F77240223021E080201012C012402010223011Einstance,class=Set,selector=any,codeType=rtalk,modified=571795337,pbc=0600000281002C0126014002343021012402020000000723021001013D240223020A012C01240223021E010118010121022402020000005C2302100103646F3A240223011E0501018000230124032303260125012403020000003423031000066E6F744E696C240323030A022501240323031F080301022C012403010323031Einstance,class=Set,selector=at:,codeType=rtalk,modified=571795337,pbc=0401000023022403020000000423031000116572726F724E6F74496E64657861626C65240323031Einstance,class=Set,selector=initialize:,codeType=rtalk,modified=571795337,pbc=040100004002343024032303220123012C01400633417272617915020D7072696D476574476C6F62616C002403020000001623031001046E65773A24032303220223021Einstance,class=Set,selector=do:,codeType=rtalk,modified=571795337,pbc=040100032C012406210224030200000004230310000473697A6524032303240508010102230521022403020000001E230310010361743A240323032406230324072C0123072403020000003823031001023D3D240323030903230623012403020000004E230310010676616C75653A240301034002343123052403020000006323031001012D24032303240501014002343023052403020000007C23031001013E2403230309022C01240323021Einstance,class=Set,selector=rehashFrom:,codeType=rtalk,modified=571795337,pbcinstance,class=Set,selector=contents,codeType=rtalk,modified=571795337,pbc=040000002102240223021Einstance,class=Array,selector=isArray,codeType=rtalk,modified=571795337,pbc=040000002C02240223021Einstance,class=Array,selector=at:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200004002343023012404020000000723041001013C24042304090123032404020000001B230410000473697A652404230423012404020000002D23041001013E2404010123040A02230224040200000043230410000576616C7565240423041E08030102230123032404020000005C230411010361743A13466978656453697A65436F6C6C656374696F6E240423041E010323031Einstance,class=Array,selector=grow:,codeType=rtalk,modified=741564514,pbc=0401000016010E7072696D4F626A65637447726F770C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=OrderedCollection,selector=addLast:,codeType=rtalk,modified=571795337,pbc=0401000121022405210324030200000008230310000473697A652403230323052403020000001A23031001013D240323030A0123022403020000002E230310000D70757453706163654174456E64240301014002343121022403020000004323031001012B2403230322022102230121032403020000005B230310020761743A7075743A24032301240323031Einstance,class=OrderedCollection,selector=do:,codeType=rtalk,modified=571795337,pbc=040100024002343121012403020000000723031001012D240323032405080101022305210324030200000021230310010361743A24032303230124030200000033230310010676616C75653A240301014002343123052403020000004823031001012B24032303240523032406210223062403020000006223031001023C3D2403230309022C01240323021Einstance,class=OrderedCollection,selector=size,codeType=rtalk,modified=571795337,pbc=04000001210224044002343121012402020000000B23021001012D2402230223042402020000001D23021001012D240223021Einstance,class=OrderedCollection,selector=insert:after:,codeType=rtalk,modified=601145940,pbcinstance,class=OrderedCollection,selector=,codeType=rtalk,modified=571795337,pbc=04010001230124030200000004230310000C6973436F6C6C656374696F6E240323030901401E31417267756D656E74206D757374206265206120436F6C6C656374696F6E23022403020000001B23031001066572726F723A2403010123022403020000002D2303100004636F707924032303240523012305240302000000432303100107616464416C6C3A24032305240302000000532303100008796F757273656C66240323031Einstance,class=OrderedCollection,selector=addFirst:,codeType=rtalk,modified=571795337,pbc=040100004002343121012403020000000723031001013D240323030A0123022403020000001B230310000F707574537061636541745374617274240301014002343121012403020000003023031001012D24032303220121012301210324030200000048230310020761743A7075743A24032301240323031Einstance,class=OrderedCollection,selector=initPositions:,codeType=rtalk,modified=571795337,pbc=04010000400234312403230322014002343024032303220223012C01400633417272617915020D7072696D476574476C6F62616C002403020000001F23031001046E65773A24032303220323021Einstance,class=OrderedCollection,selector=at:put:,codeType=rtalk,modified=571795337,pbc=0402000140023431210123012404020000000923041001012B2404020000001523041001012D240423042406230621012404020000002B23041001023C3D240423040A01210223062404020000004123041001023C3D24040101230409022301230324040200000059230410010E6572726F72496E426F756E64733A240423041E010223062302210324040200000072230410020761743A7075743A24042302240423041Einstance,class=OrderedCollection,selector=add:beforeIndex:,codeType=rtalk,modified=571795337,pbc=04020001230324064002343123022404020000000B23041001012D2404230423062404020000001D230410010E707574537061636541667465723A240423022301230324040200000031230410020761743A7075743A240423041Einstance,class=OrderedCollection,selector=putSpaceAfter:,codeType=rtalk,modified=571795337,pbcinstance,class=OrderedCollection,selector=errorAbsentElement,codeType=rtalk,modified=571795337,pbc=04000000402131617474656D707420746F2061636365737320616273656E7420656C656D656E7423012402020000000723021001066572726F723A240223021Einstance,class=OrderedCollection,selector=startPosition:endPosition:,codeType=rtalk,modified=571795337,pbc=040200002301240423042201230224042304220223031Einstance,class=OrderedCollection,selector=add:after:,codeType=rtalk,modified=571795337,pbc=0402000140023431240423042406080101022306230324040200000013230410010361743A2404230423022404020000002523041001013D240423040A032301230623032404020000003D230410020F6164643A6166746572496E6465783A240423041E01034002343123062404020000005523041001012B240423042406010123032404020000006B230410000473697A652404230423062404020000007D23041001023C3D24042304090223032404020000009123041000126572726F72416273656E74456C656D656E74240423041Einstance,class=OrderedCollection,selector=shallowCopy,codeType=rtalk,modified=571795337,pbc=04000001230124044002343123012402020000000B230210000473697A652402230223042402020000001D230210020C636F707946726F6D3A746F3A240223021Einstance,class=OrderedCollection,selector=putSpaceAtStart,codeType=rtalk,modified=571795337,pbcinstance,class=OrderedCollection,selector=copyFrom:to:,codeType=rtalk,modified=571795337,pbcinstance,class=OrderedCollection,selector=riDetectAll:,codeType=rtalk,modified=639164185,pbc=040100002301230224030200000006230311010C7269446574656374416C6C3A11496E6465786564436F6C6C656374696F6E240323031Einstance,class=OrderedCollection,selector=putSpaceAtEnd,codeType=rtalk,modified=571795337,pbcinstance,class=OrderedCollection,selector=removeIndex:,codeType=rtalk,modified=571795337,pbc=0401000340023431210123012403020000000923031001012B2403020000001523031001012D24032303240540023431210223052403020000002E230310020C6265747765656E3A616E643A24032303090123022403020000004223031000126572726F72416273656E74456C656D656E74240323031E010108020103210324062305210324074002343123052403020000006823031001012B2403230323072403020000007A230310010361743A2403230323062403020000008C230310020761743A7075743A24034002343123052403020000009F23031001012B240323032405010221022305240302000000B723031001013C24032303090321022C012103240302000000CF230310020761743A7075743A2403400234312102240302000000E223031001012D24032303220223021Einstance,class=OrderedCollection,selector=replaceFrom:to:with:,codeType=rtalk,modified=571795337,pbcinstance,class=OrderedCollection,selector=before:,codeType=rtalk,modified=571795337,pbc=06010002C10023022602230126012501180001230224030200000021230310020E6265666F72653A69664E6F6E653A240323031E050100C00025022402020000000E23021000126572726F72416273656E74456C656D656E74240223021Finstance,class=OrderedCollection,selector=riReset,codeType=rtalk,modified=571795337,pbc=0600000241002C01260123012602400234312402230222014002343024022302220218010121032402020000003D230210000473697A652402230240023431240202000000502302100103746F3A2402020000005C2302100103646F3A240223011E0501014000230124032303260125012C0121032403020000002A230310020761743A7075743A240323031Einstance,class=OrderedCollection,selector=addAllFirst:,codeType=rtalk,modified=571795337,pbc=04010002230124030200000004230310000473697A6524032303240508010102230224062305230124030200000022230310010361743A24032303230624030200000034230310010961646446697273743A24034002343123052403020000004723031001012D24032303240501014002343023052403020000006023031001023C3D240323030A022301240323031Einstance,class=OrderedCollection,selector=after:,codeType=rtalk,modified=571795337,pbc=06010002C10023022602230126012501180001230224030200000021230310020D61667465723A69664E6F6E653A240323031E050100C00025022402020000000E23021000126572726F72416273656E74456C656D656E74240223021Finstance,class=OrderedCollection,selector=riRemoveLast,codeType=rtalk,modified=695999254,pbc=040000012C012404210221012402020000000623021001013E240223020A012C01240223021E01012102210324020200000025230210010361743A24022302240421022C0121032402020000003D230210020761743A7075743A24024002343121022402020000005023021001012D2402230222022304240223021Einstance,class=OrderedCollection,selector=remove:ifAbsent:,codeType=rtalk,modified=571795337,pbc=040200022101240423042406080101022306210324040200000012230410010361743A2404230423012404020000002423041001013D240423040A032303240740023431210123062404020000004123041001012D2404020000004D23041001012B2404230423072404020000005F230410010C72656D6F7665496E6465783A24042301240423041E01034002343123062404020000007B23041001012B2404230424060101210223062404020000009323041001023C3D2404230409022302240402000000A7230410000576616C7565240423041Einstance,class=OrderedCollection,selector=removeFirst,codeType=rtalk,modified=571795337,pbc=040000012C012404210221012402020000000623021001013E240223020A0123012402020000001A23021000126572726F72416273656E74456C656D656E74240223021E01012101210324020200000031230210010361743A24022302240421012C01210324020200000049230210020761743A7075743A24024002343121012402020000005C23021001012B2402230222012304240223021Einstance,class=OrderedCollection,selector=add:afterIndex:,codeType=rtalk,modified=571795337,pbc=040200012302230324040200000006230410010E707574537061636541667465723A2404230324064002343123022404020000001D23041001012B240423042301230624040200000031230410020761743A7075743A240423041Einstance,class=OrderedCollection,selector=growTo:,codeType=rtalk,modified=571795337,pbc=0401000123012C01400633417272617915020D7072696D476574476C6F62616C002403020000000D23031001046E65773A2403230324052101210221032101230524030200000029230310041F7265706C61636546726F6D3A746F3A776974683A7374617274696E6741743A2403230524032303220323021Einstance,class=OrderedCollection,selector=includes:,codeType=rtalk,modified=571795337,pbc=040100024002343121012403020000000723031001012D240323032405080101022305210324030200000021230310010361743A2403230323012403020000003323031001013D240323030A032C02240323031E080401032C012403010401014002343123052403020000005D23031001012B24032303240523032406210223062403020000007723031001013E240323030A022C03240323031Einstance,class=OrderedCollection,selector=removeLast,codeType=rtalk,modified=571795337,pbc=040000012C012404210221012402020000000623021001013E240223020A0123012402020000001A23021000126572726F72416273656E74456C656D656E74240223021E01012102210324020200000031230210010361743A24022302240421022C01210324020200000049230210020761743A7075743A24024002343121022402020000005C23021001012D2402230222022304240223021Einstance,class=OrderedCollection,selector=riRemoveFirst,codeType=rtalk,modified=571795337,pbc=040000012C012404210221012402020000000623021001013E240223020A012C01240223021E01012101210324020200000025230210010361743A24022302240421012C0121032402020000003D230210020761743A7075743A24024002343121012402020000005023021001012B2402230222012304240223021Einstance,class=OrderedCollection,selector=grow,codeType=rtalk,modified=571795337,pbc=0400000223012404210324020200000008230210000473697A6524022302240523012402020000001C230210000867726F7753697A652402230223052402020000002E23021001012B24022302230424020200000040230210010767726F77546F3A240223011Einstance,class=OrderedCollection,selector=add:,codeType=rtalk,modified=571795337,pbc=0401000121022405210324030200000008230310000473697A652403230323052403020000001A23031001013D240323030A0123022403020000002E230310000D70757453706163654174456E64240301014002343121022403020000004323031001012B2403230322022102230121032403020000005B230310020761743A7075743A24032301240323031Einstance,class=OrderedCollection,selector=addAllLast:,codeType=rtalk,modified=571795337,pbc=04010003230124030200000004230310000473697A65240323032406400234312403230324050801010223022407230523012403020000002B230310010361743A2403230323072403020000003D23031001086164644C6173743A24034002343123052403020000005023031001012B2403230324050101230623052403020000006823031001023C3D2403230309022301240323031Einstance,class=OrderedCollection,selector=after:ifNone:,codeType=rtalk,modified=571795337,pbc=040200022101240423042406080101022306210324040200000012230410010361743A2404230423012404020000002423041001013D240423040A03210324074002343123062404020000003F23041001012B24042304230724040200000051230410010361743A240423041E01034002343123062404020000006923041001012B2404230424060101210223062404020000008123041001013C240423040902230224040200000095230410000576616C7565240423041Einstance,class=OrderedCollection,selector=add:before:,codeType=rtalk,modified=571795337,pbc=0402000140023431240423042406080101022306230324040200000013230410010361743A2404230423022404020000002523041001013D240423040A032301230623032404020000003D23041002106164643A6265666F7265496E6465783A240423041E01034002343123062404020000005523041001012B240423042406010123032404020000006B230410000473697A652404230423062404020000007D23041001023C3D24042304090223032404020000009123041000126572726F72416273656E74456C656D656E74240423041Einstance,class=OrderedCollection,selector=riAt:put:,codeType=rtalk,modified=571795337,pbc=0402000140023431210123012404020000000923041001012B2404020000001523041001012D240423042406210223062404020000002B23041001013C24042304090121032404020000003F230410000473697A652404230423062404020000005123041001013E240423040A022306230324040200000067230410010767726F77546F3A240401022306240423042202010123062302210324040200000087230410020761743A7075743A24042302240423041Einstance,class=OrderedCollection,selector=before:ifNone:,codeType=rtalk,modified=571795337,pbc=040200024002343121012404020000000723041001012B240423042406080101022306210324040200000021230410010361743A2404230423012404020000003323041001013D240423040A03210324074002343123062404020000004E23041001012D24042304230724040200000060230410010361743A240423041E01034002343123062404020000007823041001012B2404230424060101210223062404020000009023041001023C3D2404230409022302240402000000A4230410000576616C7565240423041Einstance,class=OrderedCollection,selector=at:,codeType=rtalk,modified=571795337,pbc=0401000140023431210123012403020000000923031001012B2403020000001523031001012D240323032405230521012403020000002B23031001023C3D240323030A01210223052403020000004123031001023C3D24030101230309022301230224030200000059230310010E6572726F72496E426F756E64733A240323031E01022305210324030200000070230310010361743A240323031Einstance,class=OrderedCollection,selector=riAt:,codeType=rtalk,modified=654354615,pbc=0401000140023431210123012403020000000923031001012B2403020000001523031001012D240323032405210223052403020000002B23031001013C24032303090121032403020000003F230310000473697A652403230323052403020000005123031001013E240323030A022305230224030200000067230310010767726F77546F3A24030102230524032303220201012305210324030200000085230310010361743A240323031Einstance,class=RtBlock,selector=tryCatch:,codeType=rtalk,modified=726196815,pbc=0401000016010C7072696D426C6F636B5472790C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=RtBlock,selector=syncronizedTo:,codeType=rtalk,modified=726196850,pbc=040100001601137072696D426C6F636B496E766F6B6553796E630C2F4F626A6563745072696D73230224030200000004230310000F7072696D69746976654661696C6564240323031Einstance,class=RtBlock,selector=whileTrue:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000576616C7565240323030A01230124030200000018230310000576616C75652403230123022403020000002A230310010A7768696C65547275653A240301012C01240323031Einstance,class=RtBlock,selector=forkNamed:priority:semaphore:,codeType=rtalk,modified=697324581,pbc=040300004002343223012302230323042405020000000D23051004166465627567537465703A6172673A6172673A6172673A240523041Einstance,class=RtBlock,selector=whileFalse:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000576616C7565240323030901230124030200000018230310000576616C75652403230123022403020000002A230310010B7768696C6546616C73653A240301012C01240323031Einstance,class=RtBlock,selector=repeatUntil:,codeType=rtalk,modified=571795337,pbc=04010000230224030200000004230310000576616C756524032302230124030200000016230310010B7768696C6546616C73653A240323031Einstance,class=RtBlock,selector=value,codeType=rtalk,modified=726196829,pbc=0400000016000F7072696D426C6F636B496E766F6B650C2F4F626A6563745072696D73230124020200000004230210000F7072696D69746976654661696C6564240223021Einstance,class=RtMetaClass,selector=isMetaClass,codeType=rtalk,modified=672826272,pbc=040000002C02240223021Einstance,class=RtMetaClass,selector=canUnderstand:,codeType=rtalk,modified=771792000,pbc=04010000230123022403020000000623031000106D6574686F6444696374696F6E617279240302000000122303100111696D706C656D656E74734D6574686F643A240323031Einstance,class=RtMetaClass,selector=basicNew,codeType=rtalk,modified=726196570,pbc=0400000016000D7072696D4F626A6563744E65770C2F4F626A6563745072696D73230124020200000004230210000A69735661726961626C65240223020A014002343023012402020000001B230210010962617369634E65773A240223021E0101230124020200000030230210000F7072696D69746976654661696C6564240223021Einstance,class=RtMetaClass,selector=instanceClass,codeType=rtalk,modified=741835567,pbc=0400000040023431230124020200000007230210010A696E737456617241743A240223021Einstance,class=RtMetaClass,selector=instancesMethods,codeType=rtalk,modified=744953307,pbc=04000000230124020200000004230210000D696E7374616E6365436C61737324020200000010230210000C6D6574686F644C6F6F6B7570240223021Einstance,class=RtMetaClass,selector=methodDictionary,codeType=rtalk,modified=744774922,pbc=04000000230124020200000004230210000D696E7374616E6365436C61737324020200000010230210000C6D6574686F644C6F6F6B7570240223021Einstance,class=RtMetaClass,selector=superclass,codeType=rtalk,modified=741830643,pbc=04000000230124020200000004230210000D696E7374616E6365436C61737324020200000010230210000A7375706572636C6173732402020000001C2302100005636C617373240223021Einstance,class=RtMetaClass,selector=compiledMethodAt:,codeType=rtalk,modified=571795337,pbc=06010002810023012601250118000123022403020000001523031000106D6574686F6444696374696F6E61727924030200000021230310020C61743A6966416273656E743A240323031E05010080002C01240223021Finstance,class=RtMetaClass,selector=sourceCodeAt:,codeType=rtalk,modified=571795337,pbcinstance,class=RtMetaClass,selector=instanceClass:,codeType=rtalk,modified=741835578,pbc=04010000400234312301230224030200000009230310020E696E737456617241743A7075743A240323021Einstance,class=RtMetaClass,selector=removeSelector:,codeType=rtalk,modified=571795337,pbc=06010002010023012601250118000123022403020000001523031000106D6574686F6444696374696F6E61727924030200000021230310021372656D6F76654B65793A6966416273656E743A240323021E05010000002C01240223021Einstance,class=RtMetaClass,selector=symbol,codeType=rtalk,modified=741830654,pbc=04000000230124020200000004230210000D696E7374616E6365436C61737324020200000010230210000673796D626F6C240223021Einstance,class=RtMetaClass,selector=addSelector:withMethod:,codeType=rtalk,modified=571795337,pbc=0402000023012C0140073353796D626F6C15020D7072696D476574476C6F62616C002404020000000D230410010D6D757374426553796D626F6C3A24042301230223032404020000002123041000106D6574686F6444696374696F6E6172792404020000002D230410020761743A7075743A240423031Einstance,class=RtMetaClass,selector=inheritsFrom:,codeType=rtalk,modified=771791701,pbc=040100002301210124030200000006230310010D696E68657269747346726F6D3A240323031Einstance,class=RtMetaClass,selector=hasClassVarNamed:,codeType=rtalk,modified=744953008,pbc=0401000023012101240302000000062303100111686173436C6173735661724E616D65643A240323031Einstance,class=RtMetaClass,selector=hash,codeType=rtalk,modified=741566112,pbc=0400000023012402020000000423021000046E616D6524020200000010230210000468617368240223021Einstance,class=RtMetaClass,selector=instancesMethods:,codeType=rtalk,modified=744953358,pbc=040100002301230224030200000006230310000D696E7374616E6365436C61737324030200000012230310010D6D6574686F644C6F6F6B75703A240323021Einstance,class=RtMetaClass,selector=shallowCopy,codeType=rtalk,modified=672826209,pbc=040000002301240223021Einstance,class=RtMetaClass,selector=instSize,codeType=rtalk,modified=741684895,pbc=040000004004342D3136400B34343239343930313736302C014008335274436C61737315020D7072696D476574476C6F62616C002402020000001123021000097374727563747572652402020000001D2302100107626974416E643A24020200000029230210010962697453686966743A240223021Einstance,class=RtMetaClass,selector=includesSelector:,codeType=rtalk,modified=571795337,pbc=04010000230123022403020000000623031000106D6574686F6444696374696F6E61727924030200000012230310010C696E636C756465734B65793A240323031Einstance,class=RtMetaClass,selector=implementorsOf:,codeType=rtalk,modified=571795337,pbcinstance,class=RtMetaClass,selector=deepCopy,codeType=rtalk,modified=672825749,pbc=040000002301240223021Einstance,class=RtMetaClass,selector=selectors,codeType=rtalk,modified=571795337,pbc=0400000023012402020000000423021000106D6574686F6444696374696F6E6172792402020000001023021000046B657973240223021Einstance,class=RtMetaClass,selector=name,codeType=rtalk,modified=741830626,pbc=04000000230124020200000004230210000D696E7374616E6365436C61737324020200000010230210000569734E696C240223020A01400D31756E6B6E6F776E206E616D65240223021E010140073120636C617373230124020200000031230210000D696E7374616E6365436C6173732402020000003D23021000046E616D652402020000004923021001012C240223021Einstance,class=RtMetaClass,selector=printOn:,codeType=rtalk,modified=676331102,pbc=0401000023022403020000000423031000046E616D6524032303230124030200000016230310010B6E657874507574416C6C3A240323021E:SOURCE,type=classMethod,class=RtSymbolSet,selector=symbolSet,codeType=rtalksymbolSet           "<modified:pgmr=mdr,time=08/06/13 at 03:40:34 pm>   "                "return the shared SymbolSet"            <jprim: /MiscPrims primGetSymbolTable>                    ^self primitiveFailed        :SOURCE,type=classMethod,class=Symbol,selector=fromString:,codeType=rtalkfromString:aString                        "comment"                    ^aString asSymbol               :SOURCE,type=classMethod,class=Symbol,selector=mustBeSymbol:,codeType=rtalkmustBeSymbol: aSymbol                        "Report an error if aSymbol is not a Symbol."                    aSymbol isSymbol                        ifFalse: [^self error: 'Must be a Symbol']               :SOURCE,type=classMethod,class=Symbol,selector=new:,codeType=rtalknew: ignoreArgument                        "Private - Answer an instance of the receiver.                         This method reports an error."                    ^self invalidMessage               :SOURCE,type=classMethod,class=RtDictionary,selector=new,codeType=rtalknew                   "<modified:sys=GAKRE8CA,time=04/28/11 at 11:00:37 pm>   "                   "<modified:sys=GAKRE8CA,time=02/10/11 at 10:06:07 am>   "                        "Answer a new Dictionary"                  ^super new initialize: self initialSize               :SOURCE,type=classMethod,class=RtDictionary,selector=newSize:,codeType=rtalknewSize: anInteger                   "<modified:sys=GAKRE8CA,time=04/28/11 at 10:58:36 pm>   "                        "Private - Answer an IdentityDictionary                         capable of containing anInteger                         number of elements."                    ^super new initialize: ( 1 max: anInteger * 2)               :SOURCE,type=classMethod,class=RtDictionary,selector=new:,codeType=rtalknew: anInteger                   "<modified:sys=GAKRE8CA,time=04/28/11 at 10:57:25 pm>   "                        "Private - Create a new instance with an initial capacity                         of anInteger elements.  This method reports an                         error since the size of an idendity dictionary                         must be a power of 2."                    ^self invalidMessage               :SOURCE,type=classMethod,class=RtDictionary,selector=initialSize,codeType=rtalkinitialSize                        "Private - Answer the initial number of elements                         that a new instance of IdentityDictionary                         contains."                    ^8               :SOURCE,type=classMethod,class=SortedCollection,selector=sortBlock:,codeType=rtalksortBlock: aBlock                        "Answer aSortedCollection which will                         sort in the order defined by aBlock."                    ^(super new: 10) sortBlock: aBlock               :SOURCE,type=classMethod,class=SortedCollection,selector=new:,codeType=rtalknew: anInteger                        "Answer a SortedCollection capable of                         holding anInteger number of elements                         which will sort in ascending order."                    ^(super new: anInteger) sortBlock: [ :a :b | a <= b]               :SOURCE,type=classMethod,class=Integer,selector=fromString:,codeType=rtalkfromString:aString                        "comment"                    ^aString asInteger               :SOURCE,type=classMethod,class=Integer,selector=random,codeType=rtalkrandom                         "<modified:pgmr=mdr,time=08/03/13 at 04:43:58 pm>   "             "Generates a random number between 0 and2^31"                               ^((1.0 random ) * (2 bitShift:31)) truncated         :SOURCE,type=classMethod,class=Integer,selector=new:,codeType=rtalknew: argumentIgnored                        "Private - Answer an instance of the receiver.                         This method reports an error."                    ^self invalidMessage               :SOURCE,type=classMethod,class=Integer,selector=random:,codeType=rtalkrandom: top                   "<modified:sys=GAKRE8CA,time=03/25/11 at 01:11:46 pm>   "                        "Generates a random number between 0 and top                         N.B.: top must be smaller than 2^32"                    ^(self random) \\ top               :SOURCE,type=classMethod,class=Integer,selector=fromHexString:,codeType=rtalkfromHexString: aString                "                    This method retrieves a value from the hexadecimal representation                    stored in the string.   JB 97.03.28                "                    | hex val |                    hex := aString asStream.                    val := hex next asHexValue.                    7 timesRepeat: [                        val := val bitShift: 4.                        val := val bitOr: (hex next asHexValue).                    ].                    ^val               :SOURCE,type=classMethod,class=BigInteger,selector=fromBytes:,codeType=rtalkfromBytes: aByteArray                   "<modified:pgmr=mdr,time=01/04/13 at 05:57:04 pm>   "                        "Answer an Integer holding aByteArray."                    <jprim: /RtBigInteger primFromBytes>                    ^nil               :SOURCE,type=classMethod,class=BigInteger,selector=javaClass,codeType=rtalkjavaClass                   "<modified:pgmr=mdr,time=08/06/12 at 06:30:26 pm>   "                        "contained class"                    ^'/java/math/BigInteger'               :SOURCE,type=classMethod,class=Utf8String,selector=javaClass,codeType=rtalkjavaClass                   "<modified:pgmr=mdr,time=08/06/12 at 06:27:30 pm>   "                        "contained class"                    ^'/java/lang/String'               :SOURCE,type=classMethod,class=Fraction,selector=numerator:denominator:,codeType=rtalknumerator: n denominator: d                        "Answer an instance of class Fraction and                         initialize both numerator and denominatior                         instance variables to n and d respectively."                    ^self basicNew numerator: n denominator: d               :SOURCE,type=classMethod,class=Fraction,selector=fromString:,codeType=rtalkfromString:aString                   "<modified:sys=GAKRE8CA,time=05/10/12 at 04:05:36 pm>   "                   "<modified:sys=GAKRE8CA,time=05/10/12 at 04:03:08 pm>   "                        "format is num/den"                    | tmp|                    tmp := aString riPairSepBy:$/.                    ^self numerator:((tmp at:1) asInteger) denominator:((tmp at:1) asInteger)               :SOURCE,type=classMethod,class=Interval,selector=from:to:,codeType=rtalkfrom: beginningInteger to: endInteger                        "Answer an Interval from beginningInteger to                         endInteger incrementing by one."                    ^self basicNew                        initBegin: beginningInteger                        end: endInteger                        incr: 1               :SOURCE,type=classMethod,class=Interval,selector=from:to:by:,codeType=rtalkfrom: beginningInteger                    to: endInteger                    by: incrementInteger                        "Answer an Interval from beginningInteger to                         endInteger incrementing by incrementInteger."                    ^self basicNew                        initBegin: beginningInteger                        end: endInteger                        incr: incrementInteger               :SOURCE,type=classMethod,class=RtThread,selector=javaClass,codeType=rtalkjavaClass                   "<modified:pgmr=mdr,time=08/06/12 at 06:28:14 pm>   "                        "contained class"                    ^'/java/lang/Thread'               :SOURCE,type=classMethod,class=RtThread,selector=sleepMillis:,codeType=rtalksleepMillis:aInt                   "<modified:sys=GAKRE8CA,time=02/05/12 at 09:09:20 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 03:04:28 pm>   "                        "sleep the current thread"                    self debugStep:4 arg:aInt               :SOURCE,type=classMethod,class=RtThread,selector=currentThread,codeType=rtalkcurrentThread                   "<modified:sys=GAKRE8CA,time=06/08/11 at 09:40:46 am>   "                   "<modified:sys=GAKRE8CA,time=06/08/11 at 09:09:05 am>   "                        "return an instance holding the current thread"                    ^self new currentThread               :SOURCE,type=classMethod,class=RtSystem,selector=exit:,codeType=rtalkexit:aArray            "<modified:pgmr=mdr,time=08/03/13 at 05:08:54 pm>   "                 "called at application exit"         :SOURCE,type=classMethod,class=RtSystem,selector=shutdown,codeType=rtalkshutdown                   "<modified:sys=GAKRE8CA,time=04/09/12 at 07:14:19 pm>   "                        "does what is necessary to shutdown"               :SOURCE,type=classMethod,class=RtSystem,selector=debugStepRefresh:,codeType=rtalkdebugStepRefresh:aThdName                   "<modified:sys=GAKRE8CA,time=11/12/11 at 07:50:30 pm>   "                   "<modified:sys=GAKRE8CA,time=11/12/11 at 06:21:20 pm>   "                        "from the jvm to indicate that a debug step has occurred                        and that any debuggers should update"                    RiRmtViewDebugger refreshSubscribers:aThdName               :SOURCE,type=classMethod,class=RtJavaObject,selector=javaClass,codeType=rtalkjavaClass                   "<modified:pgmr=mdr,time=08/06/12 at 06:31:06 pm>   "                        "contained class"                    ^'/java/lang/Object'               :SOURCE,type=classMethod,class=Character,selector=tab,codeType=rtalktab                   "<modified:sys=GAKRE8CA,time=05/11/11 at 10:03:33 am>   "                   "<modified:sys=GAKRE8CA,time=05/11/11 at 10:02:57 am>   "                        "comment"                    ^self value:9               :SOURCE,type=classMethod,class=Character,selector=new,codeType=rtalknew                        "Disallow the instantiation of characters                         because characters are immutable."                    ^self invalidMessage               :SOURCE,type=classMethod,class=Character,selector=space,codeType=rtalkspace                   "<modified:sys=GAKRE8CA,time=05/11/11 at 10:03:56 am>   "                   "<modified:sys=GAKRE8CA,time=05/11/11 at 10:02:57 am>   "                        "comment"                    ^self value:32               :SOURCE,type=classMethod,class=Character,selector=digitValue:,codeType=rtalkdigitValue: anInteger                        "Answer the character representation                         of the digit anInteger."                    (0 > anInteger or: [35 < anInteger])                        ifTrue: [self error: 'digitValue not in range 0..35'].                    anInteger < 10                        ifTrue: [ "return $0 .. $9"                            ^self value: anInteger + 48]                        ifFalse: [ "return $A .. $Z"                            ^self value: anInteger + 55]               :SOURCE,type=classMethod,class=Character,selector=value:,codeType=rtalkvalue: anInteger                   "<modified:pgmr=mdr,time=08/06/13 at 03:34:05 pm>   "                "Answer the character whose code point                         value is anInteger."                    ^self allCharacters at: (anInteger + 1).        :SOURCE,type=classMethod,class=Character,selector=riDigitValue:,codeType=rtalkriDigitValue: anInteger                        "Answer the character representation                         of the digit anInteger. if out of range substitute a blank"                    (0 > anInteger or: [35 < anInteger])                        ifTrue: [^self value:32].                    anInteger < 10                        ifTrue: [ "return $0 .. $9"                            ^self value: anInteger + 48]                        ifFalse: [ "return $A .. $Z"                            ^self value: anInteger + 55]               :SOURCE,type=classMethod,class=Character,selector=allCharacters,codeType=rtalkallCharacters           "<modified:pgmr=mdr,time=08/06/13 at 03:33:05 pm>   "                "get the shared ASCII character array"            <jprim: /MiscPrims primGetAllCharacters>                    ^self primitiveFailed        :SOURCE,type=classMethod,class=Character,selector=riBase32Value:,codeType=rtalkriBase32Value: anInteger                        "Answer the character representation                         of the digit anInteger ( which is base 32)                         does not use the char I, O, Q, D to improve readability"                        | result |                    result :=anInteger + 48.                    result >= 58 ifTrue:[ result := result + 7].                    result >= 68 ifTrue:[ result := result + 1].                    result >= 73 ifTrue:[ result := result + 1].                    result >= 79 ifTrue:[ result := result + 1].                    result >= 81 ifTrue:[ result := result + 1].                    ^result asCharacter               :SOURCE,type=classMethod,class=Character,selector=cr,codeType=rtalkcr                   "<modified:sys=GAKRE8CA,time=05/11/11 at 10:02:57 am>   "                        "comment"                    ^self value:13               :SOURCE,type=classMethod,class=Character,selector=lf,codeType=rtalklf                   "<modified:sys=GAKRE8CA,time=05/11/11 at 10:03:24 am>   "                   "<modified:sys=GAKRE8CA,time=05/11/11 at 10:02:57 am>   "                        "comment"                    ^self value:10               :SOURCE,type=classMethod,class=UndefinedObject,selector=new,codeType=rtalknew                        "Private - Create a new instance of the receiver.  Disallowed                         for this class because there is only a single                         instance, nil."                    ^self invalidMessage               :SOURCE,type=classMethod,class=UndefinedObject,selector=fromString:,codeType=rtalkfromString:aString                        "comment"                    ^nil               :SOURCE,type=classMethod,class=UndefinedObject,selector=new:,codeType=rtalknew: anInteger                        "Private - Create a new instance of the receiver.  Disallowed                         for this class because there is only a single                         instance, nil."                    ^self invalidMessage               :SOURCE,type=classMethod,class=RtTimer,selector=javaClass,codeType=rtalkjavaClass                   "<modified:pgmr=mdr,time=08/06/12 at 06:29:54 pm>   "                        "contained class"                    ^'/java/util/Timer'               :SOURCE,type=classMethod,class=IdentityDictionary,selector=new,codeType=rtalknew                        "Answer a new IdentityDictionary."                    ^(super new: self initialSize * 2)               :SOURCE,type=classMethod,class=IdentityDictionary,selector=newSize:,codeType=rtalknewSize: anInteger                        "Private - Answer an IdentityDictionary                         capable of containing anInteger                         number of elements."                    ^(super new: anInteger * 2)               :SOURCE,type=classMethod,class=IdentityDictionary,selector=new:,codeType=rtalknew: anInteger                        "Private - Create a new instance with an initial capacity                         of anInteger elements.  This method reports an                         error since the size of an idendity dictionary                         must be a power of 2."                    ^self invalidMessage               :SOURCE,type=classMethod,class=IdentityDictionary,selector=initialSize,codeType=rtalkinitialSize                        "Private - Answer the initial number of elements                         that a new instance of IdentityDictionary                         contains."                    ^8               :SOURCE,type=classMethod,class=Boolean,selector=new,codeType=rtalknew                        "Private - Disallow the instantiation                         of booleans because there is only one                         true and one false."                    ^self invalidMessage               :SOURCE,type=classMethod,class=Boolean,selector=fromString:,codeType=rtalkfromString: aString                    ^aString asLowerCase = 'true'               :SOURCE,type=classMethod,class=Boolean,selector=new:,codeType=rtalknew: anInteger                        "Private - Disallow the instantiation                         of booleans because there is only one                         true and one false."                    ^self invalidMessage               :SOURCE,type=classMethod,class=Association,selector=fromStream:,codeType=rtalkfromStream: strm                "                    Create an instance of the receiver from a stream formatted like:                    key=value where the value is terminated by a line ending.                "                    ^self                         key: (strm upTo: $= )                        value: (strm nextLine )               :SOURCE,type=classMethod,class=Association,selector=fromString:,codeType=rtalkfromString: aString                "                    Create an instance of the receiver from a stream formatted like:                    key=value where the value is terminated by a line ending.                "                    ^self fromStream: (ReadStream on: aString)               :SOURCE,type=classMethod,class=Association,selector=key:,codeType=rtalkkey: anObject                        "Answer an instance of class Association                         whose key is initialized to anObject."                    ^self new key: anObject               :SOURCE,type=classMethod,class=Association,selector=key:value:,codeType=rtalkkey: aKey value: anObject                        "Answer an instance of class Association                         whose key is initialized to aKey and                         whose value is initialized to anObject."                    ^(self key: aKey) value: anObject               :SOURCE,type=classMethod,class=RtMethodLookup,selector=new,codeType=rtalknew                   "<modified:sys=GAKRE8CA,time=04/28/11 at 11:00:37 pm>   "                   "<modified:sys=GAKRE8CA,time=02/10/11 at 10:06:07 am>   "                        "Answer a new Dictionary"                  ^super new initialize: self initialSize               :SOURCE,type=classMethod,class=RtMethodLookup,selector=newSize:,codeType=rtalknewSize: anInteger                   "<modified:sys=GAKRE8CA,time=04/28/11 at 10:58:36 pm>   "                        "Private - Answer an IdentityDictionary                         capable of containing anInteger                         number of elements."                    ^super new initialize: ( 1 max: anInteger * 2)               :SOURCE,type=classMethod,class=RtMethodLookup,selector=new:,codeType=rtalknew: anInteger                   "<modified:sys=GAKRE8CA,time=04/28/11 at 10:57:25 pm>   "                        "Private - Create a new instance with an initial capacity                         of anInteger elements.  This method reports an                         error since the size of an idendity dictionary                         must be a power of 2."                    ^self invalidMessage               :SOURCE,type=classMethod,class=RtMethodLookup,selector=initialSize,codeType=rtalkinitialSize                        "Private - Answer the initial number of elements                         that a new instance of IdentityDictionary                         contains."                    ^8               :SOURCE,type=classMethod,class=RtBlock2Arg,selector=javaClass,codeType=rtalkjavaClass                   "<modified:pgmr=mdr,time=08/07/12 at 04:58:17 pm>   "                        "comment"                    ^'java/lang/invoke/MethodHandle'               :SOURCE,type=classMethod,class=Float,selector=fromString:,codeType=rtalkfromString: aString                   "<modified:sys=GAKRE8CA,time=01/20/12 at 03:08:42 pm>   "                   "<modified:sys=GAKRE8CA,time=04/22/11 at 05:39:39 pm>   "                        "Answer the floating point conversion of the receiver;                         the receiver is expected to be a sequence of                         the form [(+|-)] [digits] [decSep [digits] ] [(E|e) [(+|-) digits]]."                    ^self fromString: aString                        decimalSeparator: (Character value:46) asString               :SOURCE,type=classMethod,class=Float,selector=pi,codeType=rtalkpi                        "Answer the floating point                         representation of pi."                    ^1 arcTan * 4               :SOURCE,type=classMethod,class=Float,selector=fromString:decimalSeparator:,codeType=rtalkfromString: aString decimalSeparator: decimalString                   "<modified:sys=GAKRE8CA,time=02/03/12 at 10:51:27 pm>   "                        "Answer the floating point conversion of the receiver,                          using decimalString as the decimal separator.                         The receiver is expected to be a sequence of                         the form [(+|-)] [digits] [decSep [digits] ] [(E|e) [(+|-) digits]]."                    | string integer fraction exponent char index |                    aString size = 0 ifTrue: [^0.0].                    (char := aString at: 1) = $-                        ifTrue: [ ^(aString copyFrom: 2 to: aString size) asFloat negated].                    string := aString, decimalString, 'Ez'.                    integer := index := 0.                    char = $+                        ifTrue: [index := 1].                    [(char := string at: (index := index + 1)) isDigit]                        whileTrue: [integer := integer * 10 + char digitValue].                    fraction := 1.                    char = (decimalString at: 1)                        ifTrue: [                            [(char := string at: (index := index + 1)) isDigit]                                whileTrue: [                                    integer := integer * 10 + char digitValue.                                    fraction := fraction * 10]].                    (char = $E or: [char = $e])                        ifTrue: [exponent := (string copyFrom: index+1 to: string size) asInteger]                        ifFalse: [                            integer = 0 ifTrue: [^0.0].                            exponent := 0].                    integer = 0 ifTrue: [^0.0].                    exponent := 10.0 raisedTo: exponent asFloat.                    ^((integer / fraction) * exponent) asFloat               :SOURCE,type=classMethod,class=Float,selector=fromInteger:,codeType=rtalkfromInteger: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 05:57:58 pm>   "                        "Answer a floating point representation                         of the argument anInteger."                    <jprim: /FloatPrims primFloatFromInt>                    ^self floatError               :SOURCE,type=classMethod,class=RtBlock1Arg,selector=javaClass,codeType=rtalkjavaClass                   "<modified:pgmr=mdr,time=08/07/12 at 04:58:03 pm>   "                        "comment"                    ^'java/lang/invoke/MethodHandle'               :SOURCE,type=classMethod,class=Number,selector=new,codeType=rtalknew                        "Private - Answer an instance of the receiver.                         This method reports an error."                    ^self invalidMessage               :SOURCE,type=classMethod,class=Number,selector=fromString:,codeType=rtalkfromString: aString                   "<modified:sys=GAKRE8CA,time=02/02/12 at 07:09:01 pm>   "                        "Answer aString as a number."                    |  specialChar s num denom arrayOfSpecialChar decimalSep |                    decimalSep := $..                    arrayOfSpecialChar := (Array with: decimalSep), #( $/ $e $E).                    specialChar := (aString                        detect: [ :c | arrayOfSpecialChar includes: c]                        ifNone: [nil]).                    specialChar isNil                        ifTrue: [^aString asInteger].                    (specialChar = $/)                        ifTrue: [                            s := ReadStream on: aString.                            num := s upTo: $/.                            denom := s upTo: nil.                            ^num asInteger / denom asInteger                            ].                    ^aString asFloat               :SOURCE,type=classMethod,class=Number,selector=random,codeType=rtalkrandom                         "<modified:pgmr=mdr,time=08/03/13 at 04:40:09 pm>   "                 "Answer a random number between 0 and (but not equal to) 1"                    ^1.0 random         :SOURCE,type=classMethod,class=Number,selector=intervalOfSize:from:by:,codeType=rtalkintervalOfSize:aInt from:aStart by:aInc                        "return an array"                    | rtn num|                    num := aStart.                    rtn := Array new:aInt.                    1 to:aInt do:[ :i | rtn at:i put:num.                                            num := num + aInc].                    ^rtn               :SOURCE,type=classMethod,class=Number,selector=intervalOfSize:from:to:,codeType=rtalkintervalOfSize:aInt from:aStart to:aStop                        "return an array"                    | rtn num inc|                    num := aStart.                    inc := (aStop - aStart) / (aInt - 1 ).                    rtn := Array new:aInt.                    1 to:aInt do:[ :i | rtn at:i put:num.                                            num := num + inc].                    ^rtn               :SOURCE,type=classMethod,class=Number,selector=fromHexString:,codeType=rtalkfromHexString: aString                "                    This method retrieves a value from the hexadecimal representation                    stored in the string.   JB 97.03.28                "                    ^self implementedBySubclass               :SOURCE,type=classMethod,class=String,selector=fromString:,codeType=rtalkfromString:aString                    " rtn a string"                    ^aString               :SOURCE,type=classMethod,class=String,selector=fromFloat:,codeType=rtalkfromFloat:aFloat                    " rtn a string"                    ^aFloat asString               :SOURCE,type=classMethod,class=ByteArray,selector=fromString:,codeType=rtalkfromString:aString                    " rtn a string"                    ^aString asByteArray               :SOURCE,type=classMethod,class=ByteArray,selector=newSingle:,codeType=rtalknewSingle:aInt                        "comment"                    | rtn |                    rtn := self new:1.                    rtn at:1 put:aInt.                    ^rtn               :SOURCE,type=classMethod,class=ByteArray,selector=fromHexString:,codeType=rtalkfromHexString:aString                        "comment"                    | rtn |                    rtn := self new:(aString size // 2).                    rtn riFillWithHex:(aString asUpperCase).                    ^rtn               :SOURCE,type=classMethod,class=Collection,selector=with:with:with:with:,codeType=rtalkwith: firstObject                    with: secondObject                    with: thirdObject                    with: fourthObject                        "Answer a collection of four elements, firstObject,                         secondObject, thirdObject, and fourthObject."                    ^self new                        add: firstObject;                        add: secondObject;                        add: thirdObject;                        add: fourthObject;                        yourself               :SOURCE,type=classMethod,class=Collection,selector=with:with:,codeType=rtalkwith: firstObject with: secondObject                        "Answer a collection of two elements,                         firstObject and secondObject."                    ^self new                        add: firstObject;                        add: secondObject;                        yourself               :SOURCE,type=classMethod,class=Collection,selector=with:,codeType=rtalkwith: anObject                        "Answer a collection with only                         one element, anObject."                    ^self new                        add: anObject;                        yourself               :SOURCE,type=classMethod,class=Collection,selector=with:with:with:,codeType=rtalkwith: firstObject with: secondObject with: thirdObject                   "<modified:pgmr=unknown,time=08/06/13 at 01:51:07 pm>   "                "Answer a collection of three elements,                         firstObject, secondObject, and thirdObject."                    ^self new                        add: firstObject;                        add: secondObject;                        add: thirdObject;                        yourself        :SOURCE,type=classMethod,class=RiGuruTime,selector=guruID,codeType=rtalkguruID                   "<modified:pgmr=mdr,time=08/03/13 at 05:03:31 pm>   "                 "local identifier"                	<jprim: /RtalkPrims primSystemGuruId>                    ^self primitiveFailed         :SOURCE,type=classMethod,class=RiGuruTime,selector=guruTime,codeType=rtalkguruTime                   "<modified:sys=GAKRE8CA,time=01/01/12 at 08:05:27 pm>   "                        "6 bytes of guru time in base 36"                   ^(String new: 6)                         replaceBytesFrom: 1                                                to: 6                                            with: (self uniqueGuruID)                                    startingAt: 1               :SOURCE,type=classMethod,class=RiGuruTime,selector=guruTimestamp,codeType=rtalkguruTimestamp                   "<modified:pgmr=mdr,time=08/17/12 at 03:48:29 pm>   "                    " current guru time"                    " format is yyyy-mm-dd-hh.mm.ss.0000 fixed for sorting "                    | stream date |                    stream := WriteStream on: String new.                	date := Date newFromGMTseconds:(RiGuruTime secondsSince1990GMT).                    stream                        nextPutAll: date year asString;                        nextPut: $- ;                        nextPutAll: (date month printPaddedTo: 2 with: $0);                        nextPut: $- ;                        nextPutAll: (date day printPaddedTo: 2 with: $0).                    stream nextPutAll: '.'.                    stream                        nextPutAll: (date hours printPaddedTo: 2 with: $0);                        nextPut: $. ;                        nextPutAll: (date minutes printPaddedTo: 2 with: $0);                        nextPut: $. ;                        nextPutAll: (date seconds printPaddedTo: 2 with: $0).                    stream     nextPut: $. .                    stream nextPutAll: (0 printPaddedTo:4 with: $0).                    ^stream contents.               :SOURCE,type=classMethod,class=RiGuruTime,selector=longID,codeType=rtalklongID                   "<modified:pgmr=mdr,time=08/03/13 at 04:53:39 pm>   "                 "16 char identifier"                    | temp rtn sysID |                    rtn := ByteArray new: 16.                    temp := self uniqueGuruID.                    rtn replaceBytesFrom:9 to:16 with:temp startingAt:1.                    rtn replaceBytesFrom:1 to:8 with:(self guruID) startingAt:1.                    ^rtn         :SOURCE,type=classMethod,class=RiGuruTime,selector=localTimestamp,codeType=rtalklocalTimestamp                   "<modified:pgmr=mdr,time=08/15/12 at 11:46:15 pm>   "                   "<modified:sys=GAKRE8CA,time=01/09/12 at 03:28:47 pm>   "                    " current local time"                    " format is yyyy-mm-dd-hh.mm.ss.0000 fixed for sorting "                    | stream date |                    stream := WriteStream on: String new.                    date := Date today.                    stream                        nextPutAll: date year asString;                        nextPut: $- ;                        nextPutAll: (date month printPaddedTo: 2 with: $0);                        nextPut: $- ;                        nextPutAll: (date day printPaddedTo: 2 with: $0).                    stream nextPutAll: '.'.                    stream                        nextPutAll: (date hours printPaddedTo: 2 with: $0);                        nextPut: $. ;                        nextPutAll: (date minutes printPaddedTo: 2 with: $0);                        nextPut: $. ;                        nextPutAll: (date seconds printPaddedTo: 2 with: $0).                    stream     nextPut: $. .                    stream nextPutAll: (0 printPaddedTo:4 with: $0).                    ^stream contents.               :SOURCE,type=classMethod,class=RiGuruTime,selector=uniqueGuruID,codeType=rtalkuniqueGuruID                   "<modified:pgmr=mdr,time=08/03/13 at 04:47:15 pm>   "                 "8 bytes of time plus sequence"                	<jprim: /RtalkPrims primUniqueGuruId>                    ^self primitiveFailed         :SOURCE,type=classMethod,class=RiGuruTime,selector=secondsSince1990GMT,codeType=rtalksecondsSince1990GMT                       "<modified:pgmr=mdr,time=08/03/13 at 04:59:38 pm>   "                 "Return a long int representing the number of seconds                         elapsed since Jan 1, 1990."                	<jprim: /RtalkPrims primGuruTime>                    ^self primitiveFailed         :SOURCE,type=classMethod,class=RiGuruTime,selector=localSecondsSince1990,codeType=rtalklocalSecondsSince1990                         "<modified:pgmr=mdr,time=08/03/13 at 05:01:10 pm>   "                 "Return a long int representing the number of seconds                         elapsed since Jan 1, 1990."                    | time |                    time := self secondsSince1990GMT .                    time := time + (Date localTimeOffset).                    ^time         :SOURCE,type=classMethod,class=RiGuruTime,selector=uniqueID,codeType=rtalkuniqueID                   "<modified:sys=GAKRE8CA,time=02/09/12 at 07:33:24 pm>   "                   "<modified:sys=GAKRE8CA,time=01/01/12 at 08:04:20 pm>   "                        "comment"                    ^self uniqueGuruID asString               :SOURCE,type=classMethod,class=Object,selector=globals,codeType=rtalkglobals                   "<modified:pgmr=mdr,time=01/02/13 at 06:24:00 pm>   "                        "the global dictionary"                    <jprim: /MiscPrims primGetAllGlobals>                    ^self primitiveFailed               :SOURCE,type=classMethod,class=Object,selector=globalExists:,codeType=rtalkglobalExists:aSymbol                   "<modified:pgmr=cathy,time=12/28/12 at 01:44:44 pm>   "                        "check class and vars for existance"                   ^Object globals includesKey:aSymbol               :SOURCE,type=classMethod,class=Object,selector=removeGlobal:,codeType=rtalkremoveGlobal:aSym                   "<modified:pgmr=cathy,time=12/28/12 at 01:47:49 pm>   "                        "cannot remove a class this way"                	(RtClass classExists:aSym) ifTrue:[^self error:'cannot remove a class as a var'].                	self globals removeKey:aSym               :SOURCE,type=classMethod,class=Object,selector=addGlobal:value:,codeType=rtalkaddGlobal:aSym value:aObject                   "<modified:pgmr=mdr,time=01/02/13 at 06:23:21 pm>   "                        "add a variable to the globals "                	(RtClass classExists:aSym) ifTrue:[^self error:'cannot replace a class with a var'].                    self globals at:aSym put:aObject               :SOURCE,type=classMethod,class=Object,selector=vmError:,codeType=rtalkvmError: aString                   "<modified:pgmr=mdr,time=01/04/13 at 07:24:40 pm>   "                        "notify the vm of an error"                    <jprim: /RtalkPrims primSendError>                    ^self primitiveFailed               :SOURCE,type=classMethod,class=FixedSizeCollection,selector=with:with:with:with:,codeType=rtalkwith: firstObject                    with: secondObject                    with: thirdObject                    with: fourthObject                        "Answer a collection of four elements, firstObject,                         secondObject, thirdObject, and fourthObject."                    | answer |                    answer := self new: 4.                    answer at: 1 put: firstObject.                    answer at: 2 put: secondObject.                    answer at: 3 put: thirdObject.                    answer at: 4 put: fourthObject.                    ^answer               :SOURCE,type=classMethod,class=FixedSizeCollection,selector=with:with:,codeType=rtalkwith: firstObject with: secondObject                        "Answer a collection of two elements,                         firstObject and secondObject."                    | answer |                    answer := self new: 2.                    answer at: 1 put: firstObject.                    answer at: 2 put: secondObject.                    ^answer               :SOURCE,type=classMethod,class=FixedSizeCollection,selector=with:,codeType=rtalkwith: anObject                        "Answer a collection with only                         one element, anObject."                    | answer |                    answer := self new: 1.                    answer at: 1 put: anObject.                    ^answer               :SOURCE,type=classMethod,class=FixedSizeCollection,selector=with:with:with:,codeType=rtalkwith: firstObject with: secondObject with: thirdObject                        "Answer a collection of three elements,                         firstObject, secondObject, and thirdObject."                    | answer |                    answer := self new: 3.                    answer at: 1 put: firstObject.                    answer at: 2 put: secondObject.                    answer at: 3 put: thirdObject.                    ^answer               :SOURCE,type=classMethod,class=FixedSizeCollection,selector=with:with:with:with:with:,codeType=rtalkwith: firstObject                    with: secondObject                    with: thirdObject                    with: fourthObject                    with: last                        "Answer a collection of four elements, firstObject,                         secondObject, thirdObject, and fourthObject."                    | answer |                    answer := self new: 5.                    answer at: 1 put: firstObject.                    answer at: 2 put: secondObject.                    answer at: 3 put: thirdObject.                    answer at: 4 put: fourthObject.                    answer at: 5 put: last.                    ^answer               :SOURCE,type=classMethod,class=RtClass,selector=removeClassNamed:,codeType=rtalkremoveClassNamed:aSymbol                   "<modified:pgmr=mdr,time=01/02/13 at 06:26:19 pm>   "                        "comment"                    self classes removeKey:aSymbol ifAbsent:[]               :SOURCE,type=classMethod,class=RtClass,selector=classExists:,codeType=rtalkclassExists:aSymbol                   "<modified:pgmr=cathy,time=12/28/12 at 01:08:07 pm>   "                        "comment"                    ^(self getClass:aSymbol) notNil               :SOURCE,type=classMethod,class=RtClass,selector=sortBlock,codeType=rtalksortBlock                        "Answer a sort block for sorting                         classes alphabetically."                    ^[ :a :b | a symbol <= b symbol ]               :SOURCE,type=classMethod,class=RtClass,selector=getClass:,codeType=rtalkgetClass:aSymbol                   "<modified:pgmr=mdr,time=01/02/13 at 06:25:45 pm>   "                        "comment"                    | rtn |                   	rtn := self classes at:aSymbol ifAbsent:[^nil].                	rtn isClass                		ifTrue:[^rtn]                		ifFalse:[^nil]               :SOURCE,type=classMethod,class=RtClass,selector=allClassesDo:,codeType=rtalkallClassesDo:aBlock                   "<modified:pgmr=mdr,time=01/02/13 at 06:26:49 pm>   "                        "comment"                    self classes do:[ :c |                        c isClass                             ifTrue:[ aBlock value:c]]               :SOURCE,type=classMethod,class=RtClass,selector=saveClass:,codeType=rtalksaveClass:aClass                   "<modified:pgmr=mdr,time=01/02/13 at 06:40:17 pm>   "                        "comment"                    self classes at:(aClass symbol) put:aClass               :SOURCE,type=classMethod,class=RtClass,selector=classes,codeType=rtalkclasses                   "<modified:pgmr=mdr,time=01/02/13 at 06:24:59 pm>   "                        "the classes dictionary"                    <jprim: /MiscPrims primGetAllClasses>                    ^self primitiveFailed               :SOURCE,type=classMethod,class=Set,selector=new,codeType=rtalknew                        "Answer a new Set."                    ^self new: 4               :SOURCE,type=classMethod,class=Set,selector=new:,codeType=rtalknew: anInteger                        "Answer a new Set with an initial                         capacity of anInteger elements."                    ^super new initialize: ( 1 max: anInteger)               :SOURCE,type=classMethod,class=OrderedCollection,selector=new,codeType=rtalknew                   "<modified:sys=GAKRE8CA,time=04/24/11 at 07:36:58 pm>   "                        "Answer an instance of OrderedCollection                         capable of holding 12 elements initially."                    ^self new:12               :SOURCE,type=classMethod,class=OrderedCollection,selector=new:,codeType=rtalknew: anInteger                   "<modified:sys=GAKRE8CA,time=04/24/11 at 07:39:51 pm>   "                   "<modified:sys=GAKRE8CA,time=04/24/11 at 07:36:26 pm>   "                        "Answer an initialized instance of OrderedCollection                         capable of holding anInteger number of elements."                    ^(super new) initPositions: anInteger               :SOURCE,type=classMethod,class=RtBlock,selector=javaClass,codeType=rtalkjavaClass                   "<modified:pgmr=mdr,time=08/07/12 at 04:57:38 pm>   "                        "comment"                    ^'java/lang/invoke/MethodHandle'               :SOURCE,type=instanceMethod,class=RtSymbolSet,selector=symbolAt:,codeType=rtalksymbolAt: aSymbol                   "<modified:sys=GAKRE8CA,time=02/06/11 at 02:30:06 pm>   "                        "Answer the symbol in the receiver                         corresponding to aSymbol, or nil if none."                    ^contents at: (self findElementIndex: aSymbol)               :SOURCE,type=instanceMethod,class=RtSymbolSet,selector=adjustSize,codeType=rtalkadjustSize                   "<modified:sys=GAKRE8CA,time=02/06/11 at 02:33:21 pm>   "                        "Private - Answer the receiver.  If the receiver set is                         getting full, expand it to accomodate more objects."                    (elementCount * 10) >= (contents size - 2 * 9)                        ifTrue: [^self grow]               :SOURCE,type=instanceMethod,class=RtSymbolSet,selector=findElementIndex:,codeType=rtalkfindElementIndex: anObject                   "<modified:sys=GAKRE8CA,time=02/06/11 at 02:32:39 pm>   "                        "Private - Answer the index of anObject in                         the receiver.  If anObject is not present,                         answer the index of a nil entry where                         anObject may be stored."                    | index indexedObject lastIndex |                    lastIndex := contents size.                    index := anObject hash \\ lastIndex + 1.                    [(indexedObject := contents at: index) == nil                        ifTrue: [^index].                    indexedObject equals: anObject]                        whileFalse: [                            (index := index + 1) > lastIndex                                ifTrue: [ "index wraparound"                                    index := 1]].                    ^index               :SOURCE,type=instanceMethod,class=RtSymbolSet,selector=add:,codeType=rtalkadd: aSymbol                   "<modified:sys=GAKRE8CA,time=02/06/11 at 02:32:20 pm>   "                        "Private - Add aSymbol to the receiver collection."                    | index |                    Symbol mustBeSymbol: aSymbol.                    aSymbol isNil                        ifTrue: [^aSymbol].                    self adjustSize.                    (contents at:                        (index := self findElementIndex: aSymbol)) isNil                            ifTrue: [                                elementCount := elementCount + 1.                                ^contents at: index put: aSymbol].                    ^aSymbol               :SOURCE,type=instanceMethod,class=RtSymbolSet,selector=grow,codeType=rtalkgrow                   "<modified:sys=GAKRE8CA,time=02/06/11 at 02:33:04 pm>   "                   "<modified:sys=GAKRE8CA,time=02/06/11 at 02:32:54 pm>   "                        "Private - Answer the receiver expanded                         to accomodate more elements."                    | aSet |                    aSet := self class new: contents size * 4 // 3 + 10.                    self do: [ :element | aSet add: element].                    contents := aSet contents               :SOURCE,type=instanceMethod,class=RtSymbolSet,selector=allSymbols,codeType=rtalkallSymbols                   "<modified:sys=GAKRE8CA,time=07/07/12 at 04:02:03 pm>   "                   "<modified:sys=GAKRE8CA,time=07/07/12 at 03:58:19 pm>   "                        "answer a collection of the symbols"                    | index size rtn|                	rtn := OrderedCollection new.                    index := 1.                    size := contents size.                    [index > size]                        whileFalse: [                			(contents at: index) isNil                				ifFalse:[rtn add:(contents at: index)].                            index := index + 1].                	^rtn               :SOURCE,type=instanceMethod,class=RtSemaphore,selector=waitForMilliseconds:,codeType=rtalkwaitForMilliseconds:aInt                   "<modified:sys=GAKRE8CA,time=02/05/12 at 09:07:49 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:26:15 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:24:00 pm>   "                        "wait some time unless interupted"                    self debugStep:3 arg:aInt               :SOURCE,type=instanceMethod,class=RtSemaphore,selector=signal,codeType=rtalksignal                   "<modified:sys=GAKRE8CA,time=02/05/12 at 09:03:00 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 08:59:00 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 03:02:18 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:28:27 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:27:06 pm>   "                        "signal this semaphore to start one thread"                    self debugStep:12               :SOURCE,type=instanceMethod,class=RtSemaphore,selector=signalAll,codeType=rtalksignalAll                   "<modified:sys=GAKRE8CA,time=02/05/12 at 09:03:20 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:28:39 pm>   "                        "signal this semaphore to start all threads"                    self debugStep:13               :SOURCE,type=instanceMethod,class=RtSemaphore,selector=name:,codeType=rtalkname:aString                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:28:11 pm>   "                        "some string"                    name := aString               :SOURCE,type=instanceMethod,class=RtSemaphore,selector=wait,codeType=rtalkwait                   "<modified:sys=GAKRE8CA,time=02/05/12 at 09:02:51 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 08:58:53 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 03:02:26 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:24:00 pm>   "                        "wait on this semaphore"                    self debugStep:11               :SOURCE,type=instanceMethod,class=RtSemaphore,selector=name,codeType=rtalkname                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:27:58 pm>   "                        "some string"                    ^name               :SOURCE,type=instanceMethod,class=False,selector=xor:,codeType=rtalkxor: aBoolean                        "Answer true if the receiver is not equivalent                         to aBoolean, else answer false."                    ^aBoolean               :SOURCE,type=instanceMethod,class=False,selector=not,codeType=rtalknot                        "Answer true if the receiver is false,                         else answer false."                    ^true               :SOURCE,type=instanceMethod,class=False,selector=&,codeType=rtalk& aBoolean                        "Answer true if both the receiver and                         aBoolean are true, else answer false."                    ^false               :SOURCE,type=instanceMethod,class=False,selector=or:,codeType=rtalkor: aBlock                        "If the receiver is false, answer the result of                         evaluating aBlock (with no arguments), else                         answer true."                    ^aBlock value               :SOURCE,type=instanceMethod,class=False,selector=|,codeType=rtalk| aBoolean                        "Answer true if either the receiver or                         aBoolean are true, else answer false."                    ^aBoolean               :SOURCE,type=instanceMethod,class=False,selector=and:,codeType=rtalkand: aBlock                        "If the receiver is true, answer the result of                         evaluating aBlock (with no arguments), else                         answer false."                    ^false               :SOURCE,type=instanceMethod,class=RtDictionary,selector=contents,codeType=rtalkcontents                        "Private - Answer an Array containing                         contents of the receiver."                    ^contents               :SOURCE,type=instanceMethod,class=RtDictionary,selector=removeAll:,codeType=rtalkremoveAll: aCollection                        "Answer aCollection.  Remove all the elements                         contained in aCollection from the receiver collection."                    aCollection do: [ :element | self remove: element].                    ^aCollection               :SOURCE,type=instanceMethod,class=RtDictionary,selector=associationsDo:,codeType=rtalkassociationsDo: aBlock                        "Answer the receiver.  For each key/value pair                         in the receiver, evaluate aBlock with that                         pair as the argument."                    1 to: contents size by: 2 do: [ :index |                        (contents at: index) isNil                            ifFalse: [                                aBlock value:                                    (Association                                        key: (contents at: index)                                        value: (contents at: index + 1))]]               :SOURCE,type=instanceMethod,class=RtDictionary,selector=fullCopy,codeType=rtalkfullCopy                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:55:22 pm>   "                        "Answer a copy of the receiver with shallow                         copies of each element."                    | answer |                    answer := self species new.                    self associationsDo: [:element |                        answer add: element fullCopy].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=removeKey:ifAbsent:,codeType=rtalkremoveKey: aKey ifAbsent: aBlock                        "Answer aKey.  Remove the key/value pair whose key                         is aKey from the receiver.  If aKey is not in the                         receiver, evaluate aBlock (with no arguments)."                    | index  |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    contents at: index put: nil.                    contents at: index + 1 put: nil.                    elementCount := elementCount - 1.                    self rehashFrom: index.                    ^aKey               :SOURCE,type=instanceMethod,class=RtDictionary,selector=asArray,codeType=rtalkasArray                        "Answer an Array containing all                         the elements of the receiver."                    | answer index |                    answer := Array new: self size.                    index := 1.                    self do: [ :element |                        answer at: index put: element.                        index := index + 1].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=riDetectAssociation:ifNone:,codeType=rtalkriDetectAssociation: aBlock ifNone: exceptionBlock                        "Answer the first assc of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument).  If no such element is                         found, evaluate exceptionBlock (with no arguments)."                    self associationsDo: [ :element |                        (aBlock value: element)                            ifTrue: [^element]].                    ^exceptionBlock value               :SOURCE,type=instanceMethod,class=RtDictionary,selector=riDetectAllIfNoneNil:,codeType=rtalkriDetectAllIfNoneNil: aBlock                    "<modified:sys=G78T5XCA,time=03/31/10 at 09:31:46 pm>   "                   "<modified:sys=G9TQQ5YA,time=02/24/10 at 09:01:30 pm>   "                   "<modified:sys=G9TQQ5YA,time=02/24/10 at 09:01:12 pm>   "                        "Answer all elements of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument)."                    | rtn |                    rtn := OrderedCollection new.                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [rtn add:element]].                    rtn isEmpty ifTrue:[^nil].                    ^rtn               :SOURCE,type=instanceMethod,class=RtDictionary,selector=riAt:add:,codeType=rtalkriAt:aKey add:aObject                        "value is an orderedCollection"                    (self includesKey:aKey)                        ifFalse:[self at:aKey put:(OrderedCollection new:10)].                    (self at:aKey)add:aObject               :SOURCE,type=instanceMethod,class=RtDictionary,selector=removeKey:,codeType=rtalkremoveKey: aKey                        "Answer the receiver with the key/value pair whose                         key equals aKey removed.  If such a pair is not found,                         report an error."                    self removeKey: aKey ifAbsent: [self errorAbsentKey].               :SOURCE,type=instanceMethod,class=RtDictionary,selector=removeAssociation:,codeType=rtalkremoveAssociation: anAssociation                        "Answer the receiver after anAssociation has been                         removed from it.  If anAssociation is not in the                         receiver, report an error."                    self removeKey: anAssociation key               :SOURCE,type=instanceMethod,class=RtDictionary,selector=keys,codeType=rtalkkeys                        "Answer a Set containing all the keys                         in the receiver."                    | answer |                    answer := Set new: self size * 2.                    1 to: contents size by: 2 do: [ :index |                        (contents at: index) == nil                            ifFalse: [answer add: (contents at: index)]].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=keysDo:,codeType=rtalkkeysDo: aBlock                        "For each key in the receiver, evaluate aBlock with                         the key as the argument."                    self associationsDo: [ :anAssociation |                        aBlock value: anAssociation key]               :SOURCE,type=instanceMethod,class=RtDictionary,selector=asSortedCollection:,codeType=rtalkasSortedCollection: aBlock                        "Answer a SortedCollection containing                         the elements of the receiver sorted                         according to aBlock."                    ^(SortedCollection new: self size)                        sortBlock: aBlock;                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=RtDictionary,selector=collect:,codeType=rtalkcollect: aBlock                        "For each element in the receiver, evaluate aBlock with                         that element as the argument.  Answer a new collection                         containing the results as its elements from the aBlock                         evaluations."                    | answer |                    answer := self species new.                    self do: [ :element |                        answer add: (aBlock value: element)].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=lookUpKey:,codeType=rtalklookUpKey: aKey                        "Private - Answer the association                         in the receiver whose key equals                         aKey or nil if it doesn't exist."                    | index limit anAssociation |                    limit := contents size.                    index := (aKey hash) \\ limit + 1.                    [((anAssociation := contents at: index) == nil)                        or: [aKey = anAssociation key]]                            whileFalse: [                                (index := index + 1) > limit                                    ifTrue: [index := 1]]. "wrap-around"                    ^anAssociation               :SOURCE,type=instanceMethod,class=RtDictionary,selector=isNilOrEmpty,codeType=rtalkisNilOrEmpty                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:54:34 pm>   "                        "Answer true if the receiver collection                         contains no elements, else answer false."                    ^self isEmpty               :SOURCE,type=instanceMethod,class=RtDictionary,selector=riKeyList,codeType=rtalkriKeyList                        "Compute  an                         OrderedCollection of key strings                         for a list pane."                    | list  |                    list := OrderedCollection new: self size.                    self keysDo: [:aKey |                        list add: (aKey asString)].                    ^(SortedCollection new)                        sortBlock: [:a :b| a  before: b ];                        addAll: list;                        yourself.               :SOURCE,type=instanceMethod,class=RtDictionary,selector=associationAt:ifAbsent:,codeType=rtalkassociationAt: aKey ifAbsent: aBlock                        "Answer an Association, with aKey and its                         corresponding value if aKey exists in the                         receiver, else evaluate aBlock (with no arguments)."                    | index |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    ^Association                        key: (contents at: index)                        value: (contents at: index + 1)               :SOURCE,type=instanceMethod,class=RtDictionary,selector=select:,codeType=rtalkselect: aBlock                        "For each key/value pair in the receiver, evaluate                         aBlock with the value part of the pair as the argument.                         Answer a new object containing those key/value pairs                         for which aBlock evaluates to true."                    | answer |                    answer := self species new.                    self associationsDo: [ :each |                        (aBlock value: each value)                            ifTrue: [answer add: each]].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=associationsSelect:,codeType=rtalkassociationsSelect: aBlock                        "For each key/value pair in the receiver, evaluate                         aBlock with the association as the argument.                         Answer a new object containing those key/value pairs                         for which aBlock evaluates to true."                    | answer |                    answer := self species new.                    self associationsDo: [ :each |                        (aBlock value: each)                            ifTrue: [answer add: each]].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=atIgnoreCase:ifAbsent:,codeType=rtalkatIgnoreCase: aKey ifAbsent: aBlock                        "Answer the value of the key/value pair whose key                         equals aKey from the receiver.  If not found,                         evaluate aBlock (with no arguments).                         key can be symbol or string and case is ignore"                    | newKey |                    newKey := self riKeyList                                         detect:[ :k |                                              k equalsIgnoreCase: aKey asString]                                        ifNone:[nil].                    ^newKey == nil                        ifTrue:[aBlock value]                        ifFalse:[                            self any key isSymbol                                ifTrue:[self at: newKey asSymbol]                                ifFalse:[self at: newKey]]               :SOURCE,type=instanceMethod,class=RtDictionary,selector=includes:,codeType=rtalkincludes: anObject                        "Answer true if the receiver contains the                         key/value pair whose value equals anObject,                         else answer false."                    self do: [ :element |                        element = anObject                            ifTrue: [^true]].                    ^false               :SOURCE,type=instanceMethod,class=RtDictionary,selector=reject:,codeType=rtalkreject: aBlock                        "For each element in the receiver, evaluate aBlock                         with that element as the argument.  Answer a new                         collection containing those elements of the receiver                         for which aBlock evaluates to false."                    ^self select: [ :element |                        (aBlock value: element) not]               :SOURCE,type=instanceMethod,class=RtDictionary,selector==,codeType=rtalk=aDict                   "<modified:sys=GAKRE8CA,time=02/10/11 at 10:14:19 am>   "                        "true if all key values are same"                    | tmp |                    self == aDict                        ifTrue: [^true].                    (self class == aDict class)                        ifFalse: [^false].                    (aDict size = self size) ifFalse:[^false].                    self associationsDo:[ :a |                             tmp := aDict at:(a key) ifAbsent:[^false].                            (tmp = a value) ifFalse:[^false]].                    ^true               :SOURCE,type=instanceMethod,class=RtDictionary,selector=errorAbsentObject,codeType=rtalkerrorAbsentObject                        "Private - Report an error to the effect                         that the element desired was not found                         in the receiver collection."                    ^self error: 'object is not in the collection'               :SOURCE,type=instanceMethod,class=RtDictionary,selector=at:put:,codeType=rtalkat: aKey put: anObject                   "<modified:sys=GAKRE8CA,time=02/10/11 at 10:09:44 am>   "                        "Answer anObject.  If aKey exists in the receiver,                         replace the corresponding value with anObject, else                         add the aKey/anObject pair to the receiver."                    | index |                    aKey isNil                        ifTrue: [self error: 'key cannot be nil'].                    index := self findKeyIndex: aKey.                    (contents at: index) isNil                        ifTrue: [                            elementCount := elementCount + 1.                            contents at: index put: aKey.                            contents at: index + 1 put: anObject.                            self adjustSize]                        ifFalse: [contents at: index + 1 put: anObject].                    ^anObject               :SOURCE,type=instanceMethod,class=RtDictionary,selector=at:ifAbsent:,codeType=rtalkat: aKey ifAbsent: aBlock                        "Answer the value of the key/value pair whose key                         equals aKey from the receiver.  If not found,                         evaluate aBlock (with no arguments)."                    | index |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    ^contents at: index + 1               :SOURCE,type=instanceMethod,class=RtDictionary,selector=values,codeType=rtalkvalues                        "Answer a Bag containing all the values of the                         key/value pairs in the receiver dictionary."                    | answer index |                    answer := Bag new.                    1 to: contents size // 2 do: [ :i |                        index := i * 2 - 1.                        (contents at: index) isNil                            ifFalse: [                                answer add: (contents at: index + 1)]].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=remove:,codeType=rtalkremove: anObject                        "Answer anObject.  Remove the element equal                         to anObject from the receiver collection.  If                         such an element is not found, report an error."                    ^self                        remove: anObject                        ifAbsent: [self errorAbsentObject]               :SOURCE,type=instanceMethod,class=RtDictionary,selector=riSepStringBy:,codeType=rtalkriSepStringBy:aChar                        "a col of strings put into a string with no leading or trailing comma"                         | aStream |                    aStream := WriteStream on: (String new: 20).                    self asOrderedCollection do:[ :a |                              aStream nextPutAll:(a asString).                            aStream nextPut: aChar]                        ifLast:[ :a |                                 aStream nextPutAll:(a asString)].                    ^aStream contents               :SOURCE,type=instanceMethod,class=RtDictionary,selector=keyAtValue:ifAbsent:,codeType=rtalkkeyAtValue: anObject ifAbsent: aBlock                        "Answer the key in the receiver whose paired value                         equals anObject.  If not found, evaluate aBlock                         (with no arguments)."                    1 to: contents size by: 2 do: [ :index |                        (contents at: index + 1) = anObject                            ifTrue: [                                (contents at: index) == nil                                    ifFalse: [^contents at: index]]].                    ^aBlock value               :SOURCE,type=instanceMethod,class=RtDictionary,selector=asOrderedCollection,codeType=rtalkasOrderedCollection                        "Answer an OrderedCollection containing                         the elements of the receiver."                    ^(OrderedCollection new: self size)                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=RtDictionary,selector=detect:,codeType=rtalkdetect: aBlock                        "Answer the first element of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument).  If no such element                         is found, report an error."                    ^self                        detect: aBlock                        ifNone: [self errorAbsentObject]               :SOURCE,type=instanceMethod,class=RtDictionary,selector=deepCopy,codeType=rtalkdeepCopy                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:55:55 pm>   "                        "Answer a copy of the receiver with shallow                         copies of each element."                    | answer |                    answer := self species new.                    self associationsDo: [:element |                        answer add: element copy].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=size,codeType=rtalksize                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:53:20 pm>   "                        "Answer the number of elements contained                         in the receiver."                    ^elementCount               :SOURCE,type=instanceMethod,class=RtDictionary,selector=asSortedCollection,codeType=rtalkasSortedCollection                        "Answer a SortedCollection containing                         the elements of the receiver sorted                         in ascending order."                    ^(SortedCollection new: self size)                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=RtDictionary,selector=associationAt:,codeType=rtalkassociationAt: aKey                        "Answer the Association whose key equals aKey                         from the receiver.  If not found,                         report an error."                    ^self                        associationAt: aKey                        ifAbsent: [self errorAbsentKey]               :SOURCE,type=instanceMethod,class=RtDictionary,selector=detect:ifNone:,codeType=rtalkdetect: aBlock ifNone: exceptionBlock                        "Answer the first element of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument).  If no such element is                         found, evaluate exceptionBlock (with no arguments)."                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [^element]].                    ^exceptionBlock value               :SOURCE,type=instanceMethod,class=RtDictionary,selector=riDetect:do:ifNone:,codeType=rtalkriDetect: aBlock do:actionBlock ifNone: exceptionBlock                        "Answer the first element of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument).  If no such element is                         found, evaluate exceptionBlock (with no arguments). If                         found do the action block with the object"                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [^actionBlock value:element]].                    ^exceptionBlock value               :SOURCE,type=instanceMethod,class=RtDictionary,selector=do:,codeType=rtalkdo: aBlock                        "Answer the receiver.  For each value                         in the receiver, evaluate aBlock with                         that value as the argument."                    1 to: contents size by: 2 do: [ :index |                        (contents at: index) isNil                            ifFalse: [                                aBlock value:                                    (contents at: index + 1)]]               :SOURCE,type=instanceMethod,class=RtDictionary,selector=owner,codeType=rtalkowner                   "<modified:sys=GAKRE8CA,time=12/19/11 at 05:30:27 pm>   "                        "comment"                    ^owner               :SOURCE,type=instanceMethod,class=RtDictionary,selector=errorAbsentKey,codeType=rtalkerrorAbsentKey                        "Private - Report an error to the effect                         that the desired key was not found in the                         receiver."                    self error: 'Key is missing'               :SOURCE,type=instanceMethod,class=RtDictionary,selector=riDetectAll:,codeType=rtalkriDetectAll: aBlock                         "Answer all elements of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument)."                    | rtn |                    rtn := OrderedCollection new.                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [rtn add:element]].                    ^rtn               :SOURCE,type=instanceMethod,class=RtDictionary,selector=any,codeType=rtalkany                "                    Return any Association in the dictionary.  This is used when                    you just want any key/value pair in the dictionary, and you                    don't care which one.                "                    (elementCount = 0) ifTrue: [ ^Association new ].                    1 to: contents size by: 2 do: [:i |                        (contents at: i) notNil ifTrue: [                            ^Association key: (contents at: i) value: (contents at: (i + 1))                        ]                    ].               :SOURCE,type=instanceMethod,class=RtDictionary,selector=initialize:,codeType=rtalkinitialize: anInteger                        "Private - Initialize the instance variable                         elementCount to zero, contents to an Array                         of size anInteger."                    elementCount := 0.                    contents := Array new: anInteger               :SOURCE,type=instanceMethod,class=RtDictionary,selector=owner:,codeType=rtalkowner:aObject                   "<modified:sys=GAKRE8CA,time=12/19/11 at 05:30:15 pm>   "                        "comment"                    owner := aObject               :SOURCE,type=instanceMethod,class=RtDictionary,selector=findElementIndex:,codeType=rtalkfindElementIndex: anObject                        "Private - Answer the index position of anObject in the                         receiver or the first empty element position."                    | index indexedObject lastIndex |                    lastIndex := contents size.                    index := (anObject hash) \\ lastIndex + 1.                    [(indexedObject := contents at: index) = anObject]                        whileFalse: [                            (indexedObject == nil)                                ifTrue: [^index].                            (index := index + 1) > lastIndex                                ifTrue: [ "index wraparound"                                    index := 1]].                    ^index               :SOURCE,type=instanceMethod,class=RtDictionary,selector=errorNotIndexable,codeType=rtalkerrorNotIndexable                        "Private - Report an error to the effect that                         the receiver collection is not indexable."                    ^self error: self class name,                        's do not respond to indexing messages'               :SOURCE,type=instanceMethod,class=RtDictionary,selector=notEmpty,codeType=rtalknotEmpty                        "Answer true if the receiver collection contains                         one or more elements, else answer false."                    ^self size > 0               :SOURCE,type=instanceMethod,class=RtDictionary,selector=add:,codeType=rtalkadd: anAssociation                        "Answer anAssociation.  Add anAssociation to the                         receiver."                    self                        at: anAssociation key                        put: anAssociation value.                    ^anAssociation               :SOURCE,type=instanceMethod,class=RtDictionary,selector=remove:ifAbsent:,codeType=rtalkremove: anObject ifAbsent: aBlock                        "Remove the key/value pair whose value is anObject                         from the receiver dictionary.  This method                         reports an error since the values are                         not unique in a dictionary, the keys are."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=RtDictionary,selector=asBag,codeType=rtalkasBag                        "Answer a Bag containing the                         elements of the receiver."                    ^(Bag new)                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=RtDictionary,selector=keyAtValue:,codeType=rtalkkeyAtValue: anObject                        "Answer the key in the receiver whose paired value                         equals anObject.  If not found, answer nil."                    ^self keyAtValue: anObject ifAbsent: [nil]               :SOURCE,type=instanceMethod,class=RtDictionary,selector=isCollection,codeType=rtalkisCollection                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:54:56 pm>   "                        "Answer true if receiver is a kind of Collection."                    ^true               :SOURCE,type=instanceMethod,class=RtDictionary,selector=riDetectAll:ifNone:,codeType=rtalkriDetectAll:aBlock ifNone:aBlock2                        "returns a collection of all items for which the block                        returns true"                    | rtn |                    rtn := OrderedCollection new.                    self do:[ :e | (aBlock value:e)                                         ifTrue:[ rtn add:e]].                    rtn isEmpty                        ifTrue:[^(aBlock2 value)]                        ifFalse:[^rtn].               :SOURCE,type=instanceMethod,class=RtDictionary,selector=grow,codeType=rtalkgrow                        "Private - Answer the receiver doubled in                         size to accomodate more key/value                         pairs."                    | aDictionary |                    aDictionary := self species                        newSize: contents size. "this doubles the size"                    self associationsDo: [ :anAssociation |                        aDictionary add: anAssociation].                    contents := aDictionary contents               :SOURCE,type=instanceMethod,class=RtDictionary,selector=asAssociationOrderedCollection,codeType=rtalkasAssociationOrderedCollection                "                    Answer an ordered collection of the associations                    contained in the receiver.                    010811 JB Changed size from 'self size' to 'elementCount'                "                    | answer |                    answer := OrderedCollection new: elementCount.                    self associationsDo:                    [                         :assoc |                        answer add: assoc.                    ].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=shallowCopy,codeType=rtalkshallowCopy                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:53:51 pm>   "                        "Answer a copy of the receiver which shares                         the receiver elements."                    | answer |                    answer := self species new.                    self associationsDo: [:element |                        answer add: element].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=inject:into:,codeType=rtalkinject: initialValue into: aBinaryBlock                        "For each element in the receiver collection, evaluate                         aBinaryBlock with that element as the argument.  Starting                         with initialValue, the block is also provided with its own                         value from the previous evaluation.  Answer this value                         at the end of the block evaluations."                    | answer |                    answer := initialValue.                    self do: [ :element |                        answer := aBinaryBlock                            value: answer                            value: element].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=isEmpty,codeType=rtalkisEmpty                        "Answer true if the receiver collection                         contains no elements, else answer false."                    ^self size = 0               :SOURCE,type=instanceMethod,class=RtDictionary,selector=at:,codeType=rtalkat: aKey                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:56:07 pm>   "                   "<modified:sys=GAKRE8CA,time=02/10/11 at 10:10:07 am>   "                        "Answer the value of the key/value pair whose key                         equals aKey from the receiver.  If                         not found, report an error."                    | index |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^self errorAbsentKey].                    ^contents at: index + 1               :SOURCE,type=instanceMethod,class=RtDictionary,selector=asSet,codeType=rtalkasSet                        "Answer a Set containing the                         elements of the receiver."                    ^(Set new: self size)                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=RtDictionary,selector=findKeyIndex:,codeType=rtalkfindKeyIndex: key                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:48:10 pm>   "                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:40:39 pm>   "                        "Private - Answer the index position of the                         key/value pair in the receiver whose key equals                         aKey or the index of the first empty position                         where such an pair would be stored."                    | index lastIndex |                    lastIndex := contents size.                    index := ((key hash) \\ (lastIndex // 2))                        * 2 + 1.                    [key == (contents at: index)]                        whileFalse: [                            (contents at: index) isNil                                ifTrue: [^index].                            (index := index + 2) > lastIndex                                ifTrue: [ "index wraparound"                                    index := 1]].                    ^index               :SOURCE,type=instanceMethod,class=RtDictionary,selector=addAll:,codeType=rtalkaddAll: aCollection                        "Answer aCollection.  Add each element of                         aCollection to the elements of the receiver."                    aCollection do: [ :element | self add: element].                    ^aCollection               :SOURCE,type=instanceMethod,class=RtDictionary,selector=adjustSize,codeType=rtalkadjustSize                        "Private - Answer the receiver.  If the receiver is                         getting full, expand it to accomodate more objects."                    (elementCount * 20) >= (contents size - 2 * 9)                        ifTrue: [^self grow]               :SOURCE,type=instanceMethod,class=RtDictionary,selector=occurrencesOf:,codeType=rtalkoccurrencesOf: anObject                        "Answer the number of key/value pairs in the receiver,                         whose values are equal to anObject."                    | answer |                    answer := 0.                    self do: [ :element |                        element = anObject                            ifTrue:  [answer := answer + 1]].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=asAssociationSortedCollection,codeType=rtalkasAssociationSortedCollection                "                    Answer a sorted collection of the associations                    contained in the receiver. The associations are                    sorted in ascending key values.                "                    | answer |                    answer := SortedCollection new: self size.                    answer sortBlock: [ :a :b | a <= b].                    self associationsDo:                    [                         :assoc |                        answer add: assoc.                    ].                    ^answer               :SOURCE,type=instanceMethod,class=RtDictionary,selector=rehashFrom:,codeType=rtalkrehashFrom: anInteger                        "Private - Rehash the keys of the receiver                         from the index position anInteger                         to the last index position."                    | index size searchIndex anObject |                    size := contents size.                    index := anInteger.                    [(index := index + 2) > size                        ifTrue: [ "index wraparound"                            index := 1].                    (anObject := contents at: index) isNil]                        whileFalse: [ "test next key for relocation"                            searchIndex := self findKeyIndex: anObject.                            (contents at: searchIndex) isNil                                ifTrue: [ "found key to move"                                    contents                                        at: searchIndex                                        put: (contents at: index).                                    contents                                        at: index                                        put: nil.                                    contents                                        at: searchIndex + 1                                        put: (contents at: index + 1).                                    contents                                        at: index + 1                                        put: nil]]               :SOURCE,type=instanceMethod,class=RtDictionary,selector=includesKey:,codeType=rtalkincludesKey: aKey                        "Answer true if the receiver contains aKey,                         else answer false."                    ^(contents at: (self findKeyIndex: aKey)) notNil               :SOURCE,type=instanceMethod,class=BigInteger,selector=negated,codeType=rtalknegated                   "<modified:pgmr=mdr,time=01/04/13 at 05:54:50 pm>   "                        "Answer the negative value of the receiver."                    <jprim: /RtBigInteger primNegated>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=BigInteger,selector=asFloat,codeType=rtalkasFloat                   "<modified:pgmr=mdr,time=01/04/13 at 05:47:10 pm>   "                        "Answer the float value of the receiver."                    <jprim: /RtBigInteger primAsFloat>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=BigInteger,selector=bitXor:,codeType=rtalkbitXor: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 05:52:00 pm>   "                   "<modified:sys=GAKRE8CA,time=07/03/12 at 09:14:59 am>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 11:17:01 am>   "                       "Answer the receiver bit XORed                         with the argument anInteger."                    <jprim: /RtBigInteger primBitXor>                    ^anInteger bitXor: self               :SOURCE,type=instanceMethod,class=BigInteger,selector=asBytes,codeType=rtalkasBytes                   "<modified:pgmr=mdr,time=01/04/13 at 05:47:00 pm>   "                        "Answer the bytes of the receiver."                    <jprim: /RtBigInteger primAsBytes>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=BigInteger,selector=-,codeType=rtalk- aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 05:44:42 pm>   "                        "Answer the difference between                         the receiver and aNumber."                    <jprim: /RtBigInteger primSubtract>                    ^( aNumber - self ) negated               :SOURCE,type=instanceMethod,class=BigInteger,selector=/,codeType=rtalk/ aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 05:44:56 pm>   "                        "Answer the result of dividing                          the receiver by aNumber."                    <jprim: /RtBigInteger primDivide>                    ^aNumber / self               :SOURCE,type=instanceMethod,class=BigInteger,selector=+,codeType=rtalk+ aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 05:44:29 pm>   "                    "add an integer "                    <jprim: /RtBigInteger primAdd>                    ^aNumber + self               :SOURCE,type=instanceMethod,class=BigInteger,selector=hash,codeType=rtalkhash                   "<modified:pgmr=mdr,time=01/04/13 at 05:54:39 pm>   "                        "Answer the hash value of the receiver."                    <jprim: /RtBigInteger primHash>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=BigInteger,selector=bitOr:,codeType=rtalkbitOr: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 05:47:41 pm>   "                        "Answer an Integer representing the receiver                         bits ORed with the argument anInteger."                    <jprim: /RtBigInteger primBitOr>                    ^anInteger bitOr: self               :SOURCE,type=instanceMethod,class=BigInteger,selector=bitAnd:,codeType=rtalkbitAnd: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 05:47:31 pm>   "                        "Answer an Integer representing the receiver                         bits ANDed with the argument anInteger."                    <jprim: /RtBigInteger primBitAnd>                    ^anInteger bitAnd: self               :SOURCE,type=instanceMethod,class=BigInteger,selector=*,codeType=rtalk* aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 05:30:14 pm>   "                        "Answer the result of multiplying                         the receiver by aNumber."                    <jprim: /RtBigInteger primMultiply>                    ^aNumber * self               :SOURCE,type=instanceMethod,class=BigInteger,selector=<=,codeType=rtalk<= aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 05:45:39 pm>   "                        "Answer true if the receiver is less than                         or equal to aNumber, else answer false."                    <jprim: /RtBigInteger primLessOrEqual>                    ^aNumber >= self               :SOURCE,type=instanceMethod,class=BigInteger,selector=\\,codeType=rtalk\\ aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 05:46:45 pm>   "                        "Answer the integer remainder after dividing                         the receiver by aNumber with truncation                         towards negative infinity."                    <jprim: /RtBigInteger primBB>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=BigInteger,selector=~=,codeType=rtalk~= aNumber                   "<modified:sys=GAKRE8CA,time=02/05/12 at 11:10:55 am>   "                        "Answer true if the receiver is not                         equal to aNumber, else answer false."                    ^( self = aNumber ) not.               :SOURCE,type=instanceMethod,class=BigInteger,selector=bitShift:,codeType=rtalkbitShift: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 05:51:52 pm>   "                        "Answer an integer which is the                         receiver shifted left anInteger                         number of bit positions if anInteger                         is positive, or shifted right for                         anInteger negated number of bit                         positions if anInteger is negative."                    | total |                    <jprim: /RtBigInteger primBitShift>                    total := self.                    anInteger >= 0                        ifTrue: [anInteger timesRepeat: [total := total * 2].                                    ^total]                        ifFalse: [anInteger negated timesRepeat: [total := total // 2].                                    ^total].               :SOURCE,type=instanceMethod,class=BigInteger,selector=//,codeType=rtalk// aNumber                   "<modified:sys=GAKRE8CA,time=02/05/12 at 12:08:37 am>   "                        "Answer the integer result of dividing the                         receiver by aNumber with truncation                         towards negative infinity."                    ^self / aNumber               :SOURCE,type=instanceMethod,class=BigInteger,selector=|,codeType=rtalk| anInteger                   "<modified:sys=GAKRE8CA,time=02/05/12 at 11:07:47 am>   "                        "Answer an Integer representing the receiver bits ORed with                         the argument anInteger."                    ^self bitOr: anInteger               :SOURCE,type=instanceMethod,class=BigInteger,selector=>=,codeType=rtalk>= aNumber                   "<modified:sys=GAKRE8CA,time=02/06/12 at 05:52:45 pm>   "                        "Answer true if the receiver is greater than                         or equal to aNumber, else answer false."                    ^(self < aNumber) not               :SOURCE,type=instanceMethod,class=BigInteger,selector=>,codeType=rtalk> aNumber                   "<modified:sys=GAKRE8CA,time=02/06/12 at 05:53:24 pm>   "                        "Answer true if the receiver is greater                         than aNumber, else answer false."                    ^ ( self <= aNumber ) not               :SOURCE,type=instanceMethod,class=BigInteger,selector==,codeType=rtalk= aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 05:46:02 pm>   "                        "Answer boolean."                    <jprim: /RtBigInteger primEquals>                    ^aNumber = self               :SOURCE,type=instanceMethod,class=BigInteger,selector=<,codeType=rtalk< aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 05:45:26 pm>   "                        "Answer true if the receiver is less                         than aNumber, else answer false."                    <jprim: /RtBigInteger primLessThan>                    ^aNumber > self               :SOURCE,type=instanceMethod,class=Integer,selector=bitInvert,codeType=rtalkbitInvert                        "Answer an integer whose bit values are                         the inverse of the bit values of the receiver."                    ^self negated - 1               :SOURCE,type=instanceMethod,class=Integer,selector=bitOr:,codeType=rtalkbitOr: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 04:00:21 pm>   "                        "Answer an Integer representing the receiver                         bits ORed with the argument anInteger."                    <jprim: /IntegerPrims primIntegerBitOr>                    ^anInteger bitOr: self               :SOURCE,type=instanceMethod,class=Integer,selector=random,codeType=rtalkrandom                   "<modified:sys=GAKRE8CA,time=03/25/11 at 01:13:37 pm>   "                        "Answers a random number between 0 and (but not equal to)                         the receiver"                    ^Integer random \\ self               :SOURCE,type=instanceMethod,class=Integer,selector=hash,codeType=rtalkhash                        "Answer the positive integer hash                         value for the receiver."                    ^self abs               :SOURCE,type=instanceMethod,class=Integer,selector=increment:,codeType=rtalkincrement: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 04:01:03 pm>   "                   "<modified:sys=GAKRE8CA,time=01/30/12 at 08:48:21 am>   "                        "Answer self incremented internally by anInteger"                    <jprim: /IntegerPrims primIntegerInc>                    ^nil               :SOURCE,type=instanceMethod,class=Integer,selector=bitTest:,codeType=rtalkbitTest: anInteger                        "test bit and return 'true' for 1"                    1 > anInteger                        ifTrue: [                            self error: 'bitAt: index must be greater than zero'].                    ^ 1 = (1 bitAnd: (self bitShift: (anInteger - 1) negated))               :SOURCE,type=instanceMethod,class=Integer,selector=not,codeType=rtalknot                        "converts 0 to 1 and 1 to zero"                    self = 0                        ifTrue:[^1]                        ifFalse:[^0]               :SOURCE,type=instanceMethod,class=Integer,selector=bitReset:,codeType=rtalkbitReset: anInteger                        "set bit and return a new integer"                    1 > anInteger                        ifTrue: [                            self error: 'bitAt: index must be greater than zero'].                    ^ self bitAnd:((1 bitShift:( anInteger - 1))bitXor:16r3FFFFFFF).               :SOURCE,type=instanceMethod,class=Integer,selector=bitSet:,codeType=rtalkbitSet: anInteger                        "set bit and return a new integer"                    1 > anInteger                        ifTrue: [                            self error: 'bitAt: index must be greater than zero'].                    ^ self bitOr:(1 bitShift:( anInteger - 1)).               :SOURCE,type=instanceMethod,class=Integer,selector=printOn:,codeType=rtalkprintOn: aStream                        "Append the ASCII representation                         of the receiver to aStream."                    | value divisor |                    (value := self) < 0                        ifTrue: [                            aStream nextPut: $-.                            value := 0 - self].                    divisor := 10.                    [divisor > value]                        whileFalse: [divisor := divisor * 10].                    [(divisor := divisor // 10) > 1]                        whileTrue: [                            aStream nextPut:                                (Character value: value // divisor + 48).                            value := value \\ divisor].                    aStream nextPut: (Character value: value + 48)               :SOURCE,type=instanceMethod,class=Integer,selector=riAsHexStringSize:,codeType=rtalkriAsHexStringSize:aInt                   "<modified:sys=GAKRE8CA,time=05/14/11 at 03:19:14 pm>   "                        "comment"                    ^self riAsHexString riPadStartWith:$0 to:aInt               :SOURCE,type=instanceMethod,class=Integer,selector=>,codeType=rtalk> aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 03:59:19 pm>   "                        "Answer true if the receiver is greater                         than aNumber, else answer false."                    <jprim: /IntegerPrims primIntegerGreaterThan>                    ^aNumber < self               :SOURCE,type=instanceMethod,class=Integer,selector=bitAt:,codeType=rtalkbitAt: anInteger                        "Answer 0 if the bit at index position anInteger                         in the receiver is 0, else answer 1."                    1 > anInteger                        ifTrue: [                            self error: 'bitAt: index must be greater than zero'].                    ^self >= 0                        ifTrue: [1 bitAnd: (self bitShift: 1 - anInteger)]                        ifFalse: [                            1 - (1 bitAnd: (self bitInvert                                bitShift: 1 - anInteger))]               :SOURCE,type=instanceMethod,class=Integer,selector==,codeType=rtalk= aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 03:59:11 pm>   "                        "Answer true if the receiver is equal                         to aNumber, else answer false."                    <jprim: /IntegerPrims primIntegerEquals>                    ^aNumber = self               :SOURCE,type=instanceMethod,class=Integer,selector=<,codeType=rtalk< aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 03:58:16 pm>   "                        "Answer true if the receiver is less                         than aNumber, else answer false."                    <jprim: /IntegerPrims primIntegerLessThan>                    ^aNumber > self               :SOURCE,type=instanceMethod,class=Integer,selector=>=,codeType=rtalk>= aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 03:59:29 pm>   "                        "Answer true if the receiver is greater than                         or equal to aNumber, else answer false."                    <jprim: /IntegerPrims primIntegerGreaterOrEqual>                    ^aNumber <= self               :SOURCE,type=instanceMethod,class=Integer,selector=<=,codeType=rtalk<= aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 03:58:57 pm>   "                        "Answer true if the receiver is less than                         or equal to aNumber, else answer false."                    <jprim: /IntegerPrims primIntegerLessOrEqual>                    ^aNumber >= self               :SOURCE,type=instanceMethod,class=Integer,selector=-,codeType=rtalk- aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 03:57:13 pm>   "                        "Answer the difference between                         the receiver and aNumber."                    <jprim: /IntegerPrims primIntegerSub>                    ^( aNumber - self ) negated               :SOURCE,type=instanceMethod,class=Integer,selector=printOn:base:,codeType=rtalkprintOn: aStream base: anInteger                   "<modified:sys=GAKRE8CA,time=05/14/11 at 03:17:07 pm>   "                        "Append the ASCII representation of                         the receiver with radix b to aStream."                    | aString tempStream n |                    anInteger = 10                        ifFalse: ["print radix"                            anInteger printOn: aStream base: 10.                            aStream nextPut: $r].                    (n := self) < 0                        ifTrue: [                            aStream nextPut: $-.                            n := self negated].                    aString := String new: 16.                    tempStream := WriteStream on: aString.                    [anInteger <= n]                        whileTrue: [                            tempStream nextPut: (Character digitValue: n \\ anInteger).                            n := n // anInteger].                    aStream nextPut: (Character digitValue: n).                    n := tempStream position.                    aString := tempStream contents.                    [n = 0]                        whileFalse: [                            aStream nextPut: (aString at: n).                            n := n - 1]               :SOURCE,type=instanceMethod,class=Integer,selector=bitShift:,codeType=rtalkbitShift: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 04:00:41 pm>   "                        "Answer an integer which is the                         receiver shifted left anInteger                         number of bit positions if anInteger                         is positive, or shifted right for                         anInteger negated number of bit                         positions if anInteger is negative."                    | total |                    <jprim: /IntegerPrims primIntegerBitShift>                    total := self.                    anInteger >= 0                        ifTrue: [anInteger timesRepeat: [total := total * 2].                                    ^total]                        ifFalse: [anInteger negated timesRepeat: [total := total // 2].                                    ^total].               :SOURCE,type=instanceMethod,class=Integer,selector=factorial,codeType=rtalkfactorial                        "Answer the factorial of the receiver."                    self > 1                        ifTrue: [^(self - 1) factorial * self].                    self < 0                        ifTrue: [^self error: 'negative factorial'].                    ^1               :SOURCE,type=instanceMethod,class=Integer,selector=|,codeType=rtalk| anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 04:02:45 pm>   "                        "Answer an Integer representing the receiver bits ORed with                         the argument anInteger."                    <jprim: /IntegerPrims primIntegerBar>                    ^anInteger | self               :SOURCE,type=instanceMethod,class=Integer,selector=newMutable,codeType=rtalknewMutable                   "<modified:pgmr=mdr,time=01/04/13 at 04:01:21 pm>   "                        "return a independent and non cached copy of self"                    <jprim: /IntegerPrims primIntegerNew>                    ^nil               :SOURCE,type=instanceMethod,class=Integer,selector=/,codeType=rtalk/ aNumber                        "Answer the result of dividing                         the receiver by aNumber."                    | numerator denominator gcd |                    aNumber class == Float                        ifTrue: [^self asFloat / aNumber].                    numerator := self * aNumber denominator.                    (denominator := aNumber numerator) < 0                        ifTrue: [                            denominator := 0 - denominator.                            numerator := 0 - numerator].                    (gcd := numerator gcd: denominator) = denominator                        ifTrue: [^numerator // gcd]                        ifFalse: [                            ^Fraction                                numerator: numerator // gcd                                denominator: denominator // gcd]               :SOURCE,type=instanceMethod,class=Integer,selector=~=,codeType=rtalk~= aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 04:02:57 pm>   "                        "Answer true if the receiver is not                         equal to aNumber, else answer false."                    <jprim: /IntegerPrims primIntegerNotEquals>                    ^true               :SOURCE,type=instanceMethod,class=Integer,selector=radix:,codeType=rtalkradix: anInteger                        "Answer a string which is the ASCII representation                         of the receiver with radix anInteger."                    | aStream |                    aStream := WriteStream on: (String new: 16).                    self printOn: aStream base: anInteger.                    ^aStream contents               :SOURCE,type=instanceMethod,class=Integer,selector=truncated,codeType=rtalktruncated                        "Answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Integer,selector=+,codeType=rtalk+ aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 03:57:06 pm>   "                        "Answer the sum of the receiver and aNumber."                    <jprim: /IntegerPrims primIntegerAdd>                    ^aNumber + self               :SOURCE,type=instanceMethod,class=Integer,selector=at:,codeType=rtalkat: index                   "<modified:pgmr=mdr,time=01/04/13 at 04:03:38 pm>   "                        "Private - Answer the index'th byte of the receiver."                    <jprim: /IntegerPrims primIntegerAt>                    index <= 0                        ifTrue: [ self error: 'byteAt: index must be greater than zero' ].                    ^( self abs bitShift: 1 - index * 8 ) \\ 256.               :SOURCE,type=instanceMethod,class=Integer,selector=*,codeType=rtalk* aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 03:56:33 pm>   "                        "Answer the result of multiplying                         the receiver by aNumber."                    <jprim: /IntegerPrims primIntegerMult>                    ^aNumber * self               :SOURCE,type=instanceMethod,class=Integer,selector=signedAt:,codeType=rtalksignedAt: index                        "Private - Answer the index'th signed byte of the receiver."                    index <= 0                        ifTrue: [ self error: 'byteAt: index must be greater than zero' ].                    ^( self bitShift: 1 - index * 8 ) \\ 256.               :SOURCE,type=instanceMethod,class=Integer,selector=reciprocal,codeType=rtalkreciprocal                        "Answer one divided by the receiver."                    ^1 / self               :SOURCE,type=instanceMethod,class=Integer,selector=printPaddedTo:with:,codeType=rtalkprintPaddedTo: anInteger with: aChar                   "<modified:sys=GAKRE8CA,time=05/14/11 at 03:18:10 pm>   "                        "Answer the string containing the ASCII                         representation of the receiver padded                         on the left with aChar to be at least                         anInteger characters."                    | aStream padding digits|                    aStream := WriteStream on: (String new: 10).                    self printOn: aStream base: 10.                    digits := aStream contents.                    padding := anInteger - digits size.                    padding > 0                        ifTrue: [                            padding := ((String new: padding)                                atAllPut: aChar;                                yourself)]                        ifFalse:[padding := ''].                    ^padding, digits               :SOURCE,type=instanceMethod,class=Integer,selector=quo:,codeType=rtalkquo: aNumber                   "<modified:pgmr=mdr,time=08/03/13 at 05:06:51 pm>   "                 "Answer the integer quotient of the receiver                         divided by aNumber with truncation toward zero."                    <jprim: /IntegerPrims primIntegerQuo>                    aNumber = 0 ifTrue: [ ^self zeroDivisor ].                    ( aNumber isInteger and: [ self abs < aNumber ] )                        ifTrue: [ ^ 0 ]                        ifFalse: [ ^( self / aNumber ) truncated ].         :SOURCE,type=instanceMethod,class=Integer,selector=bitXor:,codeType=rtalkbitXor: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 04:00:47 pm>   "                       "Answer the receiver bit XORed                         with the argument anInteger."                    <jprim: /IntegerPrims primIntegerBitXor>                    ^anInteger bitXor: self               :SOURCE,type=instanceMethod,class=Integer,selector=rounded,codeType=rtalkrounded                        "Answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Integer,selector=zeroDivisor,codeType=rtalkzeroDivisor                        "Private - Report an error to the effect that                         division by zero was attempted."                    self error: 'divisor is zero'               :SOURCE,type=instanceMethod,class=Integer,selector=//,codeType=rtalk// aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 03:57:51 pm>   "                   "<modified:sys=GAKRE8CA,time=04/25/11 at 12:25:58 pm>   "                        "Answer the qotient of dividing the                         receiver by aNumber with truncation                         towards negative infinity."                    <jprim: /IntegerPrims primIntegerFF>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Integer,selector=bitAnd:,codeType=rtalkbitAnd: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 04:00:11 pm>   "                        "Answer an Integer representing the receiver                         bits ANDed with the argument anInteger."                    <jprim: /IntegerPrims primIntegerBitAnd>                    ^anInteger bitAnd: self               :SOURCE,type=instanceMethod,class=Integer,selector=riAsHexString,codeType=rtalkriAsHexString                   "<modified:sys=GAKRE8CA,time=05/14/11 at 03:19:00 pm>   "                        "comment"                    | rtn      aString tempStream n |                    rtn := ReadWriteStream on:(String new:8).                    (n := self) < 0                        ifTrue: [                            rtn nextPut: $-.                            n := self negated].                    aString := String new: 16.                    tempStream := WriteStream on: aString.                    [16 <= n]                        whileTrue: [                            tempStream nextPut: (Character digitValue: n \\ 16).                            n := n // 16].                    rtn nextPut: (Character digitValue: n).                    n := tempStream position.                    aString := tempStream contents.                    [n = 0]                        whileFalse: [                            rtn nextPut: (aString at: n).                            n := n - 1].                    ^rtn contents trimBlanks               :SOURCE,type=instanceMethod,class=Integer,selector=asCharacter,codeType=rtalkasCharacter                        "Answer the character whose ASCII encoding                         matches the value of the receiver."                    ^Character value: self               :SOURCE,type=instanceMethod,class=Integer,selector=rem:,codeType=rtalkrem: aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 04:01:53 pm>   "                        "Answer the integer remainder after dividing                         the receiver by aNumber with truncation                         towards zero."                    <jprim: /IntegerPrims primIntegerRem>                    aNumber = 0 ifTrue: [^self zeroDivisor].                    ^self - ((self / aNumber) truncated * aNumber)               :SOURCE,type=instanceMethod,class=Integer,selector=timesRepeat:,codeType=rtalktimesRepeat: aBlock                        "Evaluate aBlock n number of times,                         where n is the receiver."                    | anInteger |                    anInteger := self.                    [anInteger > 0] whileTrue: [                        anInteger := anInteger - 1.                        aBlock value]               :SOURCE,type=instanceMethod,class=Integer,selector=replaceWith:,codeType=rtalkreplaceWith:aInt                   "<modified:pgmr=mdr,time=01/04/13 at 04:02:28 pm>   "                        "replace the body with aInt."                    <jprim: /IntegerPrims primIntegerReplace>                    ^self               :SOURCE,type=instanceMethod,class=Integer,selector=basicHash,codeType=rtalkbasicHash                        "Answer the positive integer hash                         value for the receiver."                    ^self abs               :SOURCE,type=instanceMethod,class=Integer,selector=isInteger,codeType=rtalkisInteger                        "Answer true if receiver is a kind of Integer."                    ^true               :SOURCE,type=instanceMethod,class=Integer,selector=negated,codeType=rtalknegated                        "Answer the negative value of the receiver."                    ^0 - self               :SOURCE,type=instanceMethod,class=Integer,selector=\\,codeType=rtalk\\ aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 03:59:41 pm>   "                   "<modified:sys=GAKRE8CA,time=04/25/11 at 09:31:09 am>   "                        "Answer the integer remainder after dividing                         the receiver by aNumber with truncation                         towards negative infinity."                    <jprim: /IntegerPrims primIntegerBB>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Integer,selector=asFloat,codeType=rtalkasFloat                        "Answer the floating point                         representation of the receiver."                    ^Float fromInteger: self               :SOURCE,type=instanceMethod,class=Integer,selector=asInteger,codeType=rtalkasInteger                        "Answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Integer,selector=gcd:,codeType=rtalkgcd: anInteger                        "Answer the greatest common divisor                         between the receiver and anInteger."                    | u v r |                    u := self abs.                    v := anInteger abs.                    [v = 0]                        whileFalse: [                            r := u \\ v.                            u := v.                            v := r].                    ^u               :SOURCE,type=instanceMethod,class=Integer,selector=printPaddedTo:,codeType=rtalkprintPaddedTo: anInteger                   "<modified:sys=GAKRE8CA,time=05/14/11 at 03:17:48 pm>   "                        "Answer the string containing the ASCII                         representation of the receiver padded                         on the left with blanks to be at least                         anInteger characters."                    | aStream padding digits|                    aStream := WriteStream on: (String new: 10).                    self printOn: aStream base: 10.                    digits := aStream contents.                    padding := anInteger - digits size.                    padding > 0                        ifTrue: [                            padding := ((String new: padding)                                atAllPut: $ ;                                yourself)]                        ifFalse:[padding := ''].                    ^padding, digits               :SOURCE,type=instanceMethod,class=Symbol,selector=asCompactString,codeType=rtalkasCompactString                        " Answer the most compact string containing the                         characters of the receiver. "                    ^self asString               :SOURCE,type=instanceMethod,class=Symbol,selector=replaceFrom:to:with:startingAt:,codeType=rtalkreplaceFrom: start                    to: stop                    with: aString                    startingAt: repStart                        "Replace the characters of the receiver at index                         positions start through stop with consecutive                         characters of aString beginning at index                         position repStart.  This message is not valid                         for symbols, since they are not allowed to change."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=Symbol,selector=fromString:,codeType=rtalkfromString:aString                        "comment"                    ^aString asSymbol               :SOURCE,type=instanceMethod,class=Symbol,selector=at:put:,codeType=rtalkat: anInteger put: aCharacter                        "Replace the character in the receiver indexed by                         anInteger with the argument aCharacter.  This                         message is not valid for symbols, since they                         are not allowed to change."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=Symbol,selector=replace:with:,codeType=rtalkreplace: count with: aCollection                        "Replace count elements of the receiver                         with elements of aCollection.  This                         message is not valid for symbols, since they                         are not allowed to change."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=Symbol,selector=initContents:,codeType=rtalkinitContents: aString                        "Private - initialize the receiver to contain                         the character sequence in aString."                    super                        replaceFrom: 1 to: aString size                        with: aString                        startingAt: 1               :SOURCE,type=instanceMethod,class=Symbol,selector=isSymbol,codeType=rtalkisSymbol                        "Private - Answer true if receiver is an instance of class                         Symbol or one of its subclasses, else answer false."                    ^true               :SOURCE,type=instanceMethod,class=Symbol,selector=hash,codeType=rtalkhash                   "<modified:pgmr=mdr,time=01/04/13 at 06:57:05 pm>   "                        "Answer the integer hash                         of the receiver."                	<jprim: /ByteStringPrims primStringHash>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Symbol,selector=basicHash,codeType=rtalkbasicHash                        "Answer the integer hash                         of the receiver."                    ^self hash               :SOURCE,type=instanceMethod,class=Symbol,selector=asSymbol,codeType=rtalkasSymbol                        "Answer a Symbol for the receiver.  The receiver                         itself is answered since it is a Symbol."                    ^self               :SOURCE,type=instanceMethod,class=Symbol,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a shallow copy of the receiver.                         Because symbols are unique (cannot be                         copied), answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Symbol,selector=equals:,codeType=rtalkequals: aSymbol                   "<modified:pgmr=mdr,time=01/04/13 at 06:58:48 pm>   "                        "Answer true if the receiver is equal to                         the argument aSymbol, else answer false.                         Note that the comparison is case sensitive."                	<jprim: /ByteStringPrims primStringEquals>                    ^false               :SOURCE,type=instanceMethod,class=Symbol,selector=replaceFrom:to:withObject:,codeType=rtalkreplaceFrom: start to: stop withObject: aCharacter                        "Replace the characters of the receiver                         at index positions start through stop                         with aCharacter.  This message is not valid                         for symbols, since they are not allowed to change."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=Symbol,selector=replaceBytesFrom:to:with:startingAt:,codeType=rtalkreplaceBytesFrom: byteStart                    to: byteStop                    with: aVariableByteObject                    startingAt: byteRepStart                        "Private - replace the bytes of the receiver at index                         positions start through stop with consecutive                         bytes of aVariableByteObject beginning at index                         position repStart.  This message is not valid                         for symbols, since they are not allowed to change."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=Symbol,selector=species,codeType=rtalkspecies                        "Answer class String as the                         species of symbols."                    ^String               :SOURCE,type=instanceMethod,class=Symbol,selector=deepCopy,codeType=rtalkdeepCopy                        "Answer a copy of the receiver with shallow                         copies of each instance variable.  Because                         symbols are unique (cannot be copied),                         answer the receiver."                     ^self               :SOURCE,type=instanceMethod,class=Symbol,selector==,codeType=rtalk= aSymbol                   "<modified:pgmr=mdr,time=01/04/13 at 06:58:08 pm>   "                        "Answer true if the receiver object is the                         the argument aSymbol, else answer false."                	<jprim: /ObjectPrims primObjectIdentEquals>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Symbol,selector=asString,codeType=rtalkasString                        "Answer a String of the characters                         contained by the receiver."                    ^(String new: self size)                        replaceFrom: 1                        to: self size                        with: self               :SOURCE,type=instanceMethod,class=Symbol,selector=fullCopy,codeType=rtalkfullCopy                        "Answer a shallow copy of the receiver.                         Because symbols are unique (cannot be                         copied), answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=SortedCollection,selector=addAll:,codeType=rtalkaddAll: aCollection                        "Answer aCollection.  Add all the elements                         in aCollection to the receiver in sorted                         order."                    aCollection do: [ :element |                        super addLast: element].                    self reSort.                    ^aCollection               :SOURCE,type=instanceMethod,class=SortedCollection,selector=addAllLast:,codeType=rtalkaddAllLast: aCollection                        "Add all the elements of aCollection to the                         receiver after its last element.  This                         method reports an error since the sortBlock                         determines element order."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=SortedCollection,selector=add:,codeType=rtalkadd: anObject                        "Answer anObject.  Add anObject to the                         receiver in sorted position."                    | index element |                    endPosition = contents size                        ifTrue: [self putSpaceAtEnd].                    index := endPosition.                    endPosition := endPosition + 1.                    [index < startPosition]                        whileFalse: [                            element := contents at: index.                            (sortBlock                                    value: anObject                                    value: element)                                ifFalse: [                                    ^contents at: index + 1                                        put: anObject].                            contents at: index + 1 put: element.                            index := index - 1].                     ^contents at: index + 1 put: anObject               :SOURCE,type=instanceMethod,class=SortedCollection,selector=sortBlock,codeType=rtalksortBlock                        "Answer the block that determines sort                         ordering for the receiver."                    ^sortBlock               :SOURCE,type=instanceMethod,class=SortedCollection,selector=at:put:,codeType=rtalkat: anInteger put: anObject                        "Replace the element at index position anInteger                         in the receiver collection with anObject.  This                         method reports an error since the sortBlock                         determines element order."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=SortedCollection,selector=reSort,codeType=rtalkreSort                        "Private - Answer the receiver collection                         resorted according to sortBlock."                    self sort: startPosition to: endPosition               :SOURCE,type=instanceMethod,class=SortedCollection,selector=add:before:,codeType=rtalkadd: newObject before: oldObject                        "Add newObject before the element oldObject in the                         receiver.  This method reports an error since                         the sortBlock determines element order."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=SortedCollection,selector=grow,codeType=rtalkgrow                        "Private - Answer the receiver doubled in                         size to accomodate more elements."                    | aBlock |                    aBlock := sortBlock.                    super grow.                    sortBlock := aBlock               :SOURCE,type=instanceMethod,class=SortedCollection,selector=select:,codeType=rtalkselect: aBlock                "                    It seems clear to me that the collection derived from 'select:' should obey the                    same sorting rules as the original collection.                      JB 060321                "                    | rtn |                                    rtn := super select: aBlock.                    rtn sortBlock: sortBlock.                    ^rtn               :SOURCE,type=instanceMethod,class=SortedCollection,selector=addLast:,codeType=rtalkaddLast: anObject                        "Add anObject after the last element of the                         receiver.  This method reports an error since                         the sortBlock determines element order."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=SortedCollection,selector=collect:,codeType=rtalkcollect: aBlock                "                    It seems clear to me that the collection derived from 'collect:' should obey the                    same sorting rules as the original collection.                      JB 060321                "                    | rtn |                    rtn := super collect: aBlock.                    rtn sortBlock: sortBlock.                    ^rtn               :SOURCE,type=instanceMethod,class=SortedCollection,selector=add:after:,codeType=rtalkadd: newObject after: oldObject                        "Add newObject after the element oldObject in the                         receiver.  This method reports an error since                         the sortBlock determines element order."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=SortedCollection,selector=addAllFirst:,codeType=rtalkaddAllFirst: aCollection                        "Add all the elements of aCollection to the                         receiver before its first element.  This                         method reports an error since the sortBlock                         determines element order."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=SortedCollection,selector=copyFrom:to:,codeType=rtalkcopyFrom: beginning to: end                        "Answer a SortedCollection containing the                         elements of the receiver from index position                         beginning through index position end."                    | answer |                    answer := self species new: self size.                    answer sortBlock: sortBlock.                    beginning to: end do: [:i |                        answer add: (self at: i)].                    ^answer               :SOURCE,type=instanceMethod,class=SortedCollection,selector=sortBlock:,codeType=rtalksortBlock: aBlock                        "Answer the receiver.  Set the sort block for                         the receiver to aBlock and resort the receiver."                    sortBlock := aBlock.                    self reSort               :SOURCE,type=instanceMethod,class=SortedCollection,selector=sort:to:,codeType=rtalksort: lower to: upper                        "Private - Sort the elements in the receiver                         that are between lower and upper index positions."                    | t terminate mid low up swapper i lastLow |                    low := lower.                    up := upper.                    [(terminate := (i := up - low) <= 1)                        ifTrue: [ "only 0, 1 or 2 elements"                            i = 1                                ifTrue: [ "2 elements"                                    (sortBlock                                        value: (i := contents at: up)                                        value: (swapper := contents at: low))                                        ifTrue: [ "exchange"                                            contents at: low put: i.                                            contents at: up put: swapper]]]                        ifFalse: [                            mid := low + up // 2.                            t := contents at: mid.                            contents at: mid put: (contents at: low).                            i := lastLow := low.                            [i := i + 1.                            (sortBlock value: (contents at: i)                                    value: t)                                ifTrue: [                                    (lastLow := lastLow + 1) = i                                        ifFalse: [                                            swapper := contents at: i.                                            contents at: i                                                put: (contents at: lastLow).                                            contents at: lastLow                                                put: swapper]].                            i < up]                                whileTrue: [].                            contents at: low put: (contents at: lastLow).                            contents at: lastLow put: t.                            mid < lastLow                                ifTrue: [                                    self sort: lastLow + 1 to: up.                                    up := lastLow - 1]                                ifFalse: [                                    self sort: low to: lastLow - 1.                                    low := lastLow + 1]].                    terminate]                        whileFalse: []               :SOURCE,type=instanceMethod,class=SortedCollection,selector=addFirst:,codeType=rtalkaddFirst: anObject                        "Add anObject before the first element of the                         receiver.  This method reports an error since                         the sortBlock determines element order."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=Fraction,selector=reciprocal,codeType=rtalkreciprocal                        "Answer the reciprocal of the receiver by                         dividing the denominator by the numerator."                    ^denominator / numerator               :SOURCE,type=instanceMethod,class=Fraction,selector=truncated,codeType=rtalktruncated                        "Answer the receiver as a kind of                         Integer truncating the fraction part."                    ^numerator quo: denominator               :SOURCE,type=instanceMethod,class=Fraction,selector=negated,codeType=rtalknegated                        "Answer an instance of class Fraction                         which is the negative of the receiver."                    ^Fraction                        numerator: self numerator negated                        denominator: self denominator               :SOURCE,type=instanceMethod,class=Fraction,selector=printHex:,codeType=rtalkprintHex: aStream                "                    This method appends the hexadecimal representation of the                    receiver onto aStream.  JB 97.03.28                "                    self numerator printHex: aStream.                    self denominator printHex: aStream.                    ^aStream.               :SOURCE,type=instanceMethod,class=Fraction,selector=asFloat,codeType=rtalkasFloat                        "Answer the receiver as                         a floating point number."                    ^numerator asFloat / denominator asFloat               :SOURCE,type=instanceMethod,class=Fraction,selector=-,codeType=rtalk- aNumber                        "Answer the difference between                         the receiver and aNumber."                    ^((numerator * aNumber denominator) -                        (denominator * aNumber numerator)) /                            (denominator * aNumber denominator)               :SOURCE,type=instanceMethod,class=Fraction,selector=/,codeType=rtalk/ aNumber                        "Answer the result of dividing                         the receiver by aNumber."                    ^(numerator * aNumber denominator) /                        (denominator * aNumber numerator)               :SOURCE,type=instanceMethod,class=Fraction,selector=numerator,codeType=rtalknumerator                        "Answer the numerator of the receiver."                    ^numerator               :SOURCE,type=instanceMethod,class=Fraction,selector=hash,codeType=rtalkhash                        "Answer the integer hash value for the receiver."                             ^self asFloat hash               :SOURCE,type=instanceMethod,class=Fraction,selector=+,codeType=rtalk+ aNumber                        "Answer sum of the receiver and aNumber."                    ^((numerator * aNumber denominator) +                        (denominator * aNumber numerator)) /                            (denominator * aNumber denominator)               :SOURCE,type=instanceMethod,class=Fraction,selector=*,codeType=rtalk* aNumber                        "Answer the result of multiplying                         the receiver by aNumber."                    ^(numerator * aNumber numerator) /                        (denominator * aNumber denominator)               :SOURCE,type=instanceMethod,class=Fraction,selector=riAsString,codeType=rtalkriAsString                        "comment"                    ^'(',(numerator asString),'/',(denominator asString),')'               :SOURCE,type=instanceMethod,class=Fraction,selector=denominator,codeType=rtalkdenominator                        "Answer the denominator of the receiver."                    ^denominator               :SOURCE,type=instanceMethod,class=Fraction,selector=asInteger,codeType=rtalkasInteger                        "Answer the integer closes to self."                    ^self rounded               :SOURCE,type=instanceMethod,class=Fraction,selector=numerator:denominator:,codeType=rtalknumerator: n denominator: d                        "Private - Answer the receiver.  The numerator                         and denominator of the receiver are set to the                         n and d arguments respectively."                    numerator := n.                    denominator := d               :SOURCE,type=instanceMethod,class=Fraction,selector=<,codeType=rtalk< aNumber                        "Answer true if the receiver is less                         than aNumber, else answer false."                    ^(numerator * aNumber denominator) <                        (denominator * aNumber numerator)               :SOURCE,type=instanceMethod,class=Fraction,selector=<=,codeType=rtalk<= aNumber                        "Answer true if the receiver is less than                         or equal to aNumber, else answer false."                    ^(numerator * aNumber denominator) <=                        (denominator * aNumber numerator)               :SOURCE,type=instanceMethod,class=Fraction,selector=//,codeType=rtalk// aNumber                        "Answer the integer quotient after dividing                         the receiver by aNumber with truncation                         towards negative infinity."                    ^(numerator * aNumber denominator) //                        (denominator * aNumber numerator)               :SOURCE,type=instanceMethod,class=Fraction,selector=>=,codeType=rtalk>= aNumber                        "Answer true if the receiver is greater than                         or equal to aNumber, else answer false."                    ^(denominator * aNumber numerator) <=                        (numerator * aNumber denominator)               :SOURCE,type=instanceMethod,class=Fraction,selector=>,codeType=rtalk> aNumber                        "Answer true if the receiver is greater                         than aNumber, else answer false."                    ^(numerator * aNumber denominator) >                        (denominator * aNumber numerator)               :SOURCE,type=instanceMethod,class=Fraction,selector==,codeType=rtalk= aNumber                        "Answer true if the receiver is equal                         to aNumber, else answer false."                    aNumber isFloat ifTrue: [ ^aNumber = self ].                    ^(aNumber isNumber) and:                        [numerator = aNumber numerator and:                            [denominator = aNumber denominator]]               :SOURCE,type=instanceMethod,class=Fraction,selector=printOn:,codeType=rtalkprintOn: aStream                        "Append the ASCII representation of                         the receiver to aStream."                    numerator printOn: aStream.                    aStream nextPut: $/.                    denominator printOn: aStream               :SOURCE,type=instanceMethod,class=Interval,selector=at:put:,codeType=rtalkat: anInteger put: aNumber                        "Replace the number in the receiver indexed by                         anInteger with the argument aNumber.  This message is                         not valid for intervals since interval collections                         are implicitely defined (the elements are computed)."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=Interval,selector=at:,codeType=rtalkat: anInteger                        "Answer the number at index position                         anInteger in the receiver interval."                    | answer |                    anInteger > 0                        ifTrue: [                            answer := beginning + (increment * (anInteger - 1)).                            (increment < 0                                and: [answer between: end and: beginning])                                    ifTrue: [^answer].                            (increment > 0                                and: [answer between: beginning and: end])                                    ifTrue: [^answer]].                    ^self errorInBounds: anInteger               :SOURCE,type=instanceMethod,class=Interval,selector=increment,codeType=rtalkincrement                        "Answer the increment of the receiver Interval."                    ^increment               :SOURCE,type=instanceMethod,class=Interval,selector=initBegin:end:incr:,codeType=rtalkinitBegin: beginningInteger                    end: endInteger                    incr: incrementInteger                        "Private - Answer the receiver after initializing                         the beginning, end and increment instance variables."                    beginning := beginningInteger.                    end := endInteger.                    increment := incrementInteger.                    increment = 0                        ifTrue: [^self error: 'interval increment is 0']               :SOURCE,type=instanceMethod,class=Interval,selector=species,codeType=rtalkspecies                        "Answer class Array as the species                         of Interval."                    ^Array               :SOURCE,type=instanceMethod,class=Interval,selector=size,codeType=rtalksize                        "Answer the number of elements of the receiver."                    ^0 max: end - beginning // increment + 1               :SOURCE,type=instanceMethod,class=RtThread,selector=kill,codeType=rtalkkill                   "<modified:pgmr=mdr,time=01/04/13 at 07:21:04 pm>   "                        "cause the held thread to end by sending an interupt()"                	<jprim: /SyncPrims primKillThread>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtThread,selector=stackFrames,codeType=rtalkstackFrames                   "<modified:pgmr=mdr,time=01/04/13 at 07:22:25 pm>   "                        "return the frames of the current stack"                	<jprim: /DebugPrims primCopyStack>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtThread,selector=name:,codeType=rtalkname:aString                   "<modified:pgmr=mdr,time=01/04/13 at 07:21:18 pm>   "                        "name the thread"                	<jprim: /SyncPrims primNameThread>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtThread,selector=priority:,codeType=rtalkpriority:aInt                   "<modified:sys=GAKRE8CA,time=02/05/12 at 09:08:51 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 03:05:02 pm>   "                        "change the priority"                    self debugStep:2 arg:aInt               :SOURCE,type=instanceMethod,class=RtThread,selector=currentThread,codeType=rtalkcurrentThread                   "<modified:pgmr=mdr,time=01/04/13 at 07:20:17 pm>   "                        "init the thread iv"                	<jprim: /SyncPrims primGetThread>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=UndefinedObject,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a copy of the receiver which shares                         the receiver instance variables.  Because                         there is only one nil, answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=UndefinedObject,selector=notNil,codeType=rtalknotNil                        "Answer false because the receiver is nil."                    ^false               :SOURCE,type=instanceMethod,class=UndefinedObject,selector=isNilOrEmpty,codeType=rtalkisNilOrEmpty                        "Answer true because the receiver is nil."                    ^true               :SOURCE,type=instanceMethod,class=UndefinedObject,selector=deepCopy,codeType=rtalkdeepCopy                        "Answer a copy of the receiver with shallow                         copies of each instance variable.  Because                         there is only one nil, answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=UndefinedObject,selector=isNil,codeType=rtalkisNil                        "Answer true because the receiver is nil."                    ^true               :SOURCE,type=instanceMethod,class=UndefinedObject,selector=printOn:,codeType=rtalkprintOn: aStream                        "Append the ASCII representation of                         the receiver to aStream."                    aStream nextPutAll: 'nil'               :SOURCE,type=instanceMethod,class=Character,selector=asInteger,codeType=rtalkasInteger                   "<modified:pgmr=mdr,time=01/04/13 at 06:23:38 pm>   "                        "Answer the number corresponding to the code point                          value of the receiver."                	<jprim: /MiscPrims primCharToInt>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Character,selector=asHexValue,codeType=rtalkasHexValue                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:34:43 pm>   "                "                    Return a SmallInteger from 0..15 for the hex equivalent of the                    receiver character.                "                    | val |                    val := self asciiValue - $0 asInteger.                    val < 0 ifTrue: [                         self error: 'Illegal value for hex character: ', self asciiValue asString                     ].                    val < 10 ifTrue: [ ^val ].                    val := self asciiValue - $A asInteger.                    (val < 0) | (val > 6) ifTrue: [                         self error: 'Illegal value for hex character: ', self asciiValue asString                     ].                    ^val + 10.               :SOURCE,type=instanceMethod,class=Character,selector=isSeparator,codeType=rtalkisSeparator                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:44:20 pm>   "                        "Answer true if the receiver character is either a                         space, tab, carriage-return, line-feed or form-feed                         character, else answer false."                    | val |                    val := self asciiValue.                    ^val = 32                        or: [val = 9                            or: [val = 13                                or: [val = 10                                    or: [val = 12]]]]               :SOURCE,type=instanceMethod,class=Character,selector=riIsControl,codeType=rtalkriIsControl                        "Answer true if the receiver is <= 16r20 or > 16r7E."                    ^self asInteger < 16r20                        or: [ self asInteger > 16r7E ]               :SOURCE,type=instanceMethod,class=Character,selector=isDigit,codeType=rtalkisDigit                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:35:33 pm>   "                        "Answer true if the receiver is in the range                         of characters from 0 to 9, else answer false."                    ^(self asciiValue) > 47 and: [(self asciiValue) < 58]               :SOURCE,type=instanceMethod,class=Character,selector=basicHash,codeType=rtalkbasicHash                   "<modified:sys=GAKRE8CA,time=06/08/11 at 02:45:26 pm>   "                        "Answer the integer hash."                    ^self asInteger               :SOURCE,type=instanceMethod,class=Character,selector=isVowel,codeType=rtalkisVowel                        "Answer true if the receiver is any one of the                         characters a,A,e,E,i,I,o,O,u,U, else answer false."                    ^'aAeEiIoOuU' includes: self               :SOURCE,type=instanceMethod,class=Character,selector=>=,codeType=rtalk>= aCharacter                   "<modified:sys=GAKRE8CA,time=05/06/11 at 05:02:13 pm>   "                   "<modified:sys=GAKRE8CA,time=05/06/11 at 09:37:45 am>   "                        "Answer true if the receiver occurs at the same position                         or after aCharacter in the current sort sequence,                         else answer false."                   ^(self collateTable:self) >= (self collateTable:aCharacter)               :SOURCE,type=instanceMethod,class=Character,selector=hash,codeType=rtalkhash                   "<modified:sys=GAKRE8CA,time=06/08/11 at 02:45:20 pm>   "                        "Answer the integer hash."                    ^self asInteger               :SOURCE,type=instanceMethod,class=Character,selector=<=,codeType=rtalk<= aCharacter                   "<modified:sys=GAKRE8CA,time=05/06/11 at 05:02:54 pm>   "                   "<modified:sys=GAKRE8CA,time=05/06/11 at 09:39:54 am>   "                        "Answer true if the receiver occurs before or at the same                         position as aCharacter in the current sort sequence,                         else answer false."                   ^(self collateTable:self) <= (self collateTable:aCharacter)               :SOURCE,type=instanceMethod,class=Character,selector=isSingleByte,codeType=rtalkisSingleByte                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:36:53 pm>   "                        "Answer whether the receiver is a single-byte character."                    ^(self asciiValue) < 256               :SOURCE,type=instanceMethod,class=Character,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a copy of the receiver which shares                         the receiver instance variables.  Because                         characters are immutable (cannot instantiate                         a copy), answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Character,selector=isAlphaNumeric,codeType=rtalkisAlphaNumeric                        "Answer true if the receiver is in the range of                         characters from 0 to 9 or in the range from a to z                         or in the range from A to Z, else answer false."                    ^self isDigit or: [self isLetter]               :SOURCE,type=instanceMethod,class=Character,selector=collateTable:,codeType=rtalkcollateTable:aChar                   "<modified:sys=GAKRE8CA,time=05/06/11 at 05:01:39 pm>   "                        "returns the sort order for this char"                    | val |                    val := aChar asInteger.                    val <= 90 ifTrue:[^val].                    ((val >= 97) & (val <= 122)) ifTrue:[^val - 32].                    ^10               :SOURCE,type=instanceMethod,class=Character,selector=deepCopy,codeType=rtalkdeepCopy                        "Answer a copy of the receiver with shallow                         copies of each instance variable.  Because                         characters are immutable (cannot instantiate                         a copy), answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Character,selector=printOn:,codeType=rtalkprintOn: aStream                   "<modified:sys=GAKRE8CA,time=12/31/11 at 04:12:02 pm>   "                   "<modified:sys=GAKRE8CA,time=04/22/11 at 05:40:55 pm>   "                        "Append the character representation of                         the receiver to aStream."                    aStream nextPut: $$.                    self riIsControl                        ifFalse:[aStream nextPut: self].                    aStream nextPutAll:' ',(self asInteger riAsHexString)               :SOURCE,type=instanceMethod,class=Character,selector=isUpperCase,codeType=rtalkisUpperCase                   "<modified:sys=GAKRE8CA,time=04/22/11 at 05:50:39 pm>   "                        "Answer true if the receiver is an upper-case letter,                         else answer false."                    | val |                    val := self asciiValue.                    ^((val >= 65) & ( val <= 90))               :SOURCE,type=instanceMethod,class=Character,selector=isCharacter,codeType=rtalkisCharacter                        "Answer true if receiver is a kind of Character."                    ^true               :SOURCE,type=instanceMethod,class=Character,selector=isLowerCase,codeType=rtalkisLowerCase                   "<modified:sys=GAKRE8CA,time=04/22/11 at 05:51:00 pm>   "                        "Answer true if the receiver is a lower-case letter,                         else answer false."                    | val |                    val := self asciiValue.                    ^((val >= 97) & ( val <= 122))               :SOURCE,type=instanceMethod,class=Character,selector=digitValue,codeType=rtalkdigitValue                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:37:03 pm>   "                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:36:48 pm>   "                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:36:36 pm>   "                        "Answer a number corresponding to                         the digit value of the receiver."                    ((self asciiValue) > 47 and: [(self asciiValue) < 58])                        ifTrue: [ "$0..$9 become 0..9"                            ^(self asciiValue) - 48].                    ((self asciiValue) > 64 and: [(self asciiValue) < 91])                        ifTrue: [ "$A..$Z become 10..35"                            ^(self asciiValue) - 55].                    self error: 'digitValue requires characters $0..$9, $A..$Z'               :SOURCE,type=instanceMethod,class=Character,selector=>,codeType=rtalk> aCharacter                   "<modified:sys=GAKRE8CA,time=05/06/11 at 05:02:35 pm>   "                   "<modified:sys=GAKRE8CA,time=05/06/11 at 09:38:49 am>   "                        "Answer true if the receiver occurs after aCharacter                         in the current sort sequence, else answer false."                   ^(self collateTable:self) > (self collateTable:aCharacter)               :SOURCE,type=instanceMethod,class=Character,selector==,codeType=rtalk= aCharacter                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:37:17 pm>   "                        "Answer true if the receiver code point value                         is equal to the code point value of aCharacter,                         else answer false."                    (aCharacter isCharacter)                        ifTrue: [^(self asciiValue) = aCharacter asciiValue]                        ifFalse: [^false]               :SOURCE,type=instanceMethod,class=Character,selector=<,codeType=rtalk< aCharacter                   "<modified:sys=GAKRE8CA,time=05/06/11 at 05:03:11 pm>   "                   "<modified:sys=GAKRE8CA,time=05/06/11 at 09:40:57 am>   "                        "Answer true if the receiver occurs before aCharacter                         in the current sort sequence, else answer false."                   ^(self collateTable:self) < (self collateTable:aCharacter)               :SOURCE,type=instanceMethod,class=Character,selector=asLowerCase,codeType=rtalkasLowerCase                   "<modified:sys=GAKRE8CA,time=04/22/11 at 05:49:31 pm>   "                        "Answer the lower case value of the receiver                         if it is a letter, else answer the receiver."                    | val |                    val := self asciiValue.                    ((val >= 65) & ( val <= 90))                        ifFalse:[^self]                        ifTrue:[^Character value:(val + 32)]               :SOURCE,type=instanceMethod,class=Character,selector=isLetter,codeType=rtalkisLetter                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:36:15 pm>   "                        "Answer true if the receiver is in the range of                         of characters from  a and z or in the range from                         A and Z or any other lower-case or upper-case                         letter, else answer false."                    (((self asciiValue) > 64 and: [(self asciiValue) < 91])                        or: [(self asciiValue) > 96 and: [(self asciiValue) < 123]])                        ifTrue: [ ^true ]                        ifFalse: [ ^(self isLowerCase or: [self isUpperCase]) ].               :SOURCE,type=instanceMethod,class=Character,selector=asCharacter,codeType=rtalkasCharacter                        "Answer the receiver."                        ^self               :SOURCE,type=instanceMethod,class=Character,selector=asUpperCase,codeType=rtalkasUpperCase                   "<modified:sys=GAKRE8CA,time=04/22/11 at 05:49:02 pm>   "                   "<modified:sys=GAKRE8CA,time=04/22/11 at 05:47:18 pm>   "                        "Answer the upper case value of the receiver                         if it is a letter, else answer the receiver."                    | val |                    val := self asciiValue.                    ((val >= 97) & ( val <= 122))                        ifFalse:[^self]                        ifTrue:[^Character value:(val - 32)]               :SOURCE,type=instanceMethod,class=Character,selector=isWhitespace,codeType=rtalkisWhitespace                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:41:45 pm>   "                        "Answer true if the receiver is white space,                          else answer false."                    ^self asInteger <= 32               :SOURCE,type=instanceMethod,class=Character,selector=asString,codeType=rtalkasString                        "Answer a one character String containing                         the receiver."                    ^String with: self.               :SOURCE,type=instanceMethod,class=Character,selector=asciiValue,codeType=rtalkasciiValue                   "<modified:sys=GAKRE8CA,time=04/16/11 at 11:33:55 pm>   "                        "Answer the number corresponding to                         the ASCII encoding of the receiver."                    ^self asInteger               :SOURCE,type=instanceMethod,class=RtTimer,selector=execute:after:every:,codeType=rtalkexecute:aBlock after:aInt1 every:aInt2                   "<modified:sys=GAKRE8CA,time=02/05/12 at 09:11:58 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:36:01 pm>   "                        "after an initial delay of aInt1 mSecs send value to the block                        and if aInt2 is not 0 repeat every aInt2 mSecs"                    self debugStep:1 arg:aBlock arg:aInt1 arg:aInt2               :SOURCE,type=instanceMethod,class=RtTimer,selector=cancel,codeType=rtalkcancel                   "<modified:sys=GAKRE8CA,time=02/05/12 at 09:15:37 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:33:25 pm>   "                        "cancel this timer"                    self debugStep:15               :SOURCE,type=instanceMethod,class=Boolean,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a copy of the receiver which shares                         the receiver instance variables.  Because                         there is only one true and one false, answer                         the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Boolean,selector=isBoolean,codeType=rtalkisBoolean                        "Answer true if receiver is a kind of Boolean."                    ^true               :SOURCE,type=instanceMethod,class=Boolean,selector=deepCopy,codeType=rtalkdeepCopy                        "Answer a copy of the receiver with shallow                         copies of each instance variable.  Because                         there is only one true and  one false,                         answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Boolean,selector=printOn:,codeType=rtalkprintOn: aStream                        "Append the ASCII representation of                         the receiver to aStream."                    aStream nextPutAll:                        (self                            ifTrue: ['true']                            ifFalse:['false'])               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=associationAt:ifAbsent:,codeType=rtalkassociationAt: aKey ifAbsent: aBlock                        "Answer an Association, with aKey and its                         corresponding value if aKey exists in the                         receiver, else evaluate aBlock (with no arguments)."                    | index |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    ^Association                        key: (contents at: index)                        value: (contents at: index + 1)               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=removeKey:ifAbsent:,codeType=rtalkremoveKey: aKey ifAbsent: aBlock                        "Answer aKey.  Remove the key/value pair whose key                         is aKey from the receiver.  If aKey is not in the                         receiver, evaluate aBlock (with no arguments)."                    | index  |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    contents at: index put: nil.                    contents at: index + 1 put: nil.                    elementCount := elementCount - 1.                    self rehashFrom: index.                    ^aKey               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=includesKey:,codeType=rtalkincludesKey: aKey                        "Answer true if the receiver contains aKey,                         else answer false."                    ^(contents at: (self findKeyIndex: aKey)) notNil               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=associationsDo:,codeType=rtalkassociationsDo: aBlock                        "Answer the receiver.  For each key/value pair                         in the receiver, evaluate aBlock with that                         pair as the argument."                    1 to: contents size by: 2 do: [ :index |                        (contents at: index) isNil                            ifFalse: [                                aBlock value:                                    (Association                                        key: (contents at: index)                                        value: (contents at: index + 1))]]               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=at:put:,codeType=rtalkat: aKey put: anObject                        "Answer anObject.  If aKey exists in the receiver,                         replace the corresponding value with anObject, else                         add the aKey/anObject pair to the receiver."                    | index |                    aKey isNil                        ifTrue: [self error: 'key cannot be nil'].                    index := self findKeyIndex: aKey.                    (contents at: index) isNil                        ifTrue: [                            elementCount := elementCount + 1.                            contents at: index put: aKey.                            contents at: index + 1 put: anObject.                            self adjustSize]                        ifFalse: [contents at: index + 1 put: anObject].                    ^anObject               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=add:,codeType=rtalkadd: anAssociation                        "Answer anAssociation.  Add anAssociation to the                         receiver."                    self                        at: anAssociation key                        put: anAssociation value.                    ^anAssociation               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=grow,codeType=rtalkgrow                        "Private - Answer the receiver doubled in                         size to accomodate more key/value                         pairs."                    | aDictionary |                    aDictionary := self species                        newSize: contents size. "this doubles the size"                    self associationsDo: [ :anAssociation |                        aDictionary add: anAssociation].                    contents := aDictionary contents               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=keys,codeType=rtalkkeys                        "Answer a Set containing all the keys                         in the receiver."                    | answer |                    answer := Set new: self size * 2.                    1 to: contents size by: 2 do: [ :index |                        (contents at: index) == nil                            ifFalse: [answer add: (contents at: index)]].                    ^answer               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=keyAtValue:ifAbsent:,codeType=rtalkkeyAtValue: anObject ifAbsent: aBlock                        "Answer the key in the receiver whose paired value                         equals anObject.  If not found, evaluate aBlock                         (with no arguments)."                    1 to: contents size by: 2 do: [ :index |                        (contents at: index + 1) = anObject                            ifTrue: [                                (contents at: index) == nil                                    ifFalse: [^contents at: index]]].                    ^aBlock value               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=adjustSize,codeType=rtalkadjustSize                        "Private - Answer the receiver.  If the receiver is                         getting full, expand it to accomodate more objects."                    (elementCount * 20) >= (contents size - 2 * 9)                        ifTrue: [^self grow]               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=at:ifAbsent:,codeType=rtalkat: aKey ifAbsent: aBlock                        "Answer the value of the key/value pair whose key                         equals aKey from the receiver.  If not found,                         evaluate aBlock (with no arguments)."                    | index |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    ^contents at: index + 1               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=any,codeType=rtalkany                "                    Return any Association in the dictionary.  This is used when                    you just want any key/value pair in the dictionary, and you                    don't care which one.                "                    (elementCount = 0) ifTrue: [ ^Association new ].                    1 to: contents size by: 2 do: [:i |                        (contents at: i) notNil ifTrue: [                            ^Association key: (contents at: i) value: (contents at: (i + 1))                        ]                    ].               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=at:,codeType=rtalkat: aKey                        "Answer the value of the key/value pair whose key                         equals aKey from the receiver.  If                         not found, report an error."                    | index |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^self errorAbsentKey].                    ^contents at: index + 1               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=findKeyIndex:,codeType=rtalkfindKeyIndex: key                        "Private - Answer the index position of the                         key/value pair in the receiver whose key equals                         aKey or the index of the first empty position                         where such an pair would be stored."                    | index lastIndex |                    lastIndex := contents size.                    index := ((key basicHash) bitAnd: lastIndex // 2 - 1)                        * 2 + 1.                    [key == (contents at: index)]                        whileFalse: [                            (contents at: index) isNil                                ifTrue: [^index].                            (index := index + 2) > lastIndex                                ifTrue: [ "index wraparound"                                    index := 1]].                    ^index               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=do:,codeType=rtalkdo: aBlock                        "Answer the receiver.  For each value                         in the receiver, evaluate aBlock with                         that value as the argument."                    1 to: contents size by: 2 do: [ :index |                        (contents at: index) isNil                            ifFalse: [                                aBlock value:                                    (contents at: index + 1)]]               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=rehashFrom:,codeType=rtalkrehashFrom: anInteger                        "Private - Rehash the keys of the receiver                         from the index position anInteger                         to the last index position."                    | index size searchIndex anObject |                    size := contents size.                    index := anInteger.                    [(index := index + 2) > size                        ifTrue: [ "index wraparound"                            index := 1].                    (anObject := contents at: index) isNil]                        whileFalse: [ "test next key for relocation"                            searchIndex := self findKeyIndex: anObject.                            (contents at: searchIndex) isNil                                ifTrue: [ "found key to move"                                    contents                                        at: searchIndex                                        put: (contents at: index).                                    contents                                        at: index                                        put: nil.                                    contents                                        at: searchIndex + 1                                        put: (contents at: index + 1).                                    contents                                        at: index + 1                                        put: nil]]               :SOURCE,type=instanceMethod,class=IdentityDictionary,selector=fullCopy,codeType=rtalkfullCopy                        "Answer a copy of the receiver with shallow                         copies of each element."                " DCB 2/6/97 can't copy keys for IdentityDictionary "                    | answer |                    answer := self species new.                    self associationsDo: [:element |                        answer add: (element value: (element value) fullCopy)].                    ^answer               :SOURCE,type=instanceMethod,class=Association,selector=valueString,codeType=rtalkvalueString                        "comment"                    ^self value asString               :SOURCE,type=instanceMethod,class=Association,selector=isEmpty,codeType=rtalkisEmpty                                    ^key isEmpty and: [ value isEmpty ]               :SOURCE,type=instanceMethod,class=Association,selector=hash,codeType=rtalkhash                        "Answer the integer hash value                         for the key of the receiver."                    ^key hash               :SOURCE,type=instanceMethod,class=Association,selector=key,codeType=rtalkkey                        "Answer the key of the receiver."                    ^key               :SOURCE,type=instanceMethod,class=Association,selector=keyString,codeType=rtalkkeyString                        "comment"                    ^self key asString               :SOURCE,type=instanceMethod,class=Association,selector=<,codeType=rtalk< anAssociation                        "Answer true if the receiver key is less than                         anAssociation key, else answer false."                    ^key < anAssociation key               :SOURCE,type=instanceMethod,class=Association,selector=<=,codeType=rtalk<= anAssociation                        "Answer true if the receiver key is less than or                         equal to anAssociation key, else answer false."                    ^key <= anAssociation key               :SOURCE,type=instanceMethod,class=Association,selector=value:,codeType=rtalkvalue: anObject                        "Set the value of the receiver to                         be anObject.  Answer the receiver."                    value := anObject               :SOURCE,type=instanceMethod,class=Association,selector=isAssociation,codeType=rtalkisAssociation                        "Answer true if receiver is a kind of Association."                    ^true               :SOURCE,type=instanceMethod,class=Association,selector=value,codeType=rtalkvalue                        "Answer the value of the receiver."                    ^value               :SOURCE,type=instanceMethod,class=Association,selector=>=,codeType=rtalk>= anAssociation                        "Answer true if the receiver key is greater than or                         equal to anAssociation key, else answer false."                    ^anAssociation key <= key               :SOURCE,type=instanceMethod,class=Association,selector=key:,codeType=rtalkkey: anObject                        "Set the key of the receiver to                         be anObject.  Answer the receiver."                    key := anObject               :SOURCE,type=instanceMethod,class=Association,selector=>,codeType=rtalk> anAssociation                        "Answer true if the receiver key is greater                         than anAssociation key, else answer false."                    ^key > anAssociation key               :SOURCE,type=instanceMethod,class=Association,selector==,codeType=rtalk= anAssociation                        "Answer true if the receiver key is equal                         to anAssociation key, else answer false."                    ^(anAssociation class == Association)                        and: [key = anAssociation key]               :SOURCE,type=instanceMethod,class=Association,selector=printOn:,codeType=rtalkprintOn: aStream                        "Append the ASCII representation of                         the receiver to aStream."                    key printOn: aStream.                    aStream nextPutAll: ' ==> '.                    value printOn: aStream               :SOURCE,type=instanceMethod,class=Dictionary,selector=at:,codeType=rtalkat: aKey                        "Answer the value of the key/value pair whose key                         equals aKey from the receiver.  If                         not found, report an error."                    | answer |                    ^(answer := self lookUpKey: aKey) == nil                        ifTrue: [self errorAbsentKey]                        ifFalse: [answer value]               :SOURCE,type=instanceMethod,class=Dictionary,selector=findKeyIndex:,codeType=rtalkfindKeyIndex: aKey                        "Private - Answer the index position of the                         key/value pair in the receiver whose key equals                         aKey or the index of the first empty position                         where such an pair would be stored."                    | index answer anAssociation |                    index := contents size.                    answer := (aKey hash) \\ index + 1.                    [((anAssociation := contents at: answer) isNil)                        or: [aKey = anAssociation key]]                            whileFalse: [                                (answer := answer + 1) > index                                    ifTrue: [answer := 1]]. "wrap-around"                    ^answer               :SOURCE,type=instanceMethod,class=Dictionary,selector=do:,codeType=rtalkdo: aBlock                        "Answer the receiver.  For each value                         in the receiver, evaluate aBlock with                         that value as the argument."                    super do: [ :association |                        aBlock value: association value]               :SOURCE,type=instanceMethod,class=Dictionary,selector=removeKey:,codeType=rtalkremoveKey: aKey                        "Answer the receiver with the key/value pair whose                         key equals aKey removed.  If such a pair is not found,                         report an error."                    self removeKey: aKey ifAbsent: [self errorAbsentKey].               :SOURCE,type=instanceMethod,class=Dictionary,selector=keyAtValue:,codeType=rtalkkeyAtValue: anObject                        "Answer the key in the receiver whose paired value                         equals anObject.  If not found, answer nil."                    ^self keyAtValue: anObject ifAbsent: [nil]               :SOURCE,type=instanceMethod,class=Dictionary,selector=occurrencesOf:,codeType=rtalkoccurrencesOf: anObject                        "Answer the number of key/value pairs in the receiver,                         whose values are equal to anObject."                    | answer |                    answer := 0.                    self do: [ :element |                        element = anObject                            ifTrue:  [answer := answer + 1]].                    ^answer               :SOURCE,type=instanceMethod,class=Dictionary,selector=any,codeType=rtalkany                "                    Return any Association in the dictionary.  This is used when                    you just want any key/value pair in the dictionary, and you                    don't care which one.                "                    (elementCount = 0) ifTrue: [ ^Association new ].                    contents do: [:a |                        a notNil ifTrue: [ ^a ]                    ].               :SOURCE,type=instanceMethod,class=Dictionary,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a copy of the receiver which shares                         the receiver elements."                    | answer |                    answer := self species new.                    self associationsDo: [:element |                        answer add: element].                    ^answer               :SOURCE,type=instanceMethod,class=Dictionary,selector=associationAt:ifAbsent:,codeType=rtalkassociationAt: aKey ifAbsent: aBlock                        "Answer the Association whose key equals aKey                         from the receiver.  If not found,                         evaluate aBlock (with no arguments)."                    | answer |                    ^(answer := self lookUpKey: aKey) == nil                        ifTrue: [aBlock value]                        ifFalse: [answer]               :SOURCE,type=instanceMethod,class=Dictionary,selector=asAssociationSortedCollection,codeType=rtalkasAssociationSortedCollection                "                    Answer a sorted collection of the associations                    contained in the receiver. The associations are                    sorted in ascending key values.                "                                    | answer |                    answer := SortedCollection new: self size.                    answer sortBlock: [ :a :b | a <= b].                    self associationsDo:                    [                         :assoc |                        answer add: assoc.                    ].                    ^answer               :SOURCE,type=instanceMethod,class=Dictionary,selector=at:put:,codeType=rtalkat: aKey put: anObject                        "Answer anObject.  If the receiver contains                         the key/value pair whose key equals aKey,                         replace the value of the pair with anObject.                         Else add the aKey/anObject pair."                    self add: (Association key: aKey value: anObject).                    ^anObject               :SOURCE,type=instanceMethod,class=Dictionary,selector=includesKey:,codeType=rtalkincludesKey: aKey                        "Answer true if the receiver contains aKey,                         else answer false."                    ^(self lookUpKey: aKey) notNil               :SOURCE,type=instanceMethod,class=Dictionary,selector=deepCopy,codeType=rtalkdeepCopy                        "Answer a copy of the receiver with shallow                         copies of each element."                    | answer |                    answer := self species new.                    self associationsDo: [:element |                        answer add: element copy].                    ^answer               :SOURCE,type=instanceMethod,class=Dictionary,selector=printOn:,codeType=rtalkprintOn: aStream                                                                "<modified:pgmr=mdr,time=01/03/13 at 01:29:49 pm>   "                                                                "<modified:sys=G9TQQ5YA,time=04/02/10 at 12:29:08 pm>   "                                                                     "Append the ASCII representation                                                                      of the receiver to aStream."                                                                 | limit |                                                                 (aStream recursive includes: self)                                                                     ifTrue: [^self printRecursionOn: aStream].                                                                 aStream recursive add: self.                                                                                                                              limit := 200.                                                                 self class printOn: aStream.                                                                 self associationsDo:[ :a |                                                                     limit := limit - 1.                                                                     limit < 0 ifTrue:[^aStream recursive remove: self ifAbsent: []].                                                                     aStream cr;nextPutAll:(a printString)].                                                                                                                              aStream recursive remove: self ifAbsent: []                                         :SOURCE,type=instanceMethod,class=Dictionary,selector==,codeType=rtalk=aDict                        "true if all key values are same"                    | tmp |                    self == aDict                        ifTrue: [^true].                    (self class == aDict class)                        ifFalse: [^false].                    (aDict size = self size) ifFalse:[^false].                    self associationsDo:[ :a |                             tmp := aDict at:(a key) ifAbsent:[^false].                            (tmp = a value) ifFalse:[^false]].                    ^true               :SOURCE,type=instanceMethod,class=Dictionary,selector=remove:ifAbsent:,codeType=rtalkremove: anObject ifAbsent: aBlock                        "Remove the key/value pair whose value is anObject                         from the receiver dictionary.  This method                         reports an error since the values are                         not unique in a dictionary, the keys are."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=Dictionary,selector=fullCopy,codeType=rtalkfullCopy                        "Answer a copy of the receiver with shallow                         copies of each element."                    | answer |                    answer := self species new.                    self associationsDo: [:element |                        answer add: element fullCopy].                    ^answer               :SOURCE,type=instanceMethod,class=Dictionary,selector=keyAtValue:ifAbsent:,codeType=rtalkkeyAtValue: anObject ifAbsent: aBlock                        "Answer the key in the receiver whose paired value                         equals anObject.  If not found, evaluate aBlock                         (with no arguments)."                    self associationsDo: [ :anAssociation |                        anAssociation value = anObject                            ifTrue: [^anAssociation key]].                    ^aBlock value               :SOURCE,type=instanceMethod,class=Dictionary,selector=removeKey:ifAbsent:,codeType=rtalkremoveKey: aKey ifAbsent: aBlock                        "Answer aKey.  Remove the key/value pair whose key                         equals aKey from the receiver.  If such a pair                         is not found, evaluate aBlock (with no arguments)."                    | index  |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    contents at: index put: nil.                    elementCount := elementCount - 1.                    self rehashFrom: index.                    ^aKey               :SOURCE,type=instanceMethod,class=Dictionary,selector=asAssociationOrderedCollection,codeType=rtalkasAssociationOrderedCollection                "                    Answer an ordered collection of the associations                    contained in the receiver.                                    010811 JB Changed size from 'self size' to 'elementCount'                "                                    | answer |                    answer := OrderedCollection new: elementCount.                    self associationsDo:                    [                         :assoc |                        answer add: assoc.                    ].                    ^answer               :SOURCE,type=instanceMethod,class=Dictionary,selector=includes:,codeType=rtalkincludes: anObject                        "Answer true if the receiver contains the                         key/value pair whose value equals anObject,                         else answer false."                    self do: [ :element |                        element = anObject                            ifTrue: [^true]].                    ^false               :SOURCE,type=instanceMethod,class=Dictionary,selector=rehashFrom:,codeType=rtalkrehashFrom: anInteger                        "Private - Rehash the keys of the receiver                         from the index position anInteger                         to the last index position."                    | index size searchIndex anAssociation |                    size := contents size.                    index := anInteger.                    [(index := index + 1) > size                        ifTrue: [index := 1]. "wrap-around"                    (anAssociation := contents at: index) isNil]                        whileFalse: [ "test next assoc for relocation"                            searchIndex := self findKeyIndex: anAssociation key.                            (contents at: searchIndex) isNil                                ifTrue: [ "found assoc to move"                                    contents                                        at: searchIndex                                        put: anAssociation.                                    contents                                        at: index                                        put: nil]]               :SOURCE,type=instanceMethod,class=Dictionary,selector=grow,codeType=rtalkgrow                        "Private - Answer the receiver doubled in                         size to accomodate more key/value                         pairs."                    | aDictionary |                    aDictionary := self class new: contents size * 2.                    self associationsDo: [ :anAssociation |                        aDictionary add: anAssociation].                    contents := aDictionary contents               :SOURCE,type=instanceMethod,class=Dictionary,selector=errorAbsentKey,codeType=rtalkerrorAbsentKey                        "Private - Report an error to the effect                         that the desired key was not found in the                         receiver."                    self error: 'Key is missing'               :SOURCE,type=instanceMethod,class=Dictionary,selector=add:,codeType=rtalkadd: anAssociation                        "Answer anAssociation.  Add anAssociation to the                         receiver."                    | index element |                    index := self findKeyIndex: anAssociation key.                    (element := contents at: index) == nil                        ifTrue: [                            elementCount := elementCount + 1.                            contents at: index put: anAssociation]                        ifFalse: [element value: anAssociation value].                    self adjustSize.                    ^anAssociation               :SOURCE,type=instanceMethod,class=Dictionary,selector=keys,codeType=rtalkkeys                        "Answer a Set containing all the keys                         in the receiver."                    | answer |                    answer := Set new: self size * 2.                    self associationsDo: [ :assoc |                        answer add: assoc key].                    ^answer               :SOURCE,type=instanceMethod,class=Dictionary,selector=removeAssociation:,codeType=rtalkremoveAssociation: anAssociation                        "Answer the receiver after anAssociation has been                         removed from it.  If anAssociation is not in the                         receiver, report an error."                    self removeKey: anAssociation key               :SOURCE,type=instanceMethod,class=Dictionary,selector=keysDo:,codeType=rtalkkeysDo: aBlock                        "For each key in the receiver, evaluate aBlock with                         the key as the argument."                    self associationsDo: [ :anAssociation |                        aBlock value: anAssociation key]               :SOURCE,type=instanceMethod,class=Dictionary,selector=associationsDo:,codeType=rtalkassociationsDo: aBlock                        "Answer the receiver.  For each key/value pair                         in the receiver, evaluate aBlock with that                         pair as the argument."                    super do: aBlock               :SOURCE,type=instanceMethod,class=Dictionary,selector=lookUpKey:,codeType=rtalklookUpKey: aKey                        "Private - Answer the association                         in the receiver whose key equals                         aKey or nil if it doesn't exist."                    | index limit anAssociation |                    limit := contents size.                    index := (aKey hash) \\ limit + 1.                    [((anAssociation := contents at: index) == nil)                        or: [aKey = anAssociation key]]                            whileFalse: [                                (index := index + 1) > limit                                    ifTrue: [index := 1]]. "wrap-around"                    ^anAssociation               :SOURCE,type=instanceMethod,class=Dictionary,selector=associationAt:,codeType=rtalkassociationAt: aKey                        "Answer the Association whose key equals aKey                         from the receiver.  If not found,                         report an error."                    ^self                        associationAt: aKey                        ifAbsent: [self errorAbsentKey]               :SOURCE,type=instanceMethod,class=Dictionary,selector=at:ifAbsent:,codeType=rtalkat: aKey ifAbsent: aBlock                        "Answer the value of the key/value pair whose key                         equals aKey from the receiver.  If not found,                         evaluate aBlock (with no arguments)."                    | answer |                    ^(answer := self lookUpKey: aKey) == nil                        ifTrue: [aBlock value]                        ifFalse: [answer value]               :SOURCE,type=instanceMethod,class=Dictionary,selector=select:,codeType=rtalkselect: aBlock                        "For each key/value pair in the receiver, evaluate                         aBlock with the value part of the pair as the argument.                         Answer a new object containing those key/value pairs                         for which aBlock evaluates to true."                    | answer |                    answer := self species new.                    self associationsDo: [ :each |                        (aBlock value: each value)                            ifTrue: [answer add: each]].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=contents,codeType=rtalkcontents                        "Private - Answer an Array containing                         contents of the receiver."                    ^contents               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=removeAll:,codeType=rtalkremoveAll: aCollection                        "Answer aCollection.  Remove all the elements                         contained in aCollection from the receiver collection."                    aCollection do: [ :element | self remove: element].                    ^aCollection               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=associationsDo:,codeType=rtalkassociationsDo: aBlock                        "Answer the receiver.  For each key/value pair                         in the receiver, evaluate aBlock with that                         pair as the argument."                    1 to: contents size by: 2 do: [ :index |                        (contents at: index) isNil                            ifFalse: [                                aBlock value:                                    (Association                                        key: (contents at: index)                                        value: (contents at: index + 1))]]               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=fullCopy,codeType=rtalkfullCopy                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:55:22 pm>   "                        "Answer a copy of the receiver with shallow                         copies of each element."                    | answer |                    answer := self species new.                    self associationsDo: [:element |                        answer add: element fullCopy].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=removeKey:ifAbsent:,codeType=rtalkremoveKey: aKey ifAbsent: aBlock                        "Answer aKey.  Remove the key/value pair whose key                         is aKey from the receiver.  If aKey is not in the                         receiver, evaluate aBlock (with no arguments)."                    | index  |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    contents at: index put: nil.                    contents at: index + 1 put: nil.                    elementCount := elementCount - 1.                    self rehashFrom: index.                    ^aKey               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=lookupMethod:,codeType=rtalklookupMethod:aSymbol    "<modified:pgmr=mdr,time=06/16/14 at 11:18:12 am>   "         "searchs the chain towards the start, returns a RtCompiledMethod 	of nil" 	(self includesKey:aSymbol) ifTrue:[^self at:aSymbol]. 	selfLink isNil ifTrue:[^nil]. 	^selfLink lookupMethod:aSymbol :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=printInspectStringOn:indent:,codeType=rtalkprintInspectStringOn: aStream indent:aString                     "<modified:pgmr=mdr,time=01/03/13 at 09:18:01 pm>   "                          "Append the ASCII representation                           of the receiver to aStream for an inspector.                  		  adds cr after each element"                      | limit |                      (aStream recursive  includes: self)                          ifTrue: [^self printRecursionOn: aStream].                      aStream recursive   add: self.                      limit := aStream position + 200.                      self class printInspectStringOn: aStream indent:aString.                      aStream nextPut: $(.                  	owner printInspectStringOn: aStream indent:(aString,' ').                  	aStream cr.                      self do: [ :element |                          (aStream position > limit)                              ifTrue: [                                  '...etc...)' printOn: aStream.                                  aStream recursive  remove: self ifAbsent: [].                                  ^self].                          element printInspectStringOn: aStream indent:(aString,' ').                          aStream cr].                  	aStream nextPutAll:aString.                      aStream nextPut: $).                      aStream recursive  remove: self ifAbsent: []                 :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=removeKey:,codeType=rtalkremoveKey: aKey                        "Answer the receiver with the key/value pair whose                         key equals aKey removed.  If such a pair is not found,                         report an error."                    self removeKey: aKey ifAbsent: [self errorAbsentKey].               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=removeAssociation:,codeType=rtalkremoveAssociation: anAssociation                        "Answer the receiver after anAssociation has been                         removed from it.  If anAssociation is not in the                         receiver, report an error."                    self removeKey: anAssociation key               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=keys,codeType=rtalkkeys                        "Answer a Set containing all the keys                         in the receiver."                    | answer |                    answer := Set new: self size * 2.                    1 to: contents size by: 2 do: [ :index |                        (contents at: index) == nil                            ifFalse: [answer add: (contents at: index)]].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=keysDo:,codeType=rtalkkeysDo: aBlock                        "For each key in the receiver, evaluate aBlock with                         the key as the argument."                    self associationsDo: [ :anAssociation |                        aBlock value: anAssociation key]               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=selfLink,codeType=rtalkselfLink                "<modified:pgmr=mdr,time=07/03/13 at 06:31:22 pm>   "                     "the link to follow for self lookups"             	^selfLink             :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=asSortedCollection:,codeType=rtalkasSortedCollection: aBlock                        "Answer a SortedCollection containing                         the elements of the receiver sorted                         according to aBlock."                    ^(SortedCollection new: self size)                        sortBlock: aBlock;                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=collect:,codeType=rtalkcollect: aBlock                        "For each element in the receiver, evaluate aBlock with                         that element as the argument.  Answer a new collection                         containing the results as its elements from the aBlock                         evaluations."                    | answer |                    answer := self species new.                    self do: [ :element |                        answer add: (aBlock value: element)].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=superLink:,codeType=rtalksuperLink:aLookup                "<modified:pgmr=mdr,time=07/03/13 at 06:32:09 pm>   "                     "the link to follow for super lookups"             	superLink := aLookup             :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=lookUpKey:,codeType=rtalklookUpKey: aKey                        "Private - Answer the association                         in the receiver whose key equals                         aKey or nil if it doesn't exist."                    | index limit anAssociation |                    limit := contents size.                    index := (aKey hash) \\ limit + 1.                    [((anAssociation := contents at: index) == nil)                        or: [aKey = anAssociation key]]                            whileFalse: [                                (index := index + 1) > limit                                    ifTrue: [index := 1]]. "wrap-around"                    ^anAssociation               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=isNilOrEmpty,codeType=rtalkisNilOrEmpty                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:54:34 pm>   "                        "Answer true if the receiver collection                         contains no elements, else answer false."                    ^self isEmpty               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=printOn:,codeType=rtalkprintOn: aStream                     "<modified:pgmr=mdr,time=01/03/13 at 01:40:50 pm>   "                     "<modified:sys=G78T5XCA,time=04/03/10 at 05:36:55 pm>   "                     "<modified:sys=G9TQQ5YA,time=04/02/10 at 12:29:08 pm>   "                          "Append the ASCII representation                           of the receiver to aStream."                      | limit |                      (aStream recursive includes: self)                          ifTrue: [^self printRecursionOn: aStream].                      aStream recursive add: self.                      limit := 200.                      self class printOn: aStream.                      self associationsDo:[ :a |                          limit := limit - 1.                          limit < 0 ifTrue:[^ aStream recursive remove: self ifAbsent: []].                          aStream cr;nextPutAll:(a printString)].                      aStream recursive remove: self ifAbsent: []                 :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=associationAt:ifAbsent:,codeType=rtalkassociationAt: aKey ifAbsent: aBlock                        "Answer an Association, with aKey and its                         corresponding value if aKey exists in the                         receiver, else evaluate aBlock (with no arguments)."                    | index |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    ^Association                        key: (contents at: index)                        value: (contents at: index + 1)               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=select:,codeType=rtalkselect: aBlock                        "For each key/value pair in the receiver, evaluate                         aBlock with the value part of the pair as the argument.                         Answer a new object containing those key/value pairs                         for which aBlock evaluates to true."                    | answer |                    answer := self species new.                    self associationsDo: [ :each |                        (aBlock value: each value)                            ifTrue: [answer add: each]].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=associationsSelect:,codeType=rtalkassociationsSelect: aBlock                        "For each key/value pair in the receiver, evaluate                         aBlock with the association as the argument.                         Answer a new object containing those key/value pairs                         for which aBlock evaluates to true."                    | answer |                    answer := self species new.                    self associationsDo: [ :each |                        (aBlock value: each)                            ifTrue: [answer add: each]].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=atIgnoreCase:ifAbsent:,codeType=rtalkatIgnoreCase: aKey ifAbsent: aBlock                        "Answer the value of the key/value pair whose key                         equals aKey from the receiver.  If not found,                         evaluate aBlock (with no arguments).                         key can be symbol or string and case is ignore"                    | newKey |                    newKey := self riKeyList                                         detect:[ :k |                                              k equalsIgnoreCase: aKey asString]                                        ifNone:[nil].                    ^newKey == nil                        ifTrue:[aBlock value]                        ifFalse:[                            self any key isSymbol                                ifTrue:[self at: newKey asSymbol]                                ifFalse:[self at: newKey]]               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=includes:,codeType=rtalkincludes: anObject                        "Answer true if the receiver contains the                         key/value pair whose value equals anObject,                         else answer false."                    self do: [ :element |                        element = anObject                            ifTrue: [^true]].                    ^false               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=reject:,codeType=rtalkreject: aBlock                        "For each element in the receiver, evaluate aBlock                         with that element as the argument.  Answer a new                         collection containing those elements of the receiver                         for which aBlock evaluates to false."                    ^self select: [ :element |                        (aBlock value: element) not]               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector==,codeType=rtalk=aDict                   "<modified:sys=GAKRE8CA,time=02/10/11 at 10:14:19 am>   "                        "true if all key values are same"                    | tmp |                    self == aDict                        ifTrue: [^true].                    (self class == aDict class)                        ifFalse: [^false].                    (aDict size = self size) ifFalse:[^false].                    self associationsDo:[ :a |                             tmp := aDict at:(a key) ifAbsent:[^false].                            (tmp = a value) ifFalse:[^false]].                    ^true               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=errorAbsentObject,codeType=rtalkerrorAbsentObject                        "Private - Report an error to the effect                         that the element desired was not found                         in the receiver collection."                    ^self error: 'object is not in the collection'               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=at:put:,codeType=rtalkat: aKey put: anObject                   "<modified:sys=GAKRE8CA,time=02/10/11 at 10:09:44 am>   "                        "Answer anObject.  If aKey exists in the receiver,                         replace the corresponding value with anObject, else                         add the aKey/anObject pair to the receiver."                    | index |                    aKey isNil                        ifTrue: [self error: 'key cannot be nil'].                    index := self findKeyIndex: aKey.                    (contents at: index) isNil                        ifTrue: [                            elementCount := elementCount + 1.                            contents at: index put: aKey.                            contents at: index + 1 put: anObject.                            self adjustSize]                        ifFalse: [contents at: index + 1 put: anObject].                    ^anObject               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=at:ifAbsent:,codeType=rtalkat: aKey ifAbsent: aBlock                        "Answer the value of the key/value pair whose key                         equals aKey from the receiver.  If not found,                         evaluate aBlock (with no arguments)."                    | index |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    ^contents at: index + 1               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=values,codeType=rtalkvalues                        "Answer a Bag containing all the values of the                         key/value pairs in the receiver dictionary."                    | answer index |                    answer := Bag new.                    1 to: contents size // 2 do: [ :i |                        index := i * 2 - 1.                        (contents at: index) isNil                            ifFalse: [                                answer add: (contents at: index + 1)]].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=remove:,codeType=rtalkremove: anObject                        "Answer anObject.  Remove the element equal                         to anObject from the receiver collection.  If                         such an element is not found, report an error."                    ^self                        remove: anObject                        ifAbsent: [self errorAbsentObject]               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=keyAtValue:ifAbsent:,codeType=rtalkkeyAtValue: anObject ifAbsent: aBlock                        "Answer the key in the receiver whose paired value                         equals anObject.  If not found, evaluate aBlock                         (with no arguments)."                    1 to: contents size by: 2 do: [ :index |                        (contents at: index + 1) = anObject                            ifTrue: [                                (contents at: index) == nil                                    ifFalse: [^contents at: index]]].                    ^aBlock value               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=implementsMethod:,codeType=rtalkimplementsMethod:aSymbol    "<modified:pgmr=mdr,time=06/16/14 at 11:29:20 am>   "         "retruns true if this method is supported in the chain" 	^(self lookupMethod:aSymbol) isNil not :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=detect:,codeType=rtalkdetect: aBlock                        "Answer the first element of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument).  If no such element                         is found, report an error."                    ^self                        detect: aBlock                        ifNone: [self errorAbsentObject]               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=deepCopy,codeType=rtalkdeepCopy                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:55:55 pm>   "                        "Answer a copy of the receiver with shallow                         copies of each element."                    | answer |                    answer := self species new.                    self associationsDo: [:element |                        answer add: element copy].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=size,codeType=rtalksize                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:53:20 pm>   "                        "Answer the number of elements contained                         in the receiver."                    ^elementCount               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=asSortedCollection,codeType=rtalkasSortedCollection                        "Answer a SortedCollection containing                         the elements of the receiver sorted                         in ascending order."                    ^(SortedCollection new: self size)                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=associationAt:,codeType=rtalkassociationAt: aKey                        "Answer the Association whose key equals aKey                         from the receiver.  If not found,                         report an error."                    ^self                        associationAt: aKey                        ifAbsent: [self errorAbsentKey]               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=detect:ifNone:,codeType=rtalkdetect: aBlock ifNone: exceptionBlock                        "Answer the first element of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument).  If no such element is                         found, evaluate exceptionBlock (with no arguments)."                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [^element]].                    ^exceptionBlock value               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=selfLink:,codeType=rtalkselfLink:aLookup                "<modified:pgmr=mdr,time=07/03/13 at 06:32:36 pm>   "                     "the link to follow for self lookups"             	selfLink := aLookup             :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=do:,codeType=rtalkdo: aBlock                        "Answer the receiver.  For each value                         in the receiver, evaluate aBlock with                         that value as the argument."                    1 to: contents size by: 2 do: [ :index |                        (contents at: index) isNil                            ifFalse: [                                aBlock value:                                    (contents at: index + 1)]]               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=owner,codeType=rtalkowner                   "<modified:sys=GAKRE8CA,time=12/19/11 at 05:30:27 pm>   "                        "comment"                    ^owner               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=errorAbsentKey,codeType=rtalkerrorAbsentKey                        "Private - Report an error to the effect                         that the desired key was not found in the                         receiver."                    self error: 'Key is missing'               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=any,codeType=rtalkany                "                    Return any Association in the dictionary.  This is used when                    you just want any key/value pair in the dictionary, and you                    don't care which one.                "                    (elementCount = 0) ifTrue: [ ^Association new ].                    1 to: contents size by: 2 do: [:i |                        (contents at: i) notNil ifTrue: [                            ^Association key: (contents at: i) value: (contents at: (i + 1))                        ]                    ].               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=initialize:,codeType=rtalkinitialize: anInteger                        "Private - Initialize the instance variable                         elementCount to zero, contents to an Array                         of size anInteger."                    elementCount := 0.                    contents := Array new: anInteger               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=owner:,codeType=rtalkowner:aObject                   "<modified:sys=GAKRE8CA,time=12/19/11 at 05:30:15 pm>   "                        "comment"                    owner := aObject               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=findElementIndex:,codeType=rtalkfindElementIndex: anObject                        "Private - Answer the index position of anObject in the                         receiver or the first empty element position."                    | index indexedObject lastIndex |                    lastIndex := contents size.                    index := (anObject hash) \\ lastIndex + 1.                    [(indexedObject := contents at: index) = anObject]                        whileFalse: [                            (indexedObject == nil)                                ifTrue: [^index].                            (index := index + 1) > lastIndex                                ifTrue: [ "index wraparound"                                    index := 1]].                    ^index               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=errorNotIndexable,codeType=rtalkerrorNotIndexable                        "Private - Report an error to the effect that                         the receiver collection is not indexable."                    ^self error: self class name,                        's do not respond to indexing messages'               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=notEmpty,codeType=rtalknotEmpty                        "Answer true if the receiver collection contains                         one or more elements, else answer false."                    ^self size > 0               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=add:,codeType=rtalkadd: anAssociation                        "Answer anAssociation.  Add anAssociation to the                         receiver."                    self                        at: anAssociation key                        put: anAssociation value.                    ^anAssociation               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=superLink,codeType=rtalksuperLink                "<modified:pgmr=mdr,time=07/03/13 at 06:31:38 pm>   "                     "the link to follow for super lookups"             	^superLink             :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=isCollection,codeType=rtalkisCollection                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:54:56 pm>   "                        "Answer true if receiver is a kind of Collection."                    ^true               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=grow,codeType=rtalkgrow                        "Private - Answer the receiver doubled in                         size to accomodate more key/value                         pairs."                    | aDictionary |                    aDictionary := self species                        newSize: contents size. "this doubles the size"                    self associationsDo: [ :anAssociation |                        aDictionary add: anAssociation].                    contents := aDictionary contents               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=remove:ifAbsent:,codeType=rtalkremove: anObject ifAbsent: aBlock                        "Remove the key/value pair whose value is anObject                         from the receiver dictionary.  This method                         reports an error since the values are                         not unique in a dictionary, the keys are."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=inject:into:,codeType=rtalkinject: initialValue into: aBinaryBlock                        "For each element in the receiver collection, evaluate                         aBinaryBlock with that element as the argument.  Starting                         with initialValue, the block is also provided with its own                         value from the previous evaluation.  Answer this value                         at the end of the block evaluations."                    | answer |                    answer := initialValue.                    self do: [ :element |                        answer := aBinaryBlock                            value: answer                            value: element].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=shallowCopy,codeType=rtalkshallowCopy                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:53:51 pm>   "                        "Answer a copy of the receiver which shares                         the receiver elements."                    | answer |                    answer := self species new.                    self associationsDo: [:element |                        answer add: element].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=isEmpty,codeType=rtalkisEmpty                        "Answer true if the receiver collection                         contains no elements, else answer false."                    ^self size = 0               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=at:,codeType=rtalkat: aKey                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:56:07 pm>   "                   "<modified:sys=GAKRE8CA,time=02/10/11 at 10:10:07 am>   "                        "Answer the value of the key/value pair whose key                         equals aKey from the receiver.  If                         not found, report an error."                    | index |                    index := self findKeyIndex: aKey.                    (contents at: index) == nil                        ifTrue: [^self errorAbsentKey].                    ^contents at: index + 1               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=addAll:,codeType=rtalkaddAll: aCollection                        "Answer aCollection.  Add each element of                         aCollection to the elements of the receiver."                    aCollection do: [ :element | self add: element].                    ^aCollection               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=findKeyIndex:,codeType=rtalkfindKeyIndex: key                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:48:10 pm>   "                   "<modified:sys=GAKRE8CA,time=05/05/11 at 09:40:39 pm>   "                        "Private - Answer the index position of the                         key/value pair in the receiver whose key equals                         aKey or the index of the first empty position                         where such an pair would be stored."                    | index lastIndex |                    lastIndex := contents size.                    index := ((key hash) \\ (lastIndex // 2))                        * 2 + 1.                    [key == (contents at: index)]                        whileFalse: [                            (contents at: index) isNil                                ifTrue: [^index].                            (index := index + 2) > lastIndex                                ifTrue: [ "index wraparound"                                    index := 1]].                    ^index               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=adjustSize,codeType=rtalkadjustSize                        "Private - Answer the receiver.  If the receiver is                         getting full, expand it to accomodate more objects."                    (elementCount * 20) >= (contents size - 2 * 9)                        ifTrue: [^self grow]               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=occurrencesOf:,codeType=rtalkoccurrencesOf: anObject                        "Answer the number of key/value pairs in the receiver,                         whose values are equal to anObject."                    | answer |                    answer := 0.                    self do: [ :element |                        element = anObject                            ifTrue:  [answer := answer + 1]].                    ^answer               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=rehashFrom:,codeType=rtalkrehashFrom: anInteger                        "Private - Rehash the keys of the receiver                         from the index position anInteger                         to the last index position."                    | index size searchIndex anObject |                    size := contents size.                    index := anInteger.                    [(index := index + 2) > size                        ifTrue: [ "index wraparound"                            index := 1].                    (anObject := contents at: index) isNil]                        whileFalse: [ "test next key for relocation"                            searchIndex := self findKeyIndex: anObject.                            (contents at: searchIndex) isNil                                ifTrue: [ "found key to move"                                    contents                                        at: searchIndex                                        put: (contents at: index).                                    contents                                        at: index                                        put: nil.                                    contents                                        at: searchIndex + 1                                        put: (contents at: index + 1).                                    contents                                        at: index + 1                                        put: nil]]               :SOURCE,type=instanceMethod,class=RtMethodLookup,selector=includesKey:,codeType=rtalkincludesKey: aKey                        "Answer true if the receiver contains aKey,                         else answer false."                    ^(contents at: (self findKeyIndex: aKey)) notNil               :SOURCE,type=instanceMethod,class=RtBlock2Arg,selector=value:value:,codeType=rtalkvalue:arg1 value:arg2                   "<modified:pgmr=mdr,time=01/04/13 at 05:21:35 pm>   "                        "comment"                	<jprim: /ObjectPrims primBlockInvokeWithWith>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Float,selector=sqrt,codeType=rtalksqrt                   "<modified:pgmr=mdr,time=01/04/13 at 02:34:10 pm>   "                        "Answer the square root of the receiver."                    <jprim: /FloatPrims primFloatSqrt>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=sin,codeType=rtalksin                   "<modified:pgmr=mdr,time=01/04/13 at 02:34:02 pm>   "                        "Answer the sine of the receiver.  The                         receiver is an angle measured in radians"                    <jprim: /FloatPrims primFloatSin>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=logToLin,codeType=rtalklogToLin                        "does  c voltage log conversion"                    ^10.0 raisedTo:(self /20.0)               :SOURCE,type=instanceMethod,class=Float,selector=hash,codeType=rtalkhash                   "<modified:sys=GAKRE8CA,time=02/04/12 at 03:31:09 pm>   "                        "Answer the integer hash value for the receiver."                         "If the receiver is equal to an Integer, answer the                        corresponding Integer's hash value.  Otherwise                        compute a value based on the integer part and                        the most significant bits of the fraction part."                    | intPart fracPart fracInt shifter mask |                    intPart := self truncated.                    fracPart := (self - intPart asFloat) abs.                    fracPart = 0.0                        ifTrue: [^intPart hash].                    shifter := 16r40000000.        "why only 30 bits for hash values?"                    mask := 16r3FFFFFFF.        " Because its enough."                    fracInt := (shifter * fracPart * (2.0 raisedTo: fracPart exponent abs asFloat)) truncated.                    ^(intPart abs bitXor: fracInt) bitAnd: mask               :SOURCE,type=instanceMethod,class=Float,selector=random,codeType=rtalkrandom                   "<modified:pgmr=mdr,time=01/04/13 at 02:33:24 pm>   "                        "self * a random value from 0 to 1"                    <jprim: /FloatPrims primFloatRandom>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=mag,codeType=rtalkmag                        "comment"                    ^self               :SOURCE,type=instanceMethod,class=Float,selector=riIsFloat,codeType=rtalkriIsFloat                        "comment"                    ^true               :SOURCE,type=instanceMethod,class=Float,selector=<,codeType=rtalk< aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 02:30:59 pm>   "                        "Answer true if the receiver is less                         than aNumber, else answer false."                    <jprim: /FloatPrims primFloatLessThan>                    aNumber isFloat                        ifTrue: [ ^self class floatError ]                        ifFalse: [^self < aNumber asFloat]               :SOURCE,type=instanceMethod,class=Float,selector==,codeType=rtalk= aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 02:31:16 pm>   "                        "Answer true if the receiver is equal                         to aNumber, else answer false."                    <jprim: /FloatPrims primFloatEquals>                    aNumber isFloat                        ifTrue: [ ^self class floatError ]                        ifFalse: [                            (aNumber isNumber)                                ifTrue: [^self = aNumber asFloat]                                ifFalse: [^false]]               :SOURCE,type=instanceMethod,class=Float,selector=truncatedPrim,codeType=rtalktruncatedPrim                   "<modified:pgmr=mdr,time=01/04/13 at 02:40:28 pm>   "                        "Answer the receiver as a kind of                         Integer truncating the fraction part."                    | answer float scale partialInt |                    <jprim: /FloatPrims primFloatTruncated>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=>,codeType=rtalk> aNumber                        "Answer true if the receiver is greater                         than aNumber, else answer false."                    ^aNumber asFloat < self               :SOURCE,type=instanceMethod,class=Float,selector=printOn:,codeType=rtalkprintOn: aStream                   "<modified:sys=GAKRE8CA,time=08/10/11 at 04:34:28 pm>   "                   "<modified:sys=GAKRE8CA,time=04/22/11 at 05:38:31 pm>   "                        "Append the ASCII representation                         (maximum of 8 digits) of                         the receiver to aStream."                    self printOn: aStream                         decimalSeparator: ((Character value:46) asString)               :SOURCE,type=instanceMethod,class=Float,selector=replaceBytesFrom:to:with:startingAt:,codeType=rtalkreplaceBytesFrom: byteStart                    to: byteStop                    with: aVariableByteObject                    startingAt: byteRepStart                   "<modified:pgmr=mdr,time=01/04/13 at 06:59:57 pm>   "                        "Private - replace the bytes of the receiver at index                         positions start through stop with consecutive                         bytes of aVariableByteObject beginning at index                         position repStart.  Answer the receiver."                    | srcIndex |                	<jprim: /ByteStringPrims primBytesReplaceFromToWithStartingAt>                    srcIndex := byteRepStart.                    byteStart to: byteStop do: [ :dstIndex |                        self   " must use basicAt: so DoubleByteString parm handled properly "                            at: dstIndex                            put: (aVariableByteObject basicAt: srcIndex) asInteger.                        srcIndex := srcIndex + 1].               :SOURCE,type=instanceMethod,class=Float,selector=riRoundTo125,codeType=rtalkriRoundTo125                   "<modified:sys=GAKRE8CA,time=02/04/12 at 03:31:54 pm>   "                   "<modified:sys=GAKRE8CA,time=01/25/12 at 05:53:22 pm>   "                   "<modified:sys=GAKRE8CA,time=05/03/11 at 04:36:04 pm>   "                        "computes a 1,2,5 sequenced step from value"                   |mult exp digit temp sign dp|                   "adjust to engineering units, exp is a mult of 3 "                  self = 0                    ifFalse:[                    exp := 0.                    temp := self abs.                   [ temp >= 10 ]                         whileTrue:[temp := temp / 10.                                          exp := exp + 1].                   [ temp < 1 ]                         whileTrue:[temp := temp * 10.                                          exp := exp - 1].                   temp > 1 ifTrue:[ digit := 2].                   temp > 2 ifTrue:[ digit := 5].                   temp > 5 ifTrue:[ digit := 10].                   temp = 5 ifTrue:[ digit := 5].                   temp = 2 ifTrue:[ digit := 2].                   temp = 1 ifTrue:[ digit := 1].                   ^( digit * (10.0 raisedTo:exp asFloat) *  (self sign))]                    ifTrue:[^self]               :SOURCE,type=instanceMethod,class=Float,selector=validValue,codeType=rtalkvalidValue                   "<modified:pgmr=mdr,time=01/04/13 at 02:40:47 pm>   "                        "Answer true if this is a valid float"                    <jprim: /FloatPrims primFloatValid >               :SOURCE,type=instanceMethod,class=Float,selector=replace:with:,codeType=rtalkreplace: count with: aVariableByteObject                   "<modified:pgmr=mdr,time=01/04/13 at 06:59:39 pm>   "                        "Private - Replace count elements of the receiver                         with aVariableByteObject."                    <jprim: /ByteStringPrims primBytesReplaceCountWith>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Float,selector=>=,codeType=rtalk>= aNumber                        "Answer true if the receiver is greater than                         or equal to aNumber, else answer false."                    ^(self < aNumber) not               :SOURCE,type=instanceMethod,class=Float,selector=exp,codeType=rtalkexp                   "<modified:pgmr=mdr,time=01/04/13 at 02:31:58 pm>   "                        "Answer the exponential of the receiver."                    <jprim: /FloatPrims primFloatExp>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=<=,codeType=rtalk<= aNumber                        "Answer true if the receiver is less than                         or equal to aNumber, else answer false."                    ^(aNumber asFloat < self) not               :SOURCE,type=instanceMethod,class=Float,selector=radiansToDegrees,codeType=rtalkradiansToDegrees                        "Answer the number of degrees the                         receiver represents in radians."                    ^self * 180 / Float pi               :SOURCE,type=instanceMethod,class=Float,selector=ln,codeType=rtalkln                   "<modified:pgmr=mdr,time=01/04/13 at 02:32:33 pm>   "                        "Answer the natural log of the receiver."                    <jprim: /FloatPrims primFloatLn>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=riAsString:units:,codeType=rtalkriAsString:res units:aString                   "<modified:sys=GAKRE8CA,time=01/21/12 at 05:25:14 pm>   "                    "returns a string using units and multipiler prefix"                    |mult exp digits temp sign dp index |                    "adjust to engineering units, exp is a mult of 3 "                    "mdr 12/2/91 fixed to handle 0.0"                    self = 0 ifTrue:[^'0  ',aString].                    exp := 0.                    temp := self abs.                    [ temp >= 1000 ] whileTrue:[                        temp := temp / 1000.                        exp := exp + 3].                    (temp < 0.001) ifTrue:[                        [ temp < 1.0 ] whileTrue:[                            temp := temp * 1000.                            exp := exp - 3]].                    ((res = 1) & (temp >= 10)) | ((res = 2) & (temp >= 100))                    ifTrue:[                                temp := temp / 1000.                        exp := exp + 3].                    dp := -2.                    temp >= 0.01 ifTrue:[ dp := -1].                    temp >= 0.1 ifTrue:[ dp := 0].                    temp >= 1 ifTrue:[ dp := 1].                    temp >= 10 ifTrue:[ dp := 2].                    temp >= 100 ifTrue:[ dp := 3].                    exp = 3                        ifFalse:[                            digits := (temp * (self sign)) printRounded:(0 max:(res - dp)).                            index := digits size.                            [$0 = (digits at: index)] whileTrue:[ index := index - 1].                            ($. = (digits at: index)) ifTrue:[ index := index - 1].                            digits := digits copyFrom: 1 to: index.                            "determine mult string, if > 10^9 or < 10^-9 print exp"                            ( exp > 9 or:[exp < -9])                                ifTrue:[mult := 'e',(exp printPaddedTo:1),' ']                                ifFalse:[                                    mult := String new:1.                                    mult at:1 put:( 'num KMG' at:((exp // 3) + 4)) ].                        ^digits,' ',mult,aString]                    ifTrue:[" special case for K mult "                            digits := (temp * 1000 * (self sign)) printRounded:(0 max:(res - dp)).                            index := digits size.                            [$0 = (digits at: index)] whileTrue:[ index := index - 1].                            ($. = (digits at: index)) ifTrue:[ index := index - 1].                            digits := digits copyFrom: 1 to: index.                            "determine mult string, if > 10^9 or < 10^-9 print exp"                                ^digits,' ',aString]               :SOURCE,type=instanceMethod,class=Float,selector=significand,codeType=rtalksignificand                   "<modified:pgmr=mdr,time=01/04/13 at 02:33:52 pm>   "                        "Answer the floating point number whose value                         is the significand part of the floating                         point representation of the receiver."                    <jprim: /FloatPrims primFloatSignificand>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=/,codeType=rtalk/ aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 02:30:46 pm>   "                        "Answer the result of dividing                         the receiver by aNumber. Not perfect in theory"                    <jprim: /FloatPrims primFloatDivide>                    aNumber isRiData                        ifTrue:[^aNumber reciprocal * self]                        ifFalse:[                    aNumber isFloat                        ifTrue: [ ^self class floatError ]                        ifFalse: [ ^self / aNumber asFloat ]]               :SOURCE,type=instanceMethod,class=Float,selector=truncated,codeType=rtalktruncated                        "Answer the receiver as a kind of                         Integer truncating the fraction part.                        solves a problem with core duo on mac"                    | answer float scale partialInt |                    self abs > 1.073741e9                        ifFalse:[^self truncatedPrim].                    self negative ifTrue: [ ^ self abs truncated negated ].                    scale := self exponent truncated.                    float := self timesTwoPower: scale \\ 13 - scale.                    answer := float truncated.                    float := float - answer asFloat.                    scale // 13 timesRepeat: [                        float := float timesTwoPower: 13.                        partialInt := float truncated.                        answer := answer * 8192 + partialInt.                        float := (float - partialInt asFloat)].                    ^answer               :SOURCE,type=instanceMethod,class=Float,selector=-,codeType=rtalk- aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 02:30:41 pm>   "                        "Answer the difference between                         the receiver and aNumber."                    <jprim: /FloatPrims primFloatSub>                    aNumber isRiData                        ifTrue:[^aNumber negated + self]                        ifFalse:[                    aNumber isFloat                        ifTrue: [ ^self class floatError ]                        ifFalse: [ ^self - aNumber asFloat ]]               :SOURCE,type=instanceMethod,class=Float,selector=tan,codeType=rtalktan                   "<modified:pgmr=mdr,time=01/04/13 at 02:34:28 pm>   "                        "Answer the tangent of the receiver.  The                         receiver is an angle measured in radians"                    <jprim: /FloatPrims primFloatTan>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=+,codeType=rtalk+ aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 02:30:21 pm>   "                        "Answer sum of the receiver and aNumber."                    <jprim: /FloatPrims primFloatAdd>                    aNumber isRiData                        ifTrue:[^aNumber + self]                        ifFalse:[                    aNumber isFloat                        ifTrue: [ ^self class floatError ]                        ifFalse: [ ^self + aNumber asFloat ]]               :SOURCE,type=instanceMethod,class=Float,selector=*,codeType=rtalk* aNumber                   "<modified:pgmr=mdr,time=01/04/13 at 02:29:40 pm>   "                        "Answer the result of multiplying                         the receiver by aNumber."                    <jprim: /FloatPrims primFloatMult>                    aNumber isRiData                        ifTrue:[^aNumber * self]                        ifFalse:[                    aNumber isFloat                        ifTrue: [ ^self class floatError ]                        ifFalse: [ ^self * aNumber asFloat ]]               :SOURCE,type=instanceMethod,class=Float,selector=replaceFrom:to:with:startingAt:,codeType=rtalkreplaceFrom: start                    to: stop                    with: aString                    startingAt: repStart                   "<modified:pgmr=mdr,time=01/04/13 at 07:02:00 pm>   "                        " Private - For use by ObjectFiler to load Float values. "                    | srcIndex |                	<jprim: /ByteStringPrims primBytesReplaceFromToWithStartingAt>                    srcIndex := repStart.                    start to: stop do: [ :dstIndex |                        self at: dstIndex put: (aString at: srcIndex) asInteger.                        srcIndex := srcIndex + 1].               :SOURCE,type=instanceMethod,class=Float,selector=reciprocal,codeType=rtalkreciprocal                        "Answer one divided by the receiver."                    ^1.0 / self               :SOURCE,type=instanceMethod,class=Float,selector=riAsFloat,codeType=rtalkriAsFloat                        "comment"                    ^self               :SOURCE,type=instanceMethod,class=Float,selector=arcTan,codeType=rtalkarcTan                   "<modified:pgmr=mdr,time=01/04/13 at 02:31:41 pm>   "                        "Answer the arc-tangent, an angle in                         radians, of the receiver."                    <jprim: /FloatPrims primFloatArcTan>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=degreesToRadians,codeType=rtalkdegreesToRadians                        "Answer the number of radians the                         receiver represents in degrees."                    ^self * Float pi / 180               :SOURCE,type=instanceMethod,class=Float,selector=//,codeType=rtalk// aNumber                        "Answer the integer quotient after dividing                         the receiver by aNumber with truncation                         towards negative infinity."                    | answer quotient |                    quotient := self / aNumber.                    answer := quotient truncated.                    quotient < 0                        ifTrue: [                            answer = quotient                                ifFalse: [^answer - 1]].                    ^answer               :SOURCE,type=instanceMethod,class=Float,selector=riAsHexString,codeType=rtalkriAsHexString                   "<modified:sys=GAKRE8CA,time=01/23/12 at 05:29:18 pm>   "                   "<modified:sys=G89AC0CA,time=08/16/10 at 09:01:19 am>   "                   "<modified:sys=G89AC0CA,time=08/14/10 at 09:45:18 am>   "                        "string of hex bytes"                    | rtn tmp|                    tmp := ByteArray new:8.                    tmp replace: 8 with:self.                    ^tmp asHexString               :SOURCE,type=instanceMethod,class=Float,selector=units,codeType=rtalkunits                        "comment"                    ^''               :SOURCE,type=instanceMethod,class=Float,selector=log10,codeType=rtalklog10                        "Answer the log base 10 of the receiver."                    ^self ln / 2.30258509299               :SOURCE,type=instanceMethod,class=Float,selector=riEngNotationDigits:,codeType=rtalkriEngNotationDigits:res                        "aInt is the number of digits shown"                    |mult exp digits temp sign dp index |                    "adjust to engineering units, exp is a mult of 3 "                    "mdr 12/2/91 fixed to handle 0.0"                    self = 0 ifTrue:[^'0'].                    exp := 0.                    temp := self abs.                    [ temp >= 1000 ] whileTrue:[                        temp := temp / 1000.                        exp := exp + 3].                    (temp < 0.001) ifTrue:[                        [ temp < 1.0 ] whileTrue:[                            temp := temp * 1000.                            exp := exp - 3]].                    ((res = 1) & (temp >= 10)) | ((res = 2) & (temp >= 100))                    ifTrue:[                                temp := temp / 1000.                        exp := exp + 3].                    dp := -2.                    temp >= 0.01 ifTrue:[ dp := -1].                    temp >= 0.1 ifTrue:[ dp := 0].                    temp >= 1 ifTrue:[ dp := 1].                    temp >= 10 ifTrue:[ dp := 2].                    temp >= 100 ifTrue:[ dp := 3].                            digits := (temp * (self sign)) printRounded:(0 max:(res - dp)).                            index := digits size.                            [$0 = (digits at: index)] whileTrue:[ index := index - 1].                            ($. = (digits at: index)) ifTrue:[ index := index - 1].                            digits := digits copyFrom: 1 to: index.                            "determine mult string, if > 10^9 or < 10^-9 print exp"                            ( exp > 9 or:[exp < -12])                                ifTrue:[mult := 'e',(exp printPaddedTo:1),' ']                                ifFalse:[                                    mult := String new:1.                                    mult at:1 put:( 'pnum KMG' at:((exp // 3) + 5)) ].                        ^digits,' ',mult               :SOURCE,type=instanceMethod,class=Float,selector=timesTwoPower:,codeType=rtalktimesTwoPower: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 02:40:10 pm>   "                        "Answer 2 to the exponent anInteger                         multiplied by the receiver."                    <jprim: /FloatPrims primFloatTimesTwoPower>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=almostEqualTo:,codeType=rtalkalmostEqualTo:aFloat                "                    Return 'true' if self and aFloat are within a small tolerance.  The                    default tolerance is the smaller of the two, divided by 1e-5.                    (96.12.06 JB -- I added local vars to avoid calling #abs twice                    for each parameter.)                "                    | a b r |                    r := ((a := self abs) min:(b := aFloat abs)) / 100000.0.                " DCB change < to <= so 0.0 is almostEqualTo: 0.0 "                    ^(a - b) abs <= r               :SOURCE,type=instanceMethod,class=Float,selector=isFloat,codeType=rtalkisFloat                        "Answer true if receiver is a kind of Float."                    ^true               :SOURCE,type=instanceMethod,class=Float,selector=raisedTo:,codeType=rtalkraisedTo:aFloat                   "<modified:pgmr=mdr,time=01/04/13 at 02:33:04 pm>   "                        "self to a value"                    <jprim: /FloatPrims primFloatPower>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=cos,codeType=rtalkcos                   "<modified:pgmr=mdr,time=01/04/13 at 02:31:47 pm>   "                        "Answer the cosine of the receiver.  The                         receiver is an angle measured in radians"                    <jprim: /FloatPrims primFloatCos>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=printOn:decimalSeparator:,codeType=rtalkprintOn: aStream decimalSeparator: decimalString                   "<modified:pgmr=mdr,time=08/07/12 at 11:11:23 pm>   "                   "<modified:sys=GAKRE8CA,time=02/04/12 at 03:42:10 pm>   "                   "<modified:sys=GAKRE8CA,time=02/04/12 at 03:09:35 pm>   "                   "<modified:sys=GAKRE8CA,time=08/10/11 at 04:29:20 pm>   "                        "Append the ASCII representation                         (maximum of 8 digits) of                         the receiver to aStream                         using decimalString as the decimal                         separator."                    | digitCount integer number rounder scale n integerString |                	self validValue ifFalse:[^aStream nextPutAll:'nan'].                    (number := self) < 0.0                        ifTrue: [                            aStream nextPut: $-.                            number := self negated].                    rounder := 0.5e-10.                    number = 0.0                        ifTrue: [^aStream nextPutAll: '0', decimalString, '0'].                    scale := 0.                    [number >= 10.0]                        whileTrue: [                            number := number / 10.0.                            scale := scale + 1].                    [number < 1.0 ]                        whileTrue: [                            number := number * 10.0.                            scale := scale - 1].                    number := number + rounder.                    number >= 10.0                        ifTrue: [                            number := number /10.0.                            scale := scale + 1].                    (scale > 7 or: [                    scale < -7 or: [                    scale < 0 and: [                    n := number * (10.0 raisedTo: (7 + scale)asFloat).                    ((n - n truncated) * (10.0 raisedTo:                        scale negated asFloat)) truncated ~= 0]]])                        ifFalse: [                            number := number * (10.0 raisedTo: scale asFloat).                            rounder := rounder * (10.0 raisedTo: scale asFloat).                            scale := 0].                    integer := number truncated.                    number := number - integer.                    integerString := integer printString.                    digitCount := 9 - integerString size.                    aStream nextPutAll: integerString.                    aStream nextPutAll: decimalString.                    rounder := rounder * 2.                    [number := number * 10.0.                    integer := number truncated.                    number := number - integer.                    aStream nextPut: (Character digitValue: integer).                    (digitCount := digitCount - 1) > 0 and:                    [(rounder := rounder * 10) <= number]]                        whileTrue: [].                    scale = 0                        ifFalse: [                            aStream nextPut: $e.                            scale printOn: aStream]               :SOURCE,type=instanceMethod,class=Float,selector=exponent,codeType=rtalkexponent                   "<modified:pgmr=mdr,time=01/04/13 at 02:32:06 pm>   "                        "Answer the floating point number whose value                         is the exponent part of the floating                         point representation of the receiver."                    <jprim: /FloatPrims primFloatExponent>                    ^self class floatError               :SOURCE,type=instanceMethod,class=Float,selector=negated,codeType=rtalknegated                        "Answer the receiver subtracted from zero."                    ^0.0 - self               :SOURCE,type=instanceMethod,class=Float,selector=asFloat,codeType=rtalkasFloat                        "Answer the receiver as a floating                         point number."                    ^self               :SOURCE,type=instanceMethod,class=Float,selector=asInteger,codeType=rtalkasInteger                        "Answer the integer closes to self."                    ^self rounded.               :SOURCE,type=instanceMethod,class=Float,selector=im,codeType=rtalkim                        "returns 0.0"                   ^0.0               :SOURCE,type=instanceMethod,class=Float,selector=printPaddedTo:,codeType=rtalkprintPaddedTo: anInteger                    " convert to a integer and print "                    ^self asInteger printPaddedTo:anInteger               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=do:,codeType=rtalkdo: aBlock                        "Answer the receiver.  For each element in the receiver,                         evaluate aBlock with that element as the argument."                    | index size |                    index := 1.                    size := self size.                    [index > size]                        whileFalse: [                            aBlock value: (self at: index).                            index := index + 1]               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=growSize,codeType=rtalkgrowSize                        "Private - Answer the number of elements                         that the receiver is to expand by."                    ^self size // 3 + 10               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=findLast:,codeType=rtalkfindLast: aBlock                        "Answer the index of the last element of the                         receiver that causes aBlock to evaluate to true                         (with that element as the argument).  If no such                         element is found, report an error."                    | index |                    index := self size.                    [index > 0]                        whileTrue: [                            (aBlock value: (self at: index) )                                ifTrue: [^index].                            index := index - 1].                    ^self errorAbsentObject               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=copyReplaceFrom:to:with:,codeType=rtalkcopyReplaceFrom: start to: stop with: aCollection                        "Answer a new collection containing a copy of the                         receiver with the elements at index positions from                         start through stop replaced with the elements of                         aCollection."                    ^(self copyFrom: 1 to: start - 1)                        , aCollection                        , (self copyFrom: stop + 1 to: self size)               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=size,codeType=rtalksize                        "Answer the number of elements of the receiver."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=,codeType=rtalk, aCollection                        "Answer a new collection containing the elements                         of the receiver followed by the the elements of                         aCollection."                    | answer size1 size2 |                    aCollection isCollection ifFalse: [ self error: 'Argument must be a Collection' ].                    size1 := self size.                    size2 := size1 + aCollection size.                    answer := self species new: size2.                    answer                        replaceFrom: 1                        to: size1                        with: self                        startingAt: 1.                    answer                        replaceFrom: size1 + 1                        to: size2                        with: aCollection                        startingAt: 1.                    ^answer               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=replaceFrom:to:with:startingAt:,codeType=rtalkreplaceFrom: start                    to: stop                    with: aCollection                    startingAt: repStart                        "Replace the elements of the receiver at index                         positions start through stop with consecutive                         elements of aCollection beginning at index                         position repStart.  Answer the receiver."                    | index1 index2 |                    (self == aCollection and: [repStart < start])                        ifTrue: [ "do backward move for same object"                            index2 := repStart + stop - start.                            index1 := stop.                            [start <= index1]                                whileTrue: [                                self                                    at: index1                                    put: (aCollection at: index2).                                index1 := index1 - 1.                                index2 := index2 - 1].                            ^self].                    "do forward move"                    index2 := repStart.                    index1 := start.                    [index1 <= stop]                        whileTrue: [                            self                                at: index1                                put: (aCollection at: index2).                            index1 := index1 + 1.                            index2 := index2 + 1]               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=with:do:,codeType=rtalkwith: aCollection do: aBlock                        "For each pair of elements (the first from the                         receiver and the second from aCollection),                         evaluate aBlock with those elements as the                         arguments.  The receiver and aCollection must contain                         the same number of elements, else report an error."                    | aStream1 aStream2 |                    self size = aCollection size                        ifFalse: [^self error: 'Collections are of differing length'].                    aStream1 := ReadStream on: self.                    aStream2 := ReadStream on: aCollection.                    [aStream1 atEnd]                        whileFalse: [                            aBlock                                value: aStream1 next                                value: aStream2 next]               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=reverseDo:,codeType=rtalkreverseDo: aBlock                        "For each element in the receiver, starting                         with the last element, evaluate aBlock with                         that element as the argument."                    | index |                    index := self size.                    [index > 0]                        whileTrue: [                            aBlock value: (self at: index).                            index := index - 1]               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=indexOf:ifAbsent:,codeType=rtalkindexOf: anObject ifAbsent: aBlock                        "Answer the index position of the element equal                         to anObject in the receiver.  If no such element                         is found, evaluate aBlock (without any arguments)."                    | index size |                    size := self size.                    index := 1.                    [index <= size]                        whileTrue: [                            (self at: index) = anObject                                ifTrue: [^index].                            index := index + 1].                    ^aBlock value               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=copyWithout:,codeType=rtalkcopyWithout: anObject                        "Answer a copy of the receiver excluding                         the first element that equals anObject,                         if any."                    | index |                    index := self                        indexOf: anObject                        ifAbsent: [^self copy].                    ^(self copyFrom: 1 to: index - 1),                        ((self copyFrom: index + 1 to: self size)                            copyWithout: anObject)               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=do:ifFirst:,codeType=rtalkdo: aBlock ifFirst:aBlock2                   "<modified:user=Roos Inst,time=01/04/08 at 06:50:21 pm>   "                   "<modified:user=Roos Inst,time=01/03/08 at 10:30:53 pm>   "                        "Answer the receiver.  For each element in the receiver,                         evaluate aBlock with that element as the argument.                        the first one uses aBlock2"                    | index size |                    index := 2.                    size := self size.                    size = 0 ifTrue:[^self].                    aBlock2 value: (self at:1).                    size = 1                        ifFalse:[                            [index > (size)]                                whileFalse: [                                    aBlock value: (self at: index).                                    index := index + 1]].               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=accessEmptyCollection,codeType=rtalkaccessEmptyCollection                        "Private - Report an error to the effect                         that the accessed collection was empty."                    ^self error: 'the collection is empty'               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=copyFrom:to:,codeType=rtalkcopyFrom: start to: stop                        "Answer a new collection containing the elements                         of the receiver indexed from start through stop."                    | size |                    size := stop - start + 1.                    ^(self species new: size)                        replaceFrom: 1                        to: size                        with: self                        startingAt: start               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=indexFromLastOf:,codeType=rtalkindexFromLastOf: anObject                        "Answer the index position of the element equal                         to anObject in the receiver.  If no such element                         is found, answer zero."                    ^self                        indexFromLastOf: anObject                        ifAbsent: [^0]               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=errorInBounds:,codeType=rtalkerrorInBounds: anInteger                        "Private - Report an error to the effect that                         anInteger is an invalid index for the receiver."                    ^self                        error: 'index: ',                            anInteger printString,                            ' is outside of collection bounds'               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=atAllPut:,codeType=rtalkatAllPut: anObject                        "Answer the receiver after each element                         has been replaced with anObject."                    self                        replaceFrom: 1                        to: self size                        withObject: anObject               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=hash,codeType=rtalkhash                        "Answer the size of the receiver as its hash value."                    ^self size               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=indexFromLastOf:ifAbsent:,codeType=rtalkindexFromLastOf: anObject ifAbsent: aBlock                "                    Answer the index position of the element equal                    to anObject in the receiver.  If no such element                    is found, evaluate aBlock (without any arguments).                    Start search from the end position rather than the                    beginning (default).                "                                    | index |                                    index := self size.                    [index >= 1]                        whileTrue: [                            (self at: index) = anObject                                ifTrue: [^index].                        index := index - 1].                    ^aBlock value               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=any,codeType=rtalkany                        "comment"                    ^self first               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=riAsCsv,codeType=rtalkriAsCsv                        "rtn a string with each item comma sep"                    | stm tmp|                    stm := WriteStream on:''.                    self do:[ :s | stm nextPutAll:(s asString).                                     stm nextPut:$,].                    stm backupOver:nil.                    ^stm contents               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=checkIndex:,codeType=rtalkcheckIndex: anInteger                        "Private - Check that the argument anInteger                         is a valid index for the receiver collection.                         If it is found to be invalid, report the error."                    (anInteger isInteger)                        ifFalse: [                            ^self error:                                'Indexed collections are indexed by integers'].                    (anInteger between: 1 and: self size)                        ifFalse: [^self errorInBounds: anInteger]               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=copyWith:,codeType=rtalkcopyWith: anObject                        "Answer a copy of the receiver with                         anObject added to it as an element."                    ^ self , (self species with: anObject)               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=findFirst:,codeType=rtalkfindFirst: aBlock                        "Answer the index of the first element of the                         receiver that causes aBlock to evaluate to true                         (with that element as the argument).  If no such                         element is found, report an error."                    | index size |                    size := self size.                    index := 1.                    [index <= size]                        whileTrue: [                            (aBlock value: (self at: index) )                                ifTrue: [^index].                            index := index + 1].                    ^self errorAbsentObject               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=replaceFrom:to:with:,codeType=rtalkreplaceFrom: start to: stop with: aCollection                        "Answer the receiver.  Replace the elements of the                         receiver at index positions start through stop,                         with the elements of aCollection.  The number of                         elements being replaced must be the same as the                         number of elements in aCollection, else report                         an error."                    stop - start + 1 = aCollection size                        ifFalse: [                            ^self error: 'replacement collection has wrong size'].                    self                        replaceFrom: start                        to: stop                        with: aCollection                        startingAt: 1               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=atAll:put:,codeType=rtalkatAll: aCollection put: anObject                        "Answer the receiver after replacing those                         elements, indexed by the indices contained                         in aCollection, with anObject."                    aCollection do: [ :index |                        self at: index put: anObject]               :SOURCE,type=instanceMethod,class=IndexedCollection,selector==,codeType=rtalk= aCollection                        "Answer true if the elements contained by                         the receiver are equal to the elements                         contained by the argument aCollection."                    | index |                    self == aCollection                        ifTrue: [^true].                    (self class == aCollection class)                        ifFalse: [^false].                    index := self size.                    index ~= aCollection size                        ifTrue: [^false].                    [index <= 0]                        whileFalse: [                            (self at: index) = (aCollection at: index)                                ifFalse: [^false].                            index := index - 1].                    ^true               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=asArrayOfSubstrings,codeType=rtalkasArrayOfSubstrings                        "helper for library class install"                    ^self               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=indexOf:startingAt:ifAbsent:,codeType=rtalkindexOf: anObject startingAt:aInt ifAbsent: aBlock                        "Answer the index position of the element equal                         to anObject in the receiver.  If no such element                         is found, evaluate aBlock (without any arguments)."                    | index size |                    size := self size.                    index := aInt.                    [index <= size]                        whileTrue: [                            (self at: index) = anObject                                ifTrue: [^index].                            index := index + 1].                    ^aBlock value               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=replaceFrom:to:withObject:,codeType=rtalkreplaceFrom: start to: stop withObject: anObject                        "Replace each of the elements of the receiver                         at index positions start through stop with                         anObject.  Answer anObject."                    | index |                    index := start.                    [index <= stop]                        whileTrue: [                            self at: index put: anObject.                            index := index + 1].                    ^anObject               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=do:ifLast:,codeType=rtalkdo: aBlock ifLast:aBlock2                        "Answer the receiver.  For each element in the receiver,                         evaluate aBlock with that element as the argument.                        the last one uses aBlock2"                    | index size |                    index := 1.                    size := self size.                    size = 0 ifTrue:[^self].                    size = 1                        ifFalse:[                            [index > (size - 1)]                                whileFalse: [                                    aBlock value: (self at: index).                                    index := index + 1]].                    ^aBlock2 value: (self at: size)               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=rejectComments,codeType=rtalkrejectComments                        "helper for library class install"                    ^self               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=includes:,codeType=rtalkincludes: anObject                        "Answer true if the receiver contains an                         element equal to anObject, else answer false."                    | index |                    index := self size + 1.                    [(index := index - 1) > 0]                        whileTrue: [                            anObject = (self at: index)                                ifTrue: [^true]].                    ^false               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=last,codeType=rtalklast                        "Answer the last element of the receiver.                         Report an error if the receiver has no elements."                    self isEmpty                        ifTrue: [ ^self accessEmptyCollection].                    ^self at: self size               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=indexOf:,codeType=rtalkindexOf: anObject                        "Answer the index position of the element equal                         to anObject in the receiver.  If no such element                         is found, answer zero."                    ^self                        indexOf: anObject                        ifAbsent: [^0]               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=copyAllFrom:,codeType=rtalkcopyAllFrom: start                        "Answer a new collection containing the elements                         of the receiver indexed from start through the end of                         the receiver."                                    ^self copyFrom: start to: (self size)               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=grow,codeType=rtalkgrow                        "Answer the receiver expanded in                         size to accomodate more elements."                    | size new |                    size := self size.                    new := self species new: size + self growSize.                    new replaceFrom: 1 to: self size with: self.                    self become: new               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=first,codeType=rtalkfirst                        "Answer the first element of the receiver.                         Report an error if the receiver has no elements."                    self isEmpty                        ifTrue: [^self accessEmptyCollection].                    ^self at: 1               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=reversed,codeType=rtalkreversed                        "Answer a new object containing the                         elements of the receiver in reverse order."                    ^(ReadStream on: self) reverseContents               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=indexOfCollection:,codeType=rtalkindexOfCollection: aCollection                        "Answer the index position of the first occurrence                         of aCollection in the receiver.  If no such element                         is found, answer zero."                    | index1 index2 limit1 limit2 |                    limit2 := aCollection size.                    limit1 := self size - limit2 + 1.                    index1 := 1.                    [index1 <= limit1]                        whileTrue: [                            (self at: index1) = (aCollection at: 1)                                ifTrue: [                                    index2 := 2.                                    [index2 <= limit2                                        and: [ (self at: index1 + index2 - 1) =                                            ( aCollection at: index2 ) ] ]                                        whileTrue: [index2 := index2 + 1].                                    index2 > limit2                                        ifTrue: [ ^index1] ].                            index1 := index1 + 1].                    ^0               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=indexFromLastOf:startingAt:ifAbsent:,codeType=rtalkindexFromLastOf: anObject startingAt:aInt ifAbsent: aBlock                "                    Answer the index position of the element equal                    to anObject in the receiver.  If no such element                    is found, evaluate aBlock (without any arguments).                    Start search from the end position rather than the                    beginning (default).                "                                    | index |                                    index := aInt.                    [index >= 1]                        whileTrue: [                            (self at: index) = anObject                                ifTrue: [^index].                        index := index - 1].                    ^aBlock value               :SOURCE,type=instanceMethod,class=IndexedCollection,selector=indexOfIgnoreCase:,codeType=rtalkindexOfIgnoreCase: anObject                        "Answer the index position of the element equal                         to anObject in the receiver.  If no such element                         is found, answer zero."                                    | index size |                    size := self size.                    index := 1.                    [index <= size]                        whileTrue: [                            ((self at: index) equalsIgnoreCase: anObject)                                ifTrue: [^index].                            index := index + 1].                    ^0               :SOURCE,type=instanceMethod,class=RtBlock1Arg,selector=value:,codeType=rtalkvalue:aObj                   "<modified:pgmr=mdr,time=01/04/13 at 05:21:21 pm>   "                        "comment"                	<jprim: /ObjectPrims primBlockInvokeWith>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Number,selector=sqrt,codeType=rtalksqrt                        "Answer a Float which is the                         square root of the receiver."                    ^self asFloat sqrt               :SOURCE,type=instanceMethod,class=Number,selector=sin,codeType=rtalksin                        "Answer a Float which is the sine of the receiver.                         The receiver is an angle measured in radians."                    ^self asFloat sin               :SOURCE,type=instanceMethod,class=Number,selector=random,codeType=rtalkrandom                        "Answer a random number comprised between 0 and the receiver"                    ^(Number random) * self               :SOURCE,type=instanceMethod,class=Number,selector=mag,codeType=rtalkmag                        "comment"                    ^self               :SOURCE,type=instanceMethod,class=Number,selector=max,codeType=rtalkmax                        "comment"                    ^self               :SOURCE,type=instanceMethod,class=Number,selector=riIsFloat,codeType=rtalkriIsFloat                        "comment"                    ^false               :SOURCE,type=instanceMethod,class=Number,selector=min,codeType=rtalkmin                        "comment"                    ^self               :SOURCE,type=instanceMethod,class=Number,selector=arcCos,codeType=rtalkarcCos                        "Answer the arc-cosine, an angle in                         radians, of the receiver."                    ^(Float pi / 2) - self arcSin               :SOURCE,type=instanceMethod,class=Number,selector=printHex:,codeType=rtalkprintHex: aStream                "                    This method appends the hexadecimal representation of the                    receiver onto aStream.  JB 97.03.28                "                    | n w |                                    n := self basicSize + 1.                    1 to: self basicSize do: [:i |                        w := self basicAt: (n - i).                        aStream                            nextPut: (w bitShift: -4) asHexCharacter;                            nextPut: w asHexCharacter.                    ].                    ^aStream               :SOURCE,type=instanceMethod,class=Number,selector=@,codeType=rtalk@ aNumber                        "Answer a point with the receiver as the                         x-coordinate and aNumber as the y-coordinate."                    ^Point new                        x: self;                        y: aNumber               :SOURCE,type=instanceMethod,class=Number,selector=printOn:,codeType=rtalkprintOn: aStream                        "Append the ASCII representation of                         the receiver to aStream."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=Number,selector=cos,codeType=rtalkcos                        "Answer a Float which is the cosine of the receiver.                         The receiver is an angle measured in radians."                    ^self asFloat cos               :SOURCE,type=instanceMethod,class=Number,selector=to:,codeType=rtalkto: aNumber                        "Answer an Interval for the numbers between                         the receiver and the argument aNumber where                         each number is the previous number plus 1."                    ^Interval from: self to: aNumber               :SOURCE,type=instanceMethod,class=Number,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Number,selector=floor,codeType=rtalkfloor                        "Answer the integer nearest the receiver                         truncating towards negative infinity."                    ^self // 1               :SOURCE,type=instanceMethod,class=Number,selector=raisedToInteger:,codeType=rtalkraisedToInteger: anInteger                   "<modified:sys=GAKRE8CA,time=05/16/12 at 11:25:33 pm>   "                        "Answer the receiver raised                         to the power of anInteger. as a float"                    | answer |                    (anInteger isInteger)                        ifTrue: [                            answer := 1.0.                            anInteger abs timesRepeat: [                                answer := self * answer].                            anInteger < 0                                ifTrue:  [^1.0 / answer]                                ifFalse: [^answer]].                    self error: 'raisedToInteger needs integer power'               :SOURCE,type=instanceMethod,class=Number,selector=isNumber,codeType=rtalkisNumber                        "Answer true if receiver is a kind of Number."                    ^true               :SOURCE,type=instanceMethod,class=Number,selector=exp,codeType=rtalkexp                        "Answer a Float which is the                         exponential of the receiver."                    ^self asFloat exp               :SOURCE,type=instanceMethod,class=Number,selector=radiansToDegrees,codeType=rtalkradiansToDegrees                        "Answer the receiver converted                         from radians to degrees."                    ^self asFloat radiansToDegrees               :SOURCE,type=instanceMethod,class=Number,selector=truncateTo:,codeType=rtalktruncateTo: aNumber                        "Answer the receiver truncated (towards                         zero) to the nearest multiple of aNumber."                    ^(self quo: aNumber) * aNumber               :SOURCE,type=instanceMethod,class=Number,selector=ln,codeType=rtalkln                        "Answer a Float which is the                         natural log of the receiver."                    ^self asFloat ln               :SOURCE,type=instanceMethod,class=Number,selector=squared,codeType=rtalksquared                        "Answer the receiver multiplied by the receiver."                    ^self * self               :SOURCE,type=instanceMethod,class=Number,selector=even,codeType=rtalkeven                        "Answer true if the integer part of                         the receiver is even, else answer false."                    ^self \\ 2 = 0               :SOURCE,type=instanceMethod,class=Number,selector=/,codeType=rtalk/ aNumber                        "Answer the result of dividing                         the receiver by aNumber."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=Number,selector=to:by:,codeType=rtalkto: sNumber by: iNumber                        "Answer an Interval for the numbers between                         the receiver and the argument sNumber where each                         number is the previous number plus the argument                         iNumber."                    ^Interval from: self to: sNumber by: iNumber               :SOURCE,type=instanceMethod,class=Number,selector=-,codeType=rtalk- aNumber                        "Answer the difference between                         the receiver and aNumber."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=Number,selector=tan,codeType=rtalktan                        "Answer a Float which is the tangent of                         the receiver.  The receiver is an angle                         measured in radians."                    ^self asFloat tan               :SOURCE,type=instanceMethod,class=Number,selector=+,codeType=rtalk+ aNumber                        "Answer the sum of the receiver and aNumber."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=Number,selector=*,codeType=rtalk* aNumber                        "Answer the result of multiplying                         the receiver by aNumber."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=Number,selector=reciprocal,codeType=rtalkreciprocal                        "Answer one divided by the receiver."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=Number,selector=odd,codeType=rtalkodd                        "Answer true if the integer part of                         the receiver is odd, else answer false."                    ^self \\ 2 = 1               :SOURCE,type=instanceMethod,class=Number,selector=to:by:do:,codeType=rtalkto: sNumber by: iNumber do: aBlock                        "Evaluate the one argument block aBlock for the                         numbers between the receiver and the argument                         sNumber where each number is the previous number                         plus the argument iNumber."                    | index |                    index := self.                    iNumber > 0                        ifTrue: [                            [index <= sNumber] whileTrue: [                                aBlock value: index.                                index := index + iNumber]]                        ifFalse: [                            [sNumber <= index] whileTrue: [                                aBlock value: index.                                index := index + iNumber]]               :SOURCE,type=instanceMethod,class=Number,selector=numerator,codeType=rtalknumerator                        "Answer the numerator of the receiver.  Default                         is the receiver which can be overridden by the                         subclasses."                    ^self               :SOURCE,type=instanceMethod,class=Number,selector=quo:,codeType=rtalkquo: aNumber                        "Answer the integer quotient                         with truncation toward zero."                     ^(self / aNumber) truncated               :SOURCE,type=instanceMethod,class=Number,selector=printFraction:decimalSeparator:,codeType=rtalkprintFraction: numberFractionDigits decimalSeparator: decimalString                        "Answer a string, the ASCII representation                         of the receiver truncated to numberFractionDigits                         decimal places, using decimalString as the                         decimal separator."                   | stream fraction integer |                    numberFractionDigits < 0                        ifTrue: [self error: 'Negative digit count'].                    stream := WriteStream on: (String new: 16).                    integer := self truncated.                    (self > -1) & (self < 0)                        ifTrue: [stream show: '-0']                        ifFalse: [integer printOn: stream].                    stream nextPutAll: decimalString.                    fraction := (self - integer) abs.                    integer := 0.                    numberFractionDigits timesRepeat: [                        fraction := (fraction - integer) * 10.                        (integer := fraction // 1) printOn: stream].                    ^stream contents               :SOURCE,type=instanceMethod,class=Number,selector=overflow:,codeType=rtalkoverflow:aNumber                    " true if mag exceeds a Number "                    ^self abs > aNumber               :SOURCE,type=instanceMethod,class=Number,selector=rounded,codeType=rtalkrounded                        "Answer the nearest integer to the receiver."                    ^self + self + self sign quo: 2               :SOURCE,type=instanceMethod,class=Number,selector=abs,codeType=rtalkabs                        "Answer the absolute value of the receiver."                    self < 0                        ifTrue: [^self negated].                    ^self               :SOURCE,type=instanceMethod,class=Number,selector=arcTan,codeType=rtalkarcTan                        "Answer the arc-tangent, an angle in                         radians, of the receiver."                    ^self asFloat arcTan               :SOURCE,type=instanceMethod,class=Number,selector=//,codeType=rtalk// aNumber                        "Answer the integer result of dividing the                         receiver by aNumber with truncation                         towards negative infinity."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=Number,selector=negative,codeType=rtalknegative                        "Answer true if the receiver is less                         than zero, else answer false."                    ^self < 0               :SOURCE,type=instanceMethod,class=Number,selector=log10,codeType=rtalklog10                        "Answer a Float which is the                         log base 10 of the receiver."                    ^self asFloat log10               :SOURCE,type=instanceMethod,class=Number,selector=ceiling,codeType=rtalkceiling                        "Answer the integer nearest the                         receiver towards positive infinity."                    | anInteger |                    anInteger := self // 1.                        "truncates >> negative infinity"                    anInteger = self ifTrue: [^anInteger].                    ^anInteger + 1               :SOURCE,type=instanceMethod,class=Number,selector=sign,codeType=rtalksign                        "Answer 1 if the receiver is greater than zero,                         answer -1 if the receiver is less than zero,                         else answer zero."                    self strictlyPositive                        ifTrue: [^1].                    self negative                        ifTrue: [^-1].                    ^0               :SOURCE,type=instanceMethod,class=Number,selector=higherOf:,codeType=rtalkhigherOf: aNumber                        "Answer the number which appears closest to the top                         of the screen between the receiver and aNumber."                    ^(self max: aNumber)               :SOURCE,type=instanceMethod,class=Number,selector=timesTwoPower:,codeType=rtalktimesTwoPower: anInteger                        "Answer the result of multiplying the                         receiver by 2 to the exponent anInteger."                    ^self asFloat timesTwoPower: anInteger               :SOURCE,type=instanceMethod,class=Number,selector=rem:,codeType=rtalkrem: aNumber                        "Answer the integer remainder after dividing                         the receiver by aNumber with truncation                         towards zero."                    ^self - ((self quo: aNumber) * aNumber)               :SOURCE,type=instanceMethod,class=Number,selector=deepCopy,codeType=rtalkdeepCopy                        "Answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Number,selector=positive,codeType=rtalkpositive                        "Answer true if the receiver is greater                         than or equal to zero, else answer false."                    ^self >= 0               :SOURCE,type=instanceMethod,class=Number,selector=printRounded:,codeType=rtalkprintRounded: numberFractionDigits                        "Answer a string, the ASCII representation                         of the receiver rounded to numberFractionDigits                         decimal places."                    | rounder |                    numberFractionDigits > 7                        ifTrue: [                            rounder := 1 /                                (10 raisedToInteger: numberFractionDigits + 1)]                        ifFalse: [                            rounder := 1/(#(1 10 100 1000 10000                                100000 1000000 10000000)                                    at: numberFractionDigits + 1)].                    ^(self roundTo: rounder)                        printFraction: numberFractionDigits               :SOURCE,type=instanceMethod,class=Number,selector=denominator,codeType=rtalkdenominator                        "Answer the denominator of the receiver.  Default                         is one which can be overridden by the subclasses."                    ^1               :SOURCE,type=instanceMethod,class=Number,selector=raisedTo:,codeType=rtalkraisedTo: aNumber                        "Answer a Float which is the receiver                         raised to the power of aNumber."                    ^(aNumber * self ln) exp               :SOURCE,type=instanceMethod,class=Number,selector=log,codeType=rtalklog                        "Answer a Float which is the                         20 * log base 10 of the receiver."                    ^20.0 * (self asFloat log10)               :SOURCE,type=instanceMethod,class=Number,selector=roundTo:,codeType=rtalkroundTo: aNumber                        "Answer the receiver rounded to the                         nearest multiple of aNumber."                    self negative                        ifTrue: [^self - (aNumber/2) truncateTo: aNumber]                        ifFalse: [^self + (aNumber/2) truncateTo: aNumber]               :SOURCE,type=instanceMethod,class=Number,selector=arcSin,codeType=rtalkarcSin                        "Answer the arc-sine, an angle in                         radians, of the receiver."                    (self > 1 or: [self < -1])                        ifTrue: [^self error: 'receiver of arcSin out of range'].                    self = 1                        ifTrue: [^Float pi / 2].                    self = -1                        ifTrue: [^(Float pi / 2) negated].                    ^(self / (1 - (self * self)) sqrt) arcTan               :SOURCE,type=instanceMethod,class=Number,selector=\\,codeType=rtalk\\ aNumber                        "Answer the integer remainder after dividing                         the receiver by aNumber with truncation                         towards negative infinity."                    ^(self - (self // aNumber * aNumber)) truncated               :SOURCE,type=instanceMethod,class=Number,selector=to:do:,codeType=rtalkto: aNumber do: aBlock                        "Evaluate the one argument block aBlock for the                         numbers between the receiver and the argument                         aNumber where each number is the previous number                         plus 1."                    | index |                    index := self.                    [index <= aNumber]                        whileTrue: [                            aBlock value: index.                            index := index + 1]               :SOURCE,type=instanceMethod,class=Number,selector=negated,codeType=rtalknegated                        "Answer the negation of the receiver."                    self implementedBySubclass               :SOURCE,type=instanceMethod,class=Number,selector=riIsNumber,codeType=rtalkriIsNumber                        "comment"                    ^true               :SOURCE,type=instanceMethod,class=Number,selector=strictlyPositive,codeType=rtalkstrictlyPositive                        "Answer true if the receiver is                         greater than zero, else answer false."                    ^self > 0               :SOURCE,type=instanceMethod,class=Number,selector=riIsNumeric,codeType=rtalkriIsNumeric                    ^true               :SOURCE,type=instanceMethod,class=Number,selector=printFraction:,codeType=rtalkprintFraction: numberFractionDigits                   "<modified:sys=GAKRE8CA,time=05/09/11 at 10:33:20 pm>   "                        "Answer a string, the ASCII representation                         of the receiver truncated to numberFractionDigits                         decimal places."                    ^self printFraction: numberFractionDigits                        decimalSeparator: '.'               :SOURCE,type=instanceMethod,class=Number,selector=log:,codeType=rtalklog: aNumber                        "Answer a Float which is the log                         base aNumber of the receiver."                    ^self asFloat ln / aNumber asFloat ln               :SOURCE,type=instanceMethod,class=ByteArray,selector=riAsHexString,codeType=rtalkriAsHexString                        "string of hex bytes"                    | rtn tmp|                    rtn := '( '.                    self do:[ :c | tmp := c riAsHexString.                                     tmp size = 2                                        ifTrue:[  rtn := rtn,tmp,' ']                                        ifFalse:[ rtn := rtn,'0',tmp,' ']].                    ^rtn,' )'               :SOURCE,type=instanceMethod,class=ByteArray,selector=replaceFrom:to:with:startingAt:,codeType=rtalkreplaceFrom: start                   "<modified:pgmr=mdr,time=01/04/13 at 06:48:56 pm>   "                    to: stop                    with: aCollection                    startingAt: repStart                        "Replace the elements of the receiver at index                         positions start through stop with consecutive                         elements of aCollection beginning at index                         position repStart.  Answer the receiver."                    | index1 index2 |                	<jprim: /ByteStringPrims primBytesReplaceFromToWithStartingAt>                    (aCollection isDoubleByteString)                        ifTrue: [                            ^self                                replaceBytesFrom: start to: stop                                with: aCollection                                startingAt: (aCollection byteIndexOfCharAt: repStart)].                    (aCollection class isBytes)                        ifFalse: [                            ^super                                replaceFrom: start                                to: stop                                with: aCollection                                startingAt: repStart].                    " primitive failure on large byte objects "                    (self == aCollection and: [repStart < start])                        ifTrue: [ "do backward move for same object"                            index2 := repStart + stop - start.                            index1 := stop.                            [start <= index1]                                whileTrue: [                                self                                    at: index1                                    put: (aCollection at: index2) asInteger.                                index1 := index1 - 1.                                index2 := index2 - 1].                            ^self].                    "do forward move"                    index2 := repStart.                    index1 := start.                    [index1 <= stop]                        whileTrue: [                            self                                at: index1                                put: (aCollection at: index2) asInteger.                            index1 := index1 + 1.                            index2 := index2 + 1]               :SOURCE,type=instanceMethod,class=ByteArray,selector=atByte:,codeType=rtalkatByte:aInt                   "<modified:user=Roos Inst,time=06/16/09 at 12:32:32 pm>   "                        "comment"                    ^self at:aInt               :SOURCE,type=instanceMethod,class=ByteArray,selector=replaceFrom:to:withAddress:startingAt:,codeType=rtalkreplaceFrom: start to: stop withAddress: aPMAddress startingAt: int                        "Private - Use #replaceFrom:to:with:startingAt: instead."                    ^self replaceFrom: start to: stop with: aPMAddress startingAt: int               :SOURCE,type=instanceMethod,class=ByteArray,selector=replace:with:,codeType=rtalkreplace: count with: aCollection                   "<modified:pgmr=mdr,time=01/04/13 at 06:48:38 pm>   "                        "Replace count elements of the receiver                         with elements of aCollection.  aCollection                         may be either a Smalltalk byte object Answer the receiver."                	<jprim: /ByteStringPrims primBytesReplaceCountWith>                    aCollection isDoubleByteString                        ifTrue: [                            ^self replaceBytes: count with: aCollection].                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=ByteArray,selector=bitXor:,codeType=rtalkbitXor:aByteArray                        "comment"                    1 to: self size do:[:i |                        self at:i put:((self at:i) bitXor:(aByteArray at:i))]               :SOURCE,type=instanceMethod,class=ByteArray,selector=isByteArray,codeType=rtalkisByteArray                        "Answer true if receiver is a kind of ByteArray."                    ^true               :SOURCE,type=instanceMethod,class=ByteArray,selector=bitOr:,codeType=rtalkbitOr:aByteArray                        "comment"                    1 to: self size do:[:i |                        self at:i put:((self at:i) bitOr:(aByteArray at:i))]               :SOURCE,type=instanceMethod,class=ByteArray,selector=atByte:put:,codeType=rtalkatByte:aInt put:aByte                   "<modified:user=Roos Inst,time=06/16/09 at 12:32:42 pm>   "                        "comment"                    ^self at:aInt put:aByte               :SOURCE,type=instanceMethod,class=ByteArray,selector=findByte:startingAt:,codeType=rtalkfindByte: aInt startingAt: aMutInt                   "<modified:pgmr=mdr,time=01/04/13 at 06:53:15 pm>   "                        "searches for a match and updates aMutInt to the position of the match                         inf no match sets aMutInt to the end of the array"                	<jprim: /ByteStringPrims primMatchByte>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=ByteArray,selector=bitAnd:,codeType=rtalkbitAnd:aByteArray                        "comment"                                    1 to: self size do:[:i |                        self at:i put:((self at:i) bitAnd:(aByteArray at:i))]               :SOURCE,type=instanceMethod,class=ByteArray,selector=hash,codeType=rtalkhash                   "<modified:pgmr=mdr,time=01/04/13 at 06:56:05 pm>   "                        "Answer the integer hash                         value for the receiver."                	<jprim: /ByteStringPrims primStringHash>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=ByteArray,selector=grow:,codeType=rtalkgrow:aInt                  "<modified:pgmr=mdr,time=07/01/13 at 03:08:49 pm>   "               	" expands the array size by aInt and copies original to beginning "               	<jprim: /ObjectPrims primObjectGrow>                   ^self primitiveFailed               :SOURCE,type=instanceMethod,class=ByteArray,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a copy of the receiver which shares                         the receiver elements."                    ^self copyFrom: 1 to: self size               :SOURCE,type=instanceMethod,class=ByteArray,selector=asByteArray,codeType=rtalkasByteArray                        "Answer self"                    ^self               :SOURCE,type=instanceMethod,class=ByteArray,selector=findPattern:startingAt:,codeType=rtalkfindPattern: aArray startingAt: aMutInt                   "<modified:pgmr=mdr,time=01/04/13 at 06:53:25 pm>   "                        "searches for a match and updates aMutInt to the position of the match                         inf no match returns nil"                	<jprim: /ByteStringPrims primMatchBytePattern>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=ByteArray,selector=replaceBytesFrom:to:with:startingAt:,codeType=rtalkreplaceBytesFrom: byteStart                   "<modified:pgmr=mdr,time=01/04/13 at 06:48:50 pm>   "                    to: byteStop                    with: aByteObject                    startingAt: byteRepStart                        "Private - replace the bytes of the receiver at index                         positions start through stop with consecutive                         bytes of aByteObject beginning at index                         position repStart.  Answer the receiver."                    | index1 index2 |                	<jprim: /ByteStringPrims primBytesReplaceFromToWithStartingAt>                    aByteObject class isBytes                        ifFalse: [self error: 'source must be a byte object'].                    (self == aByteObject and: [byteRepStart < byteStart])                        ifTrue: [ "do backward move for same object"                            index2 := byteRepStart + byteStop - byteStart.                            index1 := byteStop.                            [byteStart <= index1]                                whileTrue: [                                self                                    at: index1                                    put: (aByteObject basicAt: index2) asInteger.                                index1 := index1 - 1.                                index2 := index2 - 1].                            ^self].                    "do forward move"                    index2 := byteRepStart.                    index1 := byteStart.                    [index1 <= byteStop]                        whileTrue: [                            self                                at: index1                                put: (aByteObject basicAt: index2) asInteger.                            index1 := index1 + 1.                            index2 := index2 + 1]               :SOURCE,type=instanceMethod,class=ByteArray,selector=<,codeType=rtalk< aCollection                        "Answer true if the elements contained by                         the receiver are less than the elements                         contained by the argument aCollection."                    | index |                    index := self size.                    index < aCollection size                        ifTrue: [^true].                    [index <= 0]                        whileFalse: [                            (self at: index) >= (aCollection at: index)                                ifTrue: [^false].                            index := index - 1].                    ^true               :SOURCE,type=instanceMethod,class=ByteArray,selector=fromBase36From:to:,codeType=rtalkfromBase36From:aInt to:aInt2                        "converts a string segment in base 36 to a integer"                    | result index next|                    result := 0.                    index := aInt.                    (aInt2 - aInt + 1) timesRepeat:[                        result := result * 36.                        next := (self at:index) .                        next >= 65                            ifTrue:[result := result + next - 55]                            ifFalse:[result := result + next - 48].                        index := index + 1.                                      ].                    ^ result               :SOURCE,type=instanceMethod,class=ByteArray,selector=>,codeType=rtalk> aCollection                        "Answer true if the elements contained by                         the receiver are more than the elements                         contained by the argument aCollection."                    | index |                    index := self size.                    index < aCollection size                        ifTrue: [^false].                    [index <= 0]                        whileFalse: [                            (self at: index) <= (aCollection at: index)                                ifTrue: [^false].                            index := index - 1].                    ^true               :SOURCE,type=instanceMethod,class=ByteArray,selector=asString,codeType=rtalkasString                        "Answer a String whose contents are the                         bytes of the receiver."                    ^(String new: self size) replace: self size with: self.               :SOURCE,type=instanceMethod,class=ByteArray,selector=replaceBase36:startingAt:to:,codeType=rtalkreplaceBase36:aInt startingAt:aInt2 to:aInt3                        "Private - convert aInt to base 36 then copy it into self"                    | result value pos|                    value := aInt.                    pos := aInt3.                    (aInt3 - aInt2 + 1) timesRepeat:[ result :=( value \\ 36) + 48.                                                         result >= 58 ifTrue:[ result := result + 7].                                                         self at:pos put:result.                                                         value := value // 36.                                                         pos := pos - 1 ].               :SOURCE,type=instanceMethod,class=Collection,selector=removeAll:,codeType=rtalkremoveAll: aCollection                        "Answer aCollection.  Remove all the elements                         contained in aCollection from the receiver collection."                    aCollection do: [ :element | self remove: element].                    ^aCollection               :SOURCE,type=instanceMethod,class=Collection,selector=do:,codeType=rtalkdo: aBlock                        "For each element in the receiver, evaluate aBlock                         with that element as the argument.  This method                         should be implemented in the class of the receiver."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=Collection,selector=errorAbsentObject,codeType=rtalkerrorAbsentObject                        "Private - Report an error to the effect                         that the element desired was not found                         in the receiver collection."                    ^self error: 'object is not in the collection'               :SOURCE,type=instanceMethod,class=Collection,selector=asArray,codeType=rtalkasArray                        "Answer an Array containing all                         the elements of the receiver."                    | answer index |                    answer := Array new: self size.                    index := 1.                    self do: [ :element |                        answer at: index put: element.                        index := index + 1].                    ^answer               :SOURCE,type=instanceMethod,class=Collection,selector=riSepStringBy:,codeType=rtalkriSepStringBy:aChar                        "a col of strings put into a string with no leading or trailing comma"                         | aStream |                                    aStream := WriteStream on: (String new: 20).                    self asOrderedCollection do:[ :a |                              aStream nextPutAll:(a asString).                            aStream nextPut: aChar]                        ifLast:[ :a |                                 aStream nextPutAll:(a asString)].                    ^aStream contents               :SOURCE,type=instanceMethod,class=Collection,selector=errorNotIndexable,codeType=rtalkerrorNotIndexable                        "Private - Report an error to the effect that                         the receiver collection is not indexable."                    ^self error: self class name,                        's do not respond to indexing messages'               :SOURCE,type=instanceMethod,class=Collection,selector=occurrencesOf:,codeType=rtalkoccurrencesOf: anObject                        "Answer the number of elements contained                         in the receiver collection that are equal                         to anObject."                    ^self inject: 0 into: [ :occurrences :element |                        occurrences                            + (element = anObject                                ifTrue: [1]                                ifFalse: [0])]               :SOURCE,type=instanceMethod,class=Collection,selector=isCollection,codeType=rtalkisCollection                        "Answer true if receiver is a kind of Collection."                    ^true               :SOURCE,type=instanceMethod,class=Collection,selector=detect:,codeType=rtalkdetect: aBlock                        "Answer the first element of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument).  If no such element                         is found, report an error."                    ^self                        detect: aBlock                        ifNone: [self errorAbsentObject]               :SOURCE,type=instanceMethod,class=Collection,selector=riDetectAll:,codeType=rtalkriDetectAll: aBlock                         "Answer all elements of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument)."                    | rtn |                    rtn := OrderedCollection new.                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [rtn add:element]].                    ^rtn               :SOURCE,type=instanceMethod,class=Collection,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a copy of the receiver which shares                         the receiver elements."                    ^(self species new)                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=Collection,selector=riDetect:do:ifNone:,codeType=rtalkriDetect: aBlock do:actionBlock ifNone: exceptionBlock                        "Answer the first element of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument).  If no such element is                         found, evaluate exceptionBlock (with no arguments). If                         found do the action block with the object"                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [^actionBlock value:element]].                    ^exceptionBlock value               :SOURCE,type=instanceMethod,class=Collection,selector=detectAll:ifNone:,codeType=rtalkdetectAll:aBlock ifNone:aBlock2                   "<modified:pgmr=mdr,time=08/19/12 at 06:15:55 pm>   "                        "returns a collection of all items for which the block                        returns true"                    | rtn |                    rtn := OrderedCollection new.                    self do:[ :e | (aBlock value:e)                                         ifTrue:[ rtn add:e]].                    rtn isEmpty                        ifTrue:[^(aBlock2 value)]                        ifFalse:[^rtn].               :SOURCE,type=instanceMethod,class=Collection,selector=riDetectAll:ifNone:,codeType=rtalkriDetectAll:aBlock ifNone:aBlock2                        "returns a collection of all items for which the block                        returns true"                    | rtn |                    rtn := OrderedCollection new.                    self do:[ :e | (aBlock value:e)                                         ifTrue:[ rtn add:e]].                    rtn isEmpty                        ifTrue:[^(aBlock2 value)]                        ifFalse:[^rtn].               :SOURCE,type=instanceMethod,class=Collection,selector=detect:ifNone:,codeType=rtalkdetect: aBlock ifNone: exceptionBlock                        "Answer the first element of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument).  If no such element is                         found, evaluate exceptionBlock (with no arguments)."                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [^element]].                    ^exceptionBlock value               :SOURCE,type=instanceMethod,class=Collection,selector=addAll:,codeType=rtalkaddAll: aCollection                        "Answer aCollection.  Add each element of                         aCollection to the elements of the receiver."                    aCollection do: [ :element | self add: element].                    ^aCollection               :SOURCE,type=instanceMethod,class=Collection,selector=asSet,codeType=rtalkasSet                        "Answer a Set containing the                         elements of the receiver."                    ^(Set new: self size)                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=Collection,selector=deepCopy,codeType=rtalkdeepCopy                        "Answer a copy of the receiver with shallow                         copies of each element."                    | answer |                    answer := self species new.                    self do: [:element |                        answer add: element copy].                    ^answer               :SOURCE,type=instanceMethod,class=Collection,selector=detectAll:,codeType=rtalkdetectAll: aBlock                    "<modified:pgmr=mdr,time=08/19/12 at 06:15:16 pm>   "                        "Answer all elements of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument)."                    | rtn |                    rtn := OrderedCollection new.                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [rtn add:element]].                    ^rtn               :SOURCE,type=instanceMethod,class=Collection,selector=asSortedCollection,codeType=rtalkasSortedCollection                        "Answer a SortedCollection containing                         the elements of the receiver sorted                         in ascending order."                    ^(SortedCollection new: self size)                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=Collection,selector=remove:ifAbsent:,codeType=rtalkremove: anObject ifAbsent: aBlock                        "Answer anObject.  Remove an element equal to                         anObject from the receiver collection.  If such                         an element is not found, evaluate aBlock (with                         no arguments)."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=Collection,selector=collect:,codeType=rtalkcollect: aBlock                        "For each element in the receiver, evaluate aBlock with                         that element as the argument.  Answer a new collection                         containing the results as its elements from the aBlock                         evaluations."                    | answer |                    answer := self species new.                    self do: [ :element |                        answer add: (aBlock value: element)].                    ^answer               :SOURCE,type=instanceMethod,class=Collection,selector=notEmpty,codeType=rtalknotEmpty                        "Answer true if the receiver collection contains                         one or more elements, else answer false."                    ^self size > 0               :SOURCE,type=instanceMethod,class=Collection,selector=riDetectAllIfNoneNil:,codeType=rtalkriDetectAllIfNoneNil: aBlock                    "<modified:sys=G78T5XCA,time=03/31/10 at 09:31:46 pm>   "                   "<modified:sys=G9TQQ5YA,time=02/24/10 at 09:01:30 pm>   "                   "<modified:sys=G9TQQ5YA,time=02/24/10 at 09:01:12 pm>   "                        "Answer all elements of the receiver that                         causes aBlock to evaluate to true (with that                         element as the argument)."                    | rtn |                    rtn := OrderedCollection new.                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [rtn add:element]].                    rtn isEmpty ifTrue:[^nil].                    ^rtn               :SOURCE,type=instanceMethod,class=Collection,selector=isNilOrEmpty,codeType=rtalkisNilOrEmpty                        "Answer true if the receiver collection                         contains no elements, else answer false."                    ^self isEmpty               :SOURCE,type=instanceMethod,class=Collection,selector=includes:,codeType=rtalkincludes: anObject                        "Answer true if the receiver contains an                         element equal to anObject, else answer false."                    self do: [ :element |                        anObject = element                            ifTrue: [^true]].                    ^false               :SOURCE,type=instanceMethod,class=Collection,selector=remove:,codeType=rtalkremove: anObject                        "Answer anObject.  Remove the element equal                         to anObject from the receiver collection.  If                         such an element is not found, report an error."                    ^self                        remove: anObject                        ifAbsent: [self errorAbsentObject]               :SOURCE,type=instanceMethod,class=Collection,selector=asSortedCollection:,codeType=rtalkasSortedCollection: aBlock                        "Answer a SortedCollection containing                         the elements of the receiver sorted                         according to aBlock."                    ^(SortedCollection new: self size)                        sortBlock: aBlock;                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=Collection,selector=asBag,codeType=rtalkasBag                        "Answer a Bag containing the                         elements of the receiver."                    ^(Bag new)                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=Collection,selector=add:,codeType=rtalkadd: anObject                        "Answer anObject.  Add anObject                         to the receiver collection."                    ^self implementedBySubclass               :SOURCE,type=instanceMethod,class=Collection,selector=fullCopy,codeType=rtalkfullCopy                        "Answer a copy of the receiver with full                         copies of each element."                    | answer |                    answer := self species new.                    self do: [:element |                        answer add: (element fullCopy)].                    ^answer               :SOURCE,type=instanceMethod,class=Collection,selector=reject:,codeType=rtalkreject: aBlock                        "For each element in the receiver, evaluate aBlock                         with that element as the argument.  Answer a new                         collection containing those elements of the receiver                         for which aBlock evaluates to false."                    ^self select: [ :element |                        (aBlock value: element) not]               :SOURCE,type=instanceMethod,class=Collection,selector=select:,codeType=rtalkselect: aBlock                        "For each element in the receiver, evaluate                         aBlock with that element as the argument.                         Answer a new collection containing those elements                         of the receiver for which aBlock evaluates to true."                    | answer |                    answer := self species new.                    self do: [ :element |                        (aBlock value: element)                            ifTrue: [answer add: element]].                    ^answer               :SOURCE,type=instanceMethod,class=Collection,selector=inject:into:,codeType=rtalkinject: initialValue into: aBinaryBlock                        "For each element in the receiver collection, evaluate                         aBinaryBlock with that element as the argument.  Starting                         with initialValue, the block is also provided with its own                         value from the previous evaluation.  Answer this value                         at the end of the block evaluations."                    | answer |                    answer := initialValue.                    self do: [ :element |                        answer := aBinaryBlock                            value: answer                            value: element].                    ^answer               :SOURCE,type=instanceMethod,class=Collection,selector=isEmpty,codeType=rtalkisEmpty                        "Answer true if the receiver collection                         contains no elements, else answer false."                    ^self size = 0               :SOURCE,type=instanceMethod,class=Collection,selector=asOrderedCollection,codeType=rtalkasOrderedCollection                        "Answer an OrderedCollection containing                         the elements of the receiver."                    ^(OrderedCollection new: self size)                        addAll: self;                        yourself               :SOURCE,type=instanceMethod,class=RtClass,selector=structure:,codeType=rtalkstructure: anInteger                        "Private - Change the structure that new instances                         of the receiver will have.  The new structure is                         defined by anInteger.  Refer to the class variables                         of Behavior for a description of this integer."                    structure := anInteger               :SOURCE,type=instanceMethod,class=RtClass,selector=hash,codeType=rtalkhash                   "<modified:sys=GAKRE8CA,time=04/28/11 at 08:02:55 am>   "                        "Answer the integer hash value of the receiver."                    ^name hash               :SOURCE,type=instanceMethod,class=RtClass,selector=isClass,codeType=rtalkisClass                   "<modified:sys=GAKRE8CA,time=04/28/11 at 08:04:20 am>   "                        "Answer true if receiver is a kind of Class."                    ^true               :SOURCE,type=instanceMethod,class=RtClass,selector=allSubclasses,codeType=rtalkallSubclasses                   "<modified:sys=GAKRE8CA,time=09/08/10 at 07:51:43 am>   "                        "Answer an OrderedCollection of all the subclasses                         of the receiver in hierarchical order.  Classes at                         the same hierarchical level are sorted                         alphabetically."                    | answer sortedSubclasses |                    answer := OrderedCollection new.                    sortedSubclasses := SortedCollection                        sortBlock: RtClass sortBlock.                    sortedSubclasses addAll: self subclasses.                    sortedSubclasses do: [ :each |                        answer                            add: each;                            addAll: each allSubclasses].                    ^answer               :SOURCE,type=instanceMethod,class=RtClass,selector=subclasses,codeType=rtalksubclasses                        "Answer an Array of subclasses of the receiver."                    subclasses isNil                        ifTrue: [^Array new]                        ifFalse: [^subclasses]               :SOURCE,type=instanceMethod,class=RtClass,selector=isBytes,codeType=rtalkisBytes                   "<modified:sys=GAKRE8CA,time=04/28/11 at 04:13:15 pm>   "                        "Answer true if instances of the receiver contain                         8 bit byte values, else answer false."                    ^( structure bitAnd: 16r4) ~= 0  " check if bytes "               :SOURCE,type=instanceMethod,class=RtClass,selector=allSubclassesDo:,codeType=rtalkallSubclassesDo:aBlock                   "<modified:pgmr=mdr,time=06/06/14 at 06:32:52 pm>   "          "has to do self as well "   	aBlock value:self.                        	self subclasses do:[ :sc | sc allSubclassesDo:aBlock]  :SOURCE,type=instanceMethod,class=RtClass,selector=removeSubclass:,codeType=rtalkremoveSubclass: aClass                        "Private - Remove aClass as a                         subclass of the receiver."                    | index |                    self subclasses:                        (self subclasses asSet                            remove: aClass                                ifAbsent: [];                            yourself)               :SOURCE,type=instanceMethod,class=RtClass,selector=printOn:,codeType=rtalkprintOn: aStream                   "<modified:sys=GAKRE8CA,time=06/07/11 at 09:44:46 pm>   "                   "<modified:sys=GAKRE8CA,time=02/10/11 at 10:11:43 am>   "                        "Append the name"                        aStream nextPutAll: self name               :SOURCE,type=instanceMethod,class=RtClass,selector=shallowCopy,codeType=rtalkshallowCopy                   "<modified:sys=GAKRE8CA,time=04/28/11 at 08:10:00 am>   "                        "Answer a copy of the receiver which shares                         the receiver instance variables.  Because                         classes are unique (cannot be copied),                         answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=RtClass,selector=symbol,codeType=rtalksymbol                        "Private - Answer the symbol for                         the class name of the receiver."                    ^name               :SOURCE,type=instanceMethod,class=RtClass,selector=loadPreferences:,codeType=rtalkloadPreferences:aDict                        "initialize prefs"               :SOURCE,type=instanceMethod,class=RtClass,selector=monitorsTopic:message:,codeType=rtalkmonitorsTopic:aString message:aMessage                   "<modified:sys=G9TQQ5YA,time=02/19/10 at 03:26:43 pm>   "                   "<modified:sys=G9TQQ5YA,time=02/19/10 at 02:36:24 pm>   "                        "Check to see if this class handle a topic if so                        then it should add a handler to the sm.                        message is the subscribe request"                    ^self               :SOURCE,type=instanceMethod,class=RtClass,selector=basicNew:,codeType=rtalkbasicNew: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 05:15:12 pm>   "                        "Private - Answer an instance of the receiver.                         Allocate anInteger number of indexed instance                         variables.  If the receiver does not have indexed                         instance variables an error is reported.  This                         method should never be reimplemented in any                         subclass of Behavior since it is the primitive                         object allocation message."                	<jprim: /ObjectPrims primObjectNewSize>                    self isFixed                        ifTrue: [^self errorNotIndexable].                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtClass,selector=new:,codeType=rtalknew: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 05:17:01 pm>   "                        "Answer an instance of the receiver.  Allocate anInteger                         number of indexed instance variables.  If the receiver                         does not have indexed instance variables an error is                         reported.  This method is frequently reimplemented                         as a class message in classes that need special                         initialization of their instances."                	<jprim: /ObjectPrims primObjectNewSize>                    self isFixed                        ifTrue: [^self errorNotIndexable].                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtClass,selector=isFixed,codeType=rtalkisFixed                   "<modified:sys=GAKRE8CA,time=08/10/11 at 07:19:27 pm>   "                   "<modified:sys=GAKRE8CA,time=08/10/11 at 04:49:12 pm>   "                   "<modified:sys=GAKRE8CA,time=04/28/11 at 08:26:05 am>   "                   "<modified:sys=GAKRE8CA,time=08/30/10 at 03:15:36 pm>   "                   "<modified:sys=GAKRE8CA,time=08/30/10 at 03:07:06 pm>   "                        "Answer true if instances of the receiver do not                         contain indexed instance variables, else                         answer false."                    ^( structure bitAnd: 16r26) = 0               :SOURCE,type=instanceMethod,class=RtClass,selector=removeSelector:,codeType=rtalkremoveSelector: aSymbol                        "Remove the method named aSymbol from                         the methods defined in the receiver.                        Note:  This version has been modified so that the selectors                        for public methods are removed from the KmPublicMethods                        dictionary."                    self methodDictionary                        removeKey: aSymbol                        ifAbsent: [].               :SOURCE,type=instanceMethod,class=RtClass,selector=isBits,codeType=rtalkisBits                        "Answer true if instances of the receiver contain                         8 bit values instead of object pointers,                         else answer false."                    ^self isPointers not               :SOURCE,type=instanceMethod,class=RtClass,selector=isJavaObject,codeType=rtalkisJavaObject                   "<modified:sys=GAKRE8CA,time=04/28/11 at 04:15:05 pm>   "                   "<modified:sys=GAKRE8CA,time=04/28/11 at 04:13:15 pm>   "                        "Answer true if instances of the receiver contain                         java objects ."                    ^( structure bitAnd: 16r10) ~= 0  " check if java"               :SOURCE,type=instanceMethod,class=RtClass,selector=methodDictionary,codeType=rtalkmethodDictionary                   "<modified:pgmr=mdr,time=08/07/13 at 06:54:07 pm>   "               "Answer the dictionary of methods                         defined for instances of this class"              	^dictionaryArray       :SOURCE,type=instanceMethod,class=RtClass,selector=addSelector:withMethod:,codeType=rtalkaddSelector: aSymbol withMethod: aCompiledMethod                        "Add aCompiledMethod to the receiver messageDictionary                         using aSymbol as the key.  If aSymbol is not                         a Symbol report an error."                    Symbol mustBeSymbol: aSymbol.                    self methodDictionary                        at: aSymbol put: aCompiledMethod               :SOURCE,type=instanceMethod,class=RtClass,selector=superclass:,codeType=rtalksuperclass: aClass                        "Private - Change the superclass                         of the receiver to aClass."                    superClass := Array with: aClass               :SOURCE,type=instanceMethod,class=RtClass,selector=subclassNamed:,codeType=rtalksubclassNamed:aSymbol                   "<modified:pgmr=mdr,time=08/09/13 at 08:32:25 pm>   "              "Answer a new class that is  a subclass of this class. sets up the meta class as well"                    | newMeta instanceClass mDict tDictArray|                    	newMeta := RtMetaClass new.                	instanceClass:= RtClass newFromInstance.  " this gets a new RtClass instance"                	newMeta instanceClass:instanceClass.              	self  addSubclass: instanceClass.              	instanceClass structure: structure.            	" get the class method lookup and add an empty one for this class "                   	mDict := RtMethodLookup newSize:2.          	mDict owner:newMeta.          	mDict selfLink:self  methodLookup.          	mDict superLink:self  methodLookup.          	tDictArray := RtMethodLookup newSize:2.          	tDictArray owner:instanceClass.          	tDictArray selfLink:instanceClass superclass instancesMethods.          	tDictArray superLink:instanceClass superclass instancesMethods.                     	newMeta instancesMethods:mDict.                    instanceClass rename: aSymbol.            	instanceClass instancesMethods:tDictArray.              	instanceClass instVarNames:(Array new: 0).                    	instanceClass subclasses:(Array new:0).                       	instanceClass methodLookup:mDict.              	^instanceClass      :SOURCE,type=instanceMethod,class=RtClass,selector=sharedVariableString,codeType=rtalksharedVariableString                        "Private - Answer a String containing                         all of the pool dictionary names                         referred to by the receiver.  The                         names are spearated with blanks."                    | aStream |                    aStream := WriteStream on: (String new: 16).                    self sharedPools do: [ :each |                        aStream                            space;                            nextPutAll: each ].                    aStream position = 0 ifFalse: [ aStream space ].                    ^aStream contents               :SOURCE,type=instanceMethod,class=RtClass,selector=basicNew,codeType=rtalkbasicNew                   "<modified:pgmr=mdr,time=01/04/13 at 05:15:05 pm>   "                        "Private - Answer an instance of the receiver.  If the                         receiver is indexable, then allocate zero indexed                         instance variables.  This method should never be                         reimplemented in any subclass of Behavior since it                         is the primitive object allocation message."                	<jprim: /ObjectPrims primObjectNew>                    self isVariable                        ifTrue: [^self basicNew: 0].                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtClass,selector=sourceCodeAt:,codeType=rtalksourceCodeAt: aSymbol                        "Answer a String of the source code for the method                         named aSymbol in the receiver."                    | method answer |                    method := self compiledMethodAt: aSymbol.                    method isNil                        ifTrue: [^aSymbol]                        ifFalse:[                            (method isCompiledMethod)                                ifTrue: [                                    answer := method sourceString.                                    answer == nil                                        ifTrue: [^aSymbol, ' can''t access source code']                                        ifFalse:[^answer]]                                ifFalse:[^aSymbol, ' can''t access source code']].               :SOURCE,type=instanceMethod,class=RtClass,selector=allSuperclasses,codeType=rtalkallSuperclasses                        "Answer an OrderedCollection of all the superclasses                         of the receiver.  The superclasses are in inverse                         hierarchical order, i.e class Object is last."                    | answer aClass|                    answer := OrderedCollection new.                    superClass do: [:each |                        each isNil ifFalse: [                            answer add: each;                                addAll: each allSuperclasses]].                    ^ answer.               :SOURCE,type=instanceMethod,class=RtClass,selector=canUnderstand:,codeType=rtalkcanUnderstand: aSymbol                   "<modified:pgmr=mdr,time=06/16/14 at 11:40:47 am>   "         "Answer true if the receiver or any of the receiver                         superclasses implement the method named aSymbol, else                         answer false."                    ^(self methodDictionary implementsMethod: aSymbol) :SOURCE,type=instanceMethod,class=RtClass,selector=inheritsFrom:,codeType=rtalkinheritsFrom: aClass                        "Answer true if receiver can inherit methods                         from aClass, else answer false."                    | class |                    class := self.                    [class == nil] whileFalse: [                        (class == aClass)                            ifTrue: [^true].                        class := class superclass].                    ^false               :SOURCE,type=instanceMethod,class=RtClass,selector=subclasses:,codeType=rtalksubclasses: aCollection                        "Private - Change the subclasses of the receiver                         to be the classes in aCollection."                    aCollection isEmpty                        ifTrue: [subclasses := nil]                        ifFalse:[subclasses := aCollection asArray]               :SOURCE,type=instanceMethod,class=RtClass,selector=name,codeType=rtalkname                   "<modified:sys=GAKRE8CA,time=09/08/10 at 07:20:22 am>   "                        "Answer a String containing the receiver name."                    ^name asString               :SOURCE,type=instanceMethod,class=RtClass,selector=structure,codeType=rtalkstructure                   "<modified:sys=GAKRE8CA,time=04/28/11 at 11:13:29 am>   "                        "Answer the integer that describes the structure                         of instances of the receiver.  Refer to the                         class variables of Behavior for a definition                         of this integer.                        bottom 16 bits are instance shape, next 16 bits are number                        of instance vars"                    ^structure               :SOURCE,type=instanceMethod,class=RtClass,selector=initialize,codeType=rtalkinitialize                   "<modified:pgmr=mdr,time=08/09/13 at 08:16:51 pm>   "              "Initialize the class variables defined in the receiver.                         Subclasses usually override this message.."      :SOURCE,type=instanceMethod,class=RtClass,selector=loadShortcut:,codeType=rtalkloadShortcut:aPara                   "<modified:pgmr=mdr,time=01/02/13 at 06:45:26 pm>   "                        "at least handle perform.                        args must be strings unless argType is supplied"                    | tmp args argTypes|                    aPara multiLines do:[ :m |                        (m value riAtKey:1) asUpperCase = 'PERFORM'                            ifTrue:[                                (args := (m value riAtKey:'args')) isNil                                    ifTrue:[self perform:(m value riAtKey:'selector')asSymbol]                                    ifFalse:[                                        args := args riAsMultiValues.                                        (argTypes := (m value riAtKey:'argsTypes')) isNil                                            ifFalse:[ tmp := args.                                                       args := Array new:(args size).                                                       1 to:(tmp size) do:[ :i |                                                            args at:i put:((RtClass getClass:((argTypes at:i) asSymbol)) fromString:(tmp at:i))]].                                        self perform:(m value riAtKey:'selector')asSymbol                                            withArguments:args]]].               :SOURCE,type=instanceMethod,class=RtClass,selector=isVariable,codeType=rtalkisVariable                        "Answer true if instances of the receiver contain                         indexed instance variables, else answer false."                    ^self isFixed not               :SOURCE,type=instanceMethod,class=RtClass,selector=isFloatArray,codeType=rtalkisFloatArray                   "<modified:sys=GAKRE8CA,time=04/28/11 at 04:14:41 pm>   "                   "<modified:sys=GAKRE8CA,time=04/28/11 at 04:13:15 pm>   "                        "Answer true if instances of the receiver contain                         float arrays."                    ^( structure bitAnd: 16r20) ~= 0  " check if floats "               :SOURCE,type=instanceMethod,class=RtClass,selector=addSubclass:,codeType=rtalkaddSubclass: aClass                        "Add aClass to the subclasses of the receiver.                         Make the the receiver the superclass of aClass."                    (self subclasses includes: aClass)                        ifTrue: [^self].                    self subclasses: (self subclasses copyWith: aClass).                    aClass superclass: self               :SOURCE,type=instanceMethod,class=RtClass,selector=isPointers,codeType=rtalkisPointers                   "<modified:sys=GAKRE8CA,time=04/28/11 at 04:13:35 pm>   "                   "<modified:sys=GAKRE8CA,time=04/28/11 at 08:25:07 am>   "                   "<modified:sys=GAKRE8CA,time=08/30/10 at 03:15:24 pm>   "                   "<modified:sys=GAKRE8CA,time=08/30/10 at 03:06:24 pm>   "                        "Answer true if instances of the receiver                         contain object pointers instead of 8 bit                         values, else answer false."                    ^( structure bitAnd: 16r4) = 0  " check if not bytes "               :SOURCE,type=instanceMethod,class=RtClass,selector=instancesMethods,codeType=rtalkinstancesMethods                  "<modified:pgmr=mdr,time=08/09/13 at 08:26:42 pm>   "              "Answer the lookup of methods                         defined for instances of this class"              	^dictionaryArray      :SOURCE,type=instanceMethod,class=RtClass,selector=errorNotIndexable,codeType=rtalkerrorNotIndexable                        "Private - When trying to make an instance of the                         receiver with indexed instance variables and the                         receiver is not indexable,  produce a walkback."                    ^self error:                        name, 's do not have indexed instance variables'               :SOURCE,type=instanceMethod,class=RtClass,selector=deepCopy,codeType=rtalkdeepCopy                   "<modified:sys=GAKRE8CA,time=04/28/11 at 08:02:19 am>   "                        "Answer a copy of the receiver with shallow                         copies of each instance variable.  Because                         classes are unique (cannot be copied),                         answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=RtClass,selector=compiledMethodAt:,codeType=rtalkcompiledMethodAt: aSymbol                        "Answer the compiled code of the method                         named aSymbol defined in the receiver."                    ^self methodDictionary at: aSymbol ifAbsent: [^nil]               :SOURCE,type=instanceMethod,class=RtClass,selector=classPool,codeType=rtalkclassPool                   "<modified:sys=GAKRE8CA,time=12/20/11 at 09:39:26 pm>   "                        "Answer the dictionary containing the class                         variables defined in the receiver."                    classPool isNil                        ifTrue: [classPool := RtDictionary new].                    ^classPool               :SOURCE,type=instanceMethod,class=RtClass,selector=new,codeType=rtalknew                   "<modified:pgmr=mdr,time=01/04/13 at 05:16:56 pm>   "                        "Answer an instance of the receiver.  If the receiver is                         indexable, then allocate zero indexed instance                         variables.  This method is frequently reimplemented                         as a class message in classes that need special                         initialization of their instances."                	<jprim: /ObjectPrims primObjectNew>                    self isVariable                        ifTrue: [^self new: 0].                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtClass,selector=rename:,codeType=rtalkrename: aString                   "<modified:pgmr=mdr,time=07/03/13 at 10:04:23 am>   "                      "Private - Rename the receiver to aString                         in the environment aSystemDictionary."                    | aSymbol association |                    aSymbol := aString asSymbol.                    (RtClass classExists: aSymbol)                        ifTrue: [                            ^self error: 'can''t rename to existing name'].                    name == nil                        ifFalse: [                            RtClass removeClassNamed:name].                                    name :=  aSymbol.                    RtClass saveClass:self.                	self timeStamp:(RiGuruTime secondsSince1990GMT).              :SOURCE,type=instanceMethod,class=RtClass,selector=withAllSubclasses,codeType=rtalkwithAllSubclasses                        "Answer an OrderedCollection of the receiver and                         all of its subclasses in hierarchical order."                    | answer |                    answer := OrderedCollection with: self.                    self allSubclasses do: [ :each |                        answer add: each].                    ^answer               :SOURCE,type=instanceMethod,class=RtClass,selector=isInteger,codeType=rtalkisInteger                   "<modified:pgmr=mdr,time=08/07/12 at 05:11:54 pm>   "                        "Answer true if instances of the receiver contain                         integer"                    ^( structure bitAnd: 16r01) ~= 0               :SOURCE,type=instanceMethod,class=RtClass,selector=instancesMethods:,codeType=rtalkinstancesMethods: aLookup                 "<modified:pgmr=mdr,time=08/09/13 at 08:30:11 pm>   "              "Private - Change the instances of this class lookup"                          dictionaryArray := aLookup      :SOURCE,type=instanceMethod,class=RtClass,selector=isFloat,codeType=rtalkisFloat                   "<modified:pgmr=mdr,time=08/07/12 at 05:12:04 pm>   "                   "<modified:pgmr=mdr,time=08/07/12 at 05:11:07 pm>   "                        "Answer true if instances of the receiver contain                         float"                    ^( structure bitAnd: 16r08) ~= 0               :SOURCE,type=instanceMethod,class=RtClass,selector=hasClassVarNamed:,codeType=rtalkhasClassVarNamed:aSymbol         "<modified:pgmr=mdr,time=06/05/14 at 09:22:52 pm>   "           "comment"         ^self classPool includesKey:aSymbol   :SOURCE,type=instanceMethod,class=RtClass,selector=selectors,codeType=rtalkselectors                        "Answer a Set of symbols of the names                         of the methods defined by the receiver."                    ^self methodDictionary keys               :SOURCE,type=instanceMethod,class=RtClass,selector=superclass,codeType=rtalksuperclass                        "Answer the superclass of the receiver."                    ^superClass at: 1               :SOURCE,type=instanceMethod,class=RtClass,selector=allInstances,codeType=rtalkallInstances                   "<modified:pgmr=mdr,time=01/04/13 at 05:14:35 pm>   "                        "Private - Answer an Array of all of                         the instances of the receiver."                	<jprim: /ObjectPrims primObjectAllInstancesPrim>                    self primitiveFailed               :SOURCE,type=instanceMethod,class=Magnitude,selector=testMH,codeType=rtalktestMH                   "<modified:sys=GAKRE8CA,time=02/25/11 at 10:07:05 am>   "                        "comment"                    ^5000               :SOURCE,type=instanceMethod,class=Magnitude,selector=min:,codeType=rtalkmin: aMagnitude                        "Answer the receiver if it is less                         than aMagnitude, else answer aMagnitude."                    self < aMagnitude                        ifTrue:  [^self]                        ifFalse: [^aMagnitude]               :SOURCE,type=instanceMethod,class=Magnitude,selector=between:and:,codeType=rtalkbetween: min and: max                        "Answer true if the receiver is greater than or                         equal to min and less than or equal to max,                         else answer false."                    ^(min <= self) and: [self <= max]               :SOURCE,type=instanceMethod,class=Magnitude,selector=max:,codeType=rtalkmax: aMagnitude                        "Answer the receiver if it is greater                         than aMagnitude, else answer aMagnitude."                    self > aMagnitude                        ifTrue:  [^self]                        ifFalse: [^aMagnitude]               :SOURCE,type=instanceMethod,class=Object,selector=yourself,codeType=rtalkyourself                        "Answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=Object,selector=rtLogMsg:,codeType=rtalkrtLogMsg:aString                   "<modified:pgmr=mdr,time=01/04/13 at 07:23:41 pm>   "                        "write this to the java console"                                	<jprim: /RtalkPrims primWriteToConsole>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=perform:withArguments:,codeType=rtalkperform: aSymbol withArguments: anArray                   "<modified:pgmr=mdr,time=01/04/13 at 05:08:40 pm>   "                        "Answer the result of sending a message to the receiver                         with selector aSymbol and arguments the elements of                         anArray.  Report an error if the number of arguments                         expected by the selector is not equal to anArray size."                    | aString |                	<jprim: /ObjectPrims primObjectPerformWithArgs>                    aSymbol isSymbol                        ifFalse: [                            aString := aSymbol class name.                            ^self error: 'perform: expects a Symbol, not ',                                ((aString at: 1) isVowel                                    ifTrue: ['an ' , aString]                                    ifFalse: ['a ' , aString])].                    ^self error:                        'perform: ' , self class name , ' ' , aSymbol ,                        ' did not expect ' , anArray size printString ,                        ' arguments'               :SOURCE,type=instanceMethod,class=Object,selector=hash,codeType=rtalkhash                   "<modified:pgmr=mdr,time=01/04/13 at 05:05:49 pm>   "                        "Answer the integer hash value of the receiver.  This                         is the default implementation which uses the object                         hash value assigned at the creation time."                	<jprim: /ObjectPrims primObjectHash>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=perform:with:with:with:,codeType=rtalkperform: aSymbol                    with: firstObject                    with: secondObject                    with: thirdObject                        "Answer the result of sending a keyword message to                         the receiver with selector aSymbol and arguments                         firstObject, secondObject and thirdObject.  Report                         an error if the number of arguments expected by the                         selector is not three."                    ^self perform: aSymbol withArguments:                        (Array                            with: firstObject                            with: secondObject                            with: thirdObject)               :SOURCE,type=instanceMethod,class=Object,selector=debugStep:arg:arg:arg:,codeType=rtalkdebugStep:aInt arg:aObject arg:aObject2 arg:aObject3                   "<modified:pgmr=mdr,time=01/04/13 at 07:07:50 pm>   "                        "gives access to debug helpers,  aInt indicates the object class, rcvr class                        and action"                	<jprim: /DebugPrims primDebugStepWithWithWith>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=instVarAt:put:,codeType=rtalkinstVarAt: anInteger put: anObject                   "<modified:pgmr=mdr,time=01/04/13 at 05:08:01 pm>   "                        "Private - Answer anObject.  Replace the instance                         variable in the receiver at index position                         anInteger with anObject.  Both named and indexed                         instance variables are indexed."                	<jprim: /ObjectPrims primObjectInstVarAtPut>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=notNil,codeType=rtalknotNil                        "Answer true if the receiver is not                         the object nil, else answer false."                    ^true               :SOURCE,type=instanceMethod,class=Object,selector=class,codeType=rtalkclass                   "<modified:pgmr=mdr,time=01/04/13 at 05:07:21 pm>   "                        "Answer the class of the receiver."                	<jprim: /ObjectPrims primObjectClass>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=at:put:,codeType=rtalkat: anInteger put: anObject                   "<modified:pgmr=mdr,time=01/04/13 at 05:11:58 pm>   "                        "Answer anObject.  Replace the object in the receiver                         at index position anInteger with anObject.  If the                         receiver does not have indexed instance variables, or                         if anInteger is greater than the number of indexed                         instance variables, report an error."                    <jprim: /ObjectPrims primObjectAtPut>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=species,codeType=rtalkspecies                        "Answer a class which is similar to (or the same                         as) the receiver class which can be used for                         containing derived copies of the receiver."                    ^self class               :SOURCE,type=instanceMethod,class=Object,selector=~~,codeType=rtalk~~ anObject                        "Answer true if the receiver and anObject are                         not the same object, else answer false."                    ^(self == anObject) not               :SOURCE,type=instanceMethod,class=Object,selector==,codeType=rtalk= anObject                   "<modified:pgmr=mdr,time=01/04/13 at 05:12:38 pm>   "                        "This is the default equality test.  Answer true                         if the receiver and anObject are the same object,                         else answer false."                	<jprim: /ObjectPrims primObjectIdentEquals>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a copy of the receiver which shares                         the receiver instance variables."                    ^self objectShallowCopy               :SOURCE,type=instanceMethod,class=Object,selector=error:,codeType=rtalkerror: aString                   "<modified:sys=GAKRE8CA,time=06/08/11 at 09:35:11 am>   "                   "<modified:sys=GAKRE8CA,time=04/25/11 at 03:30:27 pm>   "                   "<modified:sys=GAKRE8CA,time=04/25/11 at 03:28:57 pm>   "                        "Create a walkback window describing an error condition                         with the error message aString in the window label."                    RiRmtViewDebugger debug:aString resume:false               :SOURCE,type=instanceMethod,class=Object,selector=perform:with:with:with:with:,codeType=rtalkperform: aSymbol                    with: firstObject                    with: secondObject                    with: thirdObject                    with: fourthObject                        "Answer the result of sending a keyword message to                         the receiver with selector aSymbol and arguments                         firstObject, secondObject and thirdObject.  Report                         an error if the number of arguments expected by the                         selector is not three."                    ^self perform: aSymbol withArguments:                        (Array                            with: firstObject                            with: secondObject                            with: thirdObject                            with: fourthObject)               :SOURCE,type=instanceMethod,class=Object,selector===,codeType=rtalk== anObject                   "<modified:pgmr=mdr,time=01/04/13 at 05:12:44 pm>   "                        "Answer true if the receiver and anObject                         are the same object, else answer false."                	<jprim: /ObjectPrims primObjectIdentEquals>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=debugStep:arg:,codeType=rtalkdebugStep:aInt arg:aObject                   "<modified:pgmr=mdr,time=01/04/13 at 07:07:31 pm>   "                        "gives access to debug helpers,  aInt indicates the object class, rcvr class                        and debugger action"                    " aint = 1  aObject = aInt   current thread sleep(aObject ms) "                    " aint = 2  aObject = aInt   thread priority(aObject) "                	<jprim: /DebugPrims primDebugStepWithArg>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=invalidMessage,codeType=rtalkinvalidMessage                        "Initiate walkback because inappropriate                         message was sent to the receiver."                    ^self error:                        'inappropriate message for this object'               :SOURCE,type=instanceMethod,class=Object,selector=respondsTo:,codeType=rtalkrespondsTo: aSymbol                   "<modified:pgmr=mdr,time=06/16/14 at 11:37:34 am>   "         "Answer true if the receiver class or one of its                         superclasses implements a method with selector                         equal to aSymbol."                    ^self methodLookup implementsMethod: aSymbol :SOURCE,type=instanceMethod,class=Object,selector=instVarAt:,codeType=rtalkinstVarAt: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 05:07:55 pm>   "                        "Private - Answer the instance variable in                         the receiver at index position anInteger.                         Both named and indexed instance variables                         are indexed."                	<jprim: /ObjectPrims primObjectInstVarAt>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=newFromInstance:,codeType=rtalknewFromInstance:aInt                  "<modified:pgmr=mdr,time=07/01/13 at 03:15:04 pm>   "               	" returns a new object cloned from this instance with size aInt               	only for variable size types"               	<jprim: /ObjectPrims primObjectNewFromInstanceSize>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=size,codeType=rtalksize                   "<modified:pgmr=mdr,time=01/04/13 at 05:09:06 pm>   "                        "Answer the number of indexed instance                         variables in the receiver."                	<jprim: /ObjectPrims primObjectSize>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=~=,codeType=rtalk~= anObject                        "Answer true if the receiver and anObject do                         not compare equal (using =), else answer false."                    ^(self = anObject) not               :SOURCE,type=instanceMethod,class=Object,selector=doesNotUnderstand:,codeType=rtalkdoesNotUnderstand: aMessage                   "<modified:sys=GAKRE8CA,time=07/04/12 at 03:40:32 pm>   "                        "Initiate a walkback because a message was sent which                         is not understood, i.e. there is no matching method.                		 if the selector starts with is ( as in isNil) returns false instead                		of a dnu"                    ^self error: '"', aMessage receiver class name,' ',aMessage selector,                         '" not understood'               :SOURCE,type=instanceMethod,class=Object,selector=at:,codeType=rtalkat: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 05:11:53 pm>   "                   "<modified:sys=GAKRE8CA,time=07/01/12 at 06:58:44 pm>   "                        "Answer the object in the receiver at index position                         anInteger.  If the receiver does not have indexed                         instance variables, or if anInteger is greater                         than the number of indexed instance variables,                         report an error. "                    <jprim: /ObjectPrims primObjectAt>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=equalsIgnoreCase:,codeType=rtalkequalsIgnoreCase: anObject                                    ^self = anObject               :SOURCE,type=instanceMethod,class=Object,selector=debugStep:,codeType=rtalkdebugStep:aInt                   "<modified:pgmr=mdr,time=01/04/13 at 07:07:03 pm>   "                        "used for various special messages,  receiver dependent                          RtThread                            0 = death                            1 = resume                            2 = suspend                            3 = step                            4 = hop                            5 = send terminate execption                            6 = return total stack trace                            7 list threads to java console                            8 list call site depth to java console                            9 current thread yield                          RtCompiledMethod                            10 jvm byte codes                                                      "                	<jprim: /DebugPrims primDebugStep>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=methodLookup,codeType=rtalkmethodLookup                  "<modified:pgmr=mdr,time=07/01/13 at 02:47:51 pm>   "               	" returns the head of the lookup list "               	<jprim: /ObjectPrims primObjectClassFieldGet>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=basicAt:put:,codeType=rtalkbasicAt: anInteger put: anObject                   "<modified:pgmr=mdr,time=01/04/13 at 05:10:27 pm>   "                        "Answer anObject.  Replace the object in the receiver                         at index position anInteger with anObject.  If the receiver                         does not have indexed instance variables, or if anInteger                         is greater than the number of indexed instance variables,                         report an error."                    <jprim: /ObjectPrims primObjectAtPut>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=perform:,codeType=rtalkperform: aSymbol                        "Answer the result of sending a unary message to                         the receiver with selector aSymbol.  Report an                         error if the number of arguments expected by the                         selector is not zero."                    ^self perform: aSymbol withArguments: #()               :SOURCE,type=instanceMethod,class=Object,selector=newFromInstance,codeType=rtalknewFromInstance                  "<modified:pgmr=mdr,time=07/01/13 at 03:14:09 pm>   "               	" returns a new object cloned from this instance "               	<jprim: /ObjectPrims primObjectNewFromInstance>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=halt,codeType=rtalkhalt                   "<modified:sys=GAKRE8CA,time=02/18/12 at 12:29:55 am>   "                   "<modified:sys=GAKRE8CA,time=06/08/11 at 09:31:51 am>   "                        "Initiate a walkback with 'halt encountered'                         message for debugging."                    RtThread isDebugging                        ifFalse:[                            RiRmtViewDebugger debug:'halt encountered' resume:true]               :SOURCE,type=instanceMethod,class=Object,selector=basicSize,codeType=rtalkbasicSize                   "<modified:pgmr=mdr,time=01/04/13 at 05:10:40 pm>   "                        "Answer the number of indexed instance variables in                         the receiver."                	<jprim: /ObjectPrims primObjectSize>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=objectShallowCopy,codeType=rtalkobjectShallowCopy                        "Answer a copy of the receiver which shares                         the receiver instance variables."                    | answer aClass size |                    aClass := self class.                    aClass isVariable                        ifTrue: [                            size := self basicSize.                            answer := aClass new: size]                        ifFalse: [                            size := 0.                            answer := aClass new].                    aClass isPointers                        ifTrue: [                            1 to: size + aClass instSize do: [ :index |                                answer instVarAt: index                                    put: (self instVarAt: index)]]                        ifFalse: [                            1 to: size do: [ :index |                                answer basicAt: index                                    put: (self basicAt: index)]].                    ^answer               :SOURCE,type=instanceMethod,class=Object,selector=debugStep:arg:arg:,codeType=rtalkdebugStep:aInt arg:aObject arg:aObject2                   "<modified:pgmr=mdr,time=01/04/13 at 07:07:41 pm>   "                        "gives access to debug helpers,  aInt indicates the object class, rcvr class                        and action"                	<jprim: /DebugPrims primDebugStepWithWith>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=riLogMsgQ:,codeType=rtalkriLogMsgQ:aString                   "<modified:pgmr=mdr,time=08/15/12 at 11:49:25 pm>   "                   "<modified:sys=GAKRE8CA,time=06/04/11 at 05:13:38 pm>   "                   "<modified:sys=GAKRE8CA,time=04/25/11 at 01:23:43 pm>   "                        "write the string preceeded by atEnd to the transcript                        with no beep"                   | trans |                    trans := RiSystemMessageManager msgManager handlerNamed:'TRANSCRIPT'.                    trans isNil ifFalse:[trans monitorTranscript:aString printString].                                    self rtLogMsg:aString               :SOURCE,type=instanceMethod,class=Object,selector=copy,codeType=rtalkcopy                        "Answer a shallow copy of the receiver."                    ^self shallowCopy               :SOURCE,type=instanceMethod,class=Object,selector=methodLookup:,codeType=rtalkmethodLookup:aLookup                  "<modified:pgmr=mdr,time=07/01/13 at 02:49:25 pm>   "               	" sets the head of the lookup list "               	<jprim: /ObjectPrims primObjectClassFieldPut>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=deepCopy,codeType=rtalkdeepCopy                        "Answer a copy of the receiver with shallow                         copies of each instance variable."                    ^self objectDeepCopy               :SOURCE,type=instanceMethod,class=Object,selector=allReferences,codeType=rtalkallReferences                   "<modified:pgmr=mdr,time=01/04/13 at 05:22:18 pm>   "                        "Answer an Array of all of                         the references to the receiver."                    <jprim: /ObjectPrims primObjectAllReferencesPrim>                    self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=basicHash,codeType=rtalkbasicHash                   "<modified:pgmr=mdr,time=01/04/13 at 05:10:09 pm>   "                        "Answer the integer hash value of the receiver.  This                         is the default implementation which uses the object                         hash value assigned at the creation time."                	<jprim: /ObjectPrims primObjectHash>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=primitiveFailed,codeType=rtalkprimitiveFailed                   "<modified:pgmr=mdr,time=08/13/12 at 08:11:32 am>   "                        "default handler"                    self error:'primitive failed'               :SOURCE,type=instanceMethod,class=Object,selector=perform:with:with:,codeType=rtalkperform: aSymbol with: firstObject with: secondObject                        "Answer the result of sending a keyword message to                         the receiver with selector aSymbol and arguments                         firstObject and secondObject.  Report an error if                         the number of arguments expected by the selector                         is not two."                    ^self perform: aSymbol withArguments:                        (Array                            with: firstObject                            with: secondObject)               :SOURCE,type=instanceMethod,class=Object,selector=riLogMsg:,codeType=rtalkriLogMsg:aString                   "<modified:pgmr=mdr,time=08/15/12 at 11:49:42 pm>   "                   "<modified:pgmr=mdr,time=08/15/12 at 11:49:17 pm>   "                   "<modified:sys=GAKRE8CA,time=06/04/11 at 05:13:20 pm>   "                   "<modified:sys=GAKRE8CA,time=04/26/11 at 07:51:03 pm>   "                   "<modified:sys=GAKRE8CA,time=04/25/11 at 01:23:29 pm>   "                        "write the string preceeded by to the transcript"                    | trans |                    trans := RiSystemMessageManager msgManager handlerNamed:'TRANSCRIPT'.                    trans isNil ifFalse:[trans monitorTranscript:aString printString].                    aString class = String                        ifTrue:[self rtLogMsg:aString]                        ifFalse:[self rtLogMsg:(aString printString)].               :SOURCE,type=instanceMethod,class=Object,selector=basicAt:,codeType=rtalkbasicAt: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 05:10:20 pm>   "                        "Answer the object in the receiver at index position                         anInteger.  If the receiver does not have indexed                         instance variables, or if anInteger is greater                         than the number of indexed instance variables,                         report an error."                    <jprim: /ObjectPrims primObjectAt>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=Object,selector=classNameString,codeType=rtalkclassNameString                  "<modified:pgmr=mdr,time=07/01/13 at 03:03:52 pm>   "                       "the string for the class name, trailed by class if metaclass"                   ^self class name               :SOURCE,type=instanceMethod,class=Object,selector=classSymbol,codeType=rtalkclassSymbol                  "<modified:pgmr=mdr,time=07/01/13 at 02:53:33 pm>   "                       "the symbol of the class name"                   ^self class symbol               :SOURCE,type=instanceMethod,class=Object,selector=perform:with:,codeType=rtalkperform: aSymbol with: anObject                        "Answer the result of sending a binary message to                         the receiver with selector aSymbol and argument                         anObject.  Report an error if the number of arguments                         expected by the selector is not one."                    ^self perform: aSymbol withArguments:                        (Array with: anObject)               :SOURCE,type=instanceMethod,class=Object,selector=objectDeepCopy,codeType=rtalkobjectDeepCopy                        "Answer a copy of the receiver with shallow                         copies of each instance variable."                    | copy aClass instanceVars |                    aClass := self class.                    aClass isVariable                        ifTrue: [                            instanceVars := self basicSize.                            copy := aClass new: instanceVars]                        ifFalse: [                            instanceVars := 0.                            copy := aClass new].                    aClass isPointers                        ifTrue: [                            1 to: instanceVars + aClass instSize do: [ :index |                                copy instVarAt: index                                    put: (self instVarAt: index) copy]]                        ifFalse: [                            1 to: instanceVars do: [ :index |                                copy basicAt: index                                    put: (self basicAt: index)]].                    ^copy               :SOURCE,type=instanceMethod,class=True,selector=xor:,codeType=rtalkxor: aBoolean                        "Answer true if the receiver is not equivalent                         to aBoolean, else answer false."                    ^aBoolean not               :SOURCE,type=instanceMethod,class=True,selector=hash,codeType=rtalkhash                        "Answer the hash                         of true."                    ^16r3FFE               :SOURCE,type=instanceMethod,class=True,selector=basicHash,codeType=rtalkbasicHash                        "Private - Answer the                         hash of true."                    ^16r3FFE               :SOURCE,type=instanceMethod,class=True,selector=not,codeType=rtalknot                        "Answer true if the receiver                         is false, else answer false."                    ^false               :SOURCE,type=instanceMethod,class=True,selector=&,codeType=rtalk& aBoolean                        "Answer true if both the receiver and                         aBoolean are true, else answer false."                    ^aBoolean               :SOURCE,type=instanceMethod,class=True,selector=or:,codeType=rtalkor: aBlock                        "If the receiver is false, answer the result                         of evaluating aBlock, else answer true."                    ^true               :SOURCE,type=instanceMethod,class=True,selector=|,codeType=rtalk| aBoolean                        "Answer true if either the receiver or                         aBoolean are true, else answer false."                    ^true               :SOURCE,type=instanceMethod,class=True,selector=and:,codeType=rtalkand: aBlock                        "If the receiver is true, answer the result of                         evaluating aBlock (with no arguments), else                         answer false."                    ^aBlock value               :SOURCE,type=instanceMethod,class=FixedSizeCollection,selector=collect:,codeType=rtalkcollect: aBlock                        "For each element in the receiver, evaluate                         aBlock with that element as the argument.                         Answer a collection containing the results                         from the aBlock evaluations as its elements."                    | answer index size |                    size := self size.                    answer := OrderedCollection new: size.                    index := 1.                    [index > size]                        whileFalse: [                            answer add: (aBlock value: (self at: index)).                            index := index + 1].                    ^(self species new: size)                        replaceFrom: 1                        to: size                        with: answer               :SOURCE,type=instanceMethod,class=FixedSizeCollection,selector=copyReplaceFrom:to:with:,codeType=rtalkcopyReplaceFrom: start to: stop with: aCollection                        "Answer a collection containing the elements                         of the receiver with entries indexed from                         start through stop being replaced by the                         elements of aCollection."                    | answer size1 size2 |                    size1 := aCollection size.                    size2 := self size + size1 - (stop - start + 1).                    answer := self species new: size2.                    answer                        replaceFrom: 1                        to: start - 1                        with: self                        startingAt: 1.                    answer                        replaceFrom: start                        to: start + size1 - 1                        with: aCollection.                    ^answer                        replaceFrom: start + size1                        to: size2                        with: self                        startingAt: stop + 1               :SOURCE,type=instanceMethod,class=FixedSizeCollection,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a copy of the receiver which shares                         the receiver elements."                    ^self objectShallowCopy               :SOURCE,type=instanceMethod,class=FixedSizeCollection,selector=remove:ifAbsent:,codeType=rtalkremove: anObject ifAbsent: aBlock                        "Remove anObject from the receiver.  This method                         reports an error since elements cannot be removed                         from fixed size collections, they can only be changed."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=FixedSizeCollection,selector=add:,codeType=rtalkadd: anObject                        "Add anObject to the receiver.  This method reports                         an error since fixed size collections cannot grow."                    ^self invalidMessage               :SOURCE,type=instanceMethod,class=FixedSizeCollection,selector=select:,codeType=rtalkselect: aBlock                        "For each element in the receiver, evaluate                         aBlock with that element as the argument.                         Answer a collection containing those elements                         of the receiver for which aBlock evaluates to                         true."                    | answer index size anObject |                    size := self size.                    answer := OrderedCollection new: size.                    index := 1.                    [index > size]                        whileFalse: [                            anObject := self at: index.                            (aBlock value: anObject)                                ifTrue: [answer add: anObject].                            index := index + 1].                    size := answer size.                    ^(self species new: size)                        replaceFrom: 1                        to: size                        with: answer               :SOURCE,type=instanceMethod,class=FixedSizeCollection,selector=deepCopy,codeType=rtalkdeepCopy                        "Answer a copy of the receiver with shallow                         copies of each instance variable."                    ^self objectDeepCopy               :SOURCE,type=instanceMethod,class=FixedSizeCollection,selector=size,codeType=rtalksize                   "<modified:pgmr=mdr,time=01/04/13 at 05:13:29 pm>   "                        "Answer the number of indexed instance                         variables of the receiver."                	<jprim: /ObjectPrims primObjectSize>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=FixedSizeCollection,selector=fullCopy,codeType=rtalkfullCopy                        "Answer a copy of the receiver full                         copies of each instance variable."                        " DCB  2/8/97 changed from deepCopy to                             true fullCopy.  Required for compiler arrays of                             dictionaries of RiDatas"                "    ^self deepCopy                "                | answer n |                    n := self size.                    answer := self species new: n.                    1 to: n do: [: i |                        answer at: i put: ((self at: i) fullCopy)].                    ^answer               :SOURCE,type=instanceMethod,class=String,selector=asLowerCase,codeType=rtalkasLowerCase                        "Answer a String containing the                         receiver with alphabetic                         characters in lower case."                    | answer size index aCharacter |                    size := self size.                    answer := self species new: size.                    index := 1.                    [index <= size]                        whileTrue: [                            (aCharacter := self at: index) isUpperCase                                ifTrue: [aCharacter := aCharacter asLowerCase].                            answer at: index put: aCharacter.                            index := index + 1].                    ^answer               :SOURCE,type=instanceMethod,class=String,selector=fileExtension,codeType=rtalkfileExtension                        "Answer a three character String that                         follows the receiver's last period character.                         (for DOS file names)."                    | str lastPeriod |                    str := (ReadStream on: self).                    lastPeriod  := self size.                    [ str skipTo: $. ] whileTrue: [  lastPeriod := str position ].                    str position: lastPeriod.                    ^( (str upTo: $.), (String with: $  with: $  with: $ ))                        copyFrom: 1 to: 3.               :SOURCE,type=instanceMethod,class=String,selector=hash,codeType=rtalkhash                   "<modified:pgmr=mdr,time=01/04/13 at 06:54:34 pm>   "                        "Answer the integer hash                         value for the receiver."                    | theHash index |                	<jprim: /ByteStringPrims primStringHash>                    index := self size.                    theHash := 0.                    [index < 1]                        whileFalse: [                            theHash :=                                (theHash * 61 + (self at: index) asciiValue)                                    bitAnd: 16r3FFF.                            index := index - 1].                    ^ theHash bitAnd: 16r3FFF               :SOURCE,type=instanceMethod,class=String,selector=find:,codeType=rtalkfind:aString                   "<modified:pgmr=mdr,time=09/11/12 at 01:29:11 pm>   "                        "find this substring and rtn start or nil"                    ^self  findPattern:aString startingAt:(1 newMutable).               :SOURCE,type=instanceMethod,class=String,selector=riPadStartWith:to:,codeType=rtalkriPadStartWith:aChar to:aSize                        "comment"                    | rtn |                                    self size = aSize ifTrue:[^self].                    rtn := String new:aSize.                    rtn atAllPut:aChar.                    rtn replaceFrom:(aSize - self size + 1)                    to: aSize                    with: self                    startingAt:1.                    ^rtn               :SOURCE,type=instanceMethod,class=String,selector=<,codeType=rtalk< aString                        "Answer true if the receiver is before aString                         in the current sort sequence, else answer false.                         The comparison is not case sensitive."                    ^(aString "asString" <= self) not               :SOURCE,type=instanceMethod,class=String,selector==,codeType=rtalk= aString                   "<modified:pgmr=mdr,time=01/04/13 at 06:49:32 pm>   "                   "<modified:sys=GAKRE8CA,time=04/26/11 at 07:47:54 pm>   "                        "Answer true if the receiver is equal to                         aString, else answer false.  The comparison                         is case sensitive."                    | sbs dbs i |                	<jprim: /ByteStringPrims primStringEquals>                    " fails when self class ~= aString class "                    aString isSymbol ifTrue: [^false].                    ^false               :SOURCE,type=instanceMethod,class=String,selector=>,codeType=rtalk> aString                        "Answer true if the receiver is after aString                         in the current sort sequence, else answer false.                         The comparison is not case sensitive."                    ^(self asString <= (aString asString)) not               :SOURCE,type=instanceMethod,class=String,selector=at:put:,codeType=rtalkat: anInteger put: aCharacter                   "<modified:pgmr=mdr,time=01/04/13 at 06:53:55 pm>   "                        "Answer aCharacter.  At index position                         anInteger in the receiver put the                         character."                	<jprim: /ByteStringPrims primStringAtPut>                    self checkIndex: anInteger.                    self checkCharacter: aCharacter.                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=String,selector=rejectComments,codeType=rtalkrejectComments                        "Answer the receiver string with all of the                          embedded comments deleted."                    | input result |                    input := ReadStream on: self.                    result := input upTo: $" .                    [ input skipTo: $" ] whileTrue: [                        result := result, ( input upTo: $" ) ].                    ^result               :SOURCE,type=instanceMethod,class=String,selector=asStream,codeType=rtalkasStream                        "Answer a ReadWriteStream on the receiver."                    ^ReadWriteStream on: self               :SOURCE,type=instanceMethod,class=String,selector=replaceBytesFrom:to:with:startingAt:,codeType=rtalkreplaceBytesFrom: byteStart                    to: byteStop                    with: aByteObject                    startingAt: byteRepStart                   "<modified:pgmr=mdr,time=01/04/13 at 06:52:05 pm>   "                        "Private - replace the bytes of the receiver at index                         positions start through stop with consecutive                         bytes of aByteObject beginning at index                         position repStart.  Answer the receiver."                    | index1 index2 |                	<jprim: /ByteStringPrims primBytesReplaceFromToWithStartingAt>                    aByteObject class isBytes                        ifFalse: [self error: 'source must be a byte object'].                    (self == aByteObject and: [byteRepStart < byteStart])                        ifTrue: [ "do backward move for same object"                            index2 := byteRepStart + byteStop - byteStart.                            index1 := byteStop.                            [byteStart <= index1]                                whileTrue: [                                self                                    at: index1                                    put: (aByteObject basicAt: index2) asCharacter.                                index1 := index1 - 1.                                index2 := index2 - 1].                            ^self].                    "do forward move"                    index2 := byteRepStart.                    index1 := byteStart.                    [index1 <= byteStop]                        whileTrue: [                            self                                at: index1                                put: (aByteObject basicAt: index2) asCharacter.                            index1 := index1 + 1.                            index2 := index2 + 1]               :SOURCE,type=instanceMethod,class=String,selector=asSymbol,codeType=rtalkasSymbol                   "<modified:pgmr=mdr,time=01/04/13 at 06:46:25 pm>   "                        "Answer a symbol whose characters                         are the same as the receiver string."                	<jprim: /ByteStringPrims primSymbolFromString>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=String,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a copy of the receiver which shares                         the receiver elements."                    ^self copyFrom: 1 to: self size               :SOURCE,type=instanceMethod,class=String,selector=replace:with:,codeType=rtalkreplace: count with: aCollection                   "<modified:pgmr=mdr,time=01/04/13 at 06:52:19 pm>   "                        "Replace count elements of the receiver                         with elements of aCollection.  aCollection                         may be a Smalltalk byte object Answer the receiver."                	<jprim: /ByteStringPrims primBytesReplaceCountWith>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=String,selector=>=,codeType=rtalk>= aString                        "Answer true if the receiver is after or equal to                         aString in the current sort sequence, else answer false.                         The comparison is not case sensitive."                    aString isString                        ifFalse: [ ^self error: 'invalid string argument' ].                    ^aString <= self               :SOURCE,type=instanceMethod,class=String,selector=<=,codeType=rtalk<= aString                   "<modified:pgmr=mdr,time=01/04/13 at 06:49:25 pm>   "                   "<modified:sys=GAKRE8CA,time=02/02/12 at 07:05:33 pm>   "                        "Answer true if the receiver is before or equal to                         aString in the current sort sequence, else answer false.                         The comparison is not case sensitive."                	<jprim: /ByteStringPrims primStringLessOrEquals>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=String,selector=asArrayOfWordsOrNumbers,codeType=rtalkasArrayOfWordsOrNumbers                        "Answer an array of substrings from the                         receiver.  The receiver is divided into                         substrings at the occurrences of one or                         more space characters. or when a change of type occurs"                    | word number isWord rtn|                    rtn := OrderedCollection new.                    isWord := (self at:1) isDigit not.                    isWord                        ifTrue:[word := '']                        ifFalse:[number := 0].                    self do:[ :c |                        (c isDigit)                            ifTrue:[isWord                                         ifTrue:[number := c digitValue.                                                    isWord := false.                                                    word isNil                                                         ifFalse:[rtn add:word.                                                                   word := nil]]                                        ifFalse:[ number := number * 10 + (c digitValue)]]                            ifFalse:[ isWord                                            ifTrue:[word := word,(c asString)]                                            ifFalse:[number isNil                                                        ifFalse:[rtn add:number.                                                                   number := nil.].                                                    isWord := true.                                                    word := c asString]]].                        isWord                            ifTrue:[rtn add:word]                            ifFalse:[rtn add:number].                        ^rtn asArray               :SOURCE,type=instanceMethod,class=String,selector=fileName,codeType=rtalkfileName                        "Answer the characters of the receiver string up                         to the last period character."                    | str lastPeriod |                    str := ( ReadStream on: self ).                    [ str skipTo: $. ] whileTrue: [  lastPeriod := str position ].                    lastPeriod notNil ifTrue: [                        ^self copyFrom: 1 to: ( lastPeriod - 1 )].                    ^self               :SOURCE,type=instanceMethod,class=String,selector=checkCharacter:,codeType=rtalkcheckCharacter: aCharacter                        "Private - Report an error if the argument                         aCharacter is not an instance of class Character."                    (aCharacter isCharacter)                        ifFalse: [                            ^self error: self class name, ' can''t hold '                                , aCharacter class name]               :SOURCE,type=instanceMethod,class=String,selector=findPattern:startingAt:,codeType=rtalkfindPattern: aArray startingAt: aMutInt                   "<modified:pgmr=mdr,time=01/04/13 at 06:55:36 pm>   "                        "searches for a match and updates aMutInt to the position of the match                         inf no match returns nil"                	<jprim: /ByteStringPrims primMatchBytePattern>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=String,selector=size,codeType=rtalksize                   "<modified:pgmr=mdr,time=01/04/13 at 07:04:39 pm>   "                        "Answer the size of the receiver string."                	<jprim: /ObjectPrims primObjectSize>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=String,selector=asUpperCase,codeType=rtalkasUpperCase                        "Answer a String containing the                         receiver with alphabetic                         characters in upper case."                    | answer size index aCharacter |                    size := self size.                    answer := self species new: size.                    index := 1.                    [index <= size]                        whileTrue: [                            (aCharacter := self at: index) isLowerCase                                ifTrue: [aCharacter := aCharacter asUpperCase].                            answer at: index put: aCharacter.                            index := index + 1].                    ^answer               :SOURCE,type=instanceMethod,class=String,selector=,codeType=rtalk, aCollection                   "<modified:sys=GAKRE8CA,time=04/22/11 at 05:33:35 pm>   "                        "Answer a new string containing the characters                         of the receiver followed by the the characters of                         aCollection."                    | string |                    (aCollection isString | aCollection isByteArray)                        ifTrue:[ string := aCollection]                        ifFalse:[ string := aCollection asString].                     ^super , string               :SOURCE,type=instanceMethod,class=String,selector=at:,codeType=rtalkat: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 06:53:44 pm>   "                        "Answer the character at position                         anInteger in the receiver string."                	<jprim: /ByteStringPrims primStringAt>                    self checkIndex: anInteger.                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=String,selector=equals:,codeType=rtalkequals: aString                   "<modified:pgmr=mdr,time=01/04/13 at 06:52:34 pm>   "                        "Answer true if the receiver is equal to                         the argument aString, else answer false.                         Note that the comparison is case sensitive."                    | sbs dbs i |                	<jprim: /ByteStringPrims primStringEquals>                    " fails when self class ~= aString class "                    aString isSymbol ifTrue: [^false].                    ^false               :SOURCE,type=instanceMethod,class=String,selector=equalsIgnoreCase:,codeType=rtalkequalsIgnoreCase: aString                        "Answer true if the receiver is equal to                         aString, else answer false.                         The comparison is not case sensitive."                    ^aString isString and: [self <= aString and: [(self < aString) not]]               :SOURCE,type=instanceMethod,class=String,selector=replaceFrom:to:with:startingAt:,codeType=rtalkreplaceFrom: start                    to: stop                    with: aString                    startingAt: repStart                   "<modified:pgmr=mdr,time=01/04/13 at 06:51:49 pm>   "                        "Replace the characters of the receiver at index                         positions start through stop with consecutive                         characters of aString beginning at index                         position repStart.                         Answer the receiver."                    | dbString index1 index2 |                	<jprim: /ByteStringPrims primBytesReplaceFromToWithStartingAt>                    (aString class isBytes)                        ifFalse: [                            ^super                                replaceFrom: start                                to: stop                                with: aString                                startingAt: repStart].                    " primitive failure on large byte objects "                    (self == aString and: [repStart < start])                        ifTrue: [ "do backward move for same object"                            index2 := repStart + stop - start.                            index1 := stop.                            [start <= index1]                                whileTrue: [                                self                                    at: index1                                    put: (aString at: index2) asCharacter.                                index1 := index1 - 1.                                index2 := index2 - 1].                            ^self].                    "do forward move"                    index2 := repStart.                    index1 := start.                    [index1 <= stop]                        whileTrue: [                            self                                at: index1                                put: (aString at: index2) asCharacter.                            index1 := index1 + 1.                            index2 := index2 + 1]               :SOURCE,type=instanceMethod,class=String,selector=asByteArray,codeType=rtalkasByteArray                        "Answer a ByteArray whose contents are the                         bytes of the receiver."                    ^(ByteArray new: self size) replace: self size with: self.               :SOURCE,type=instanceMethod,class=String,selector=riNumericTrim,codeType=rtalkriNumericTrim                        "Answer a String containing the receiver string                         with blanks removed and leading alphas removed. Returns                        a string where the first char is a digit or a - "                    | c inStream outStream flag|                    flag := false.                    inStream := ReadStream on: self.                    outStream := WriteStream on:(String new).                    [(inStream atEnd) or:[flag]]                         whileFalse:[ c := inStream next.                                             ((c isDigit or:[ c = $-]) or:[ c = $.])                                                ifTrue:[outStream nextPut:c.                                                        flag := true]].                    [inStream atEnd]                         whileFalse:[ c := inStream next.                                             c isWhitespace                                                ifFalse:[outStream nextPut:c]].                    ^outStream contents               :SOURCE,type=instanceMethod,class=String,selector=asArrayOfSubstrings,codeType=rtalkasArrayOfSubstrings                   "<modified:sys=GAKRE8CA,time=05/11/11 at 10:11:53 am>   "                        "Answer an array of substrings from the                         receiver.  The receiver is divided into                         substrings at the occurrences of one or                         more space characters."                    | aStream answer index space |                    answer := OrderedCollection new.                    aStream := ReadStream on: self.                    space := Character space asInteger.                    [aStream atEnd]                        whileFalse: [                            [aStream atEnd ifTrue: [^answer asArray].                             aStream peek isWhitespace not]                                whileFalse: [aStream next].                            index := aStream position + 1.                            [aStream atEnd or: [aStream peek isWhitespace]]                                whileFalse: [aStream next].                            answer add:                                (self copyFrom: index to: aStream position)].                    ^answer asArray               :SOURCE,type=instanceMethod,class=String,selector=isString,codeType=rtalkisString                        "Answer true if receiver is a kind of String."                    ^true               :SOURCE,type=instanceMethod,class=String,selector=withQuotes,codeType=rtalkwithQuotes                        "Answer a String with internal single quotes doubled, and                         with leading and trailing single quote marks."                                    | x |                    x := WriteStream on: (String new: self size + 8).                    self printOn: x.                    ^x contents.               :SOURCE,type=instanceMethod,class=String,selector=riRemoveChar:,codeType=rtalkriRemoveChar:aChar              "Answer a String containing the receiver string               with blanks removed."          | c inStream outStream|          inStream := ReadStream on: self.          outStream := WriteStream on:(String new).          [inStream atEnd]               whileFalse:[ c := inStream next.                                   c = aChar                                      ifFalse:[outStream nextPut:c]].          ^outStream contents     :SOURCE,type=instanceMethod,class=String,selector=basicAt:put:,codeType=rtalkbasicAt: anInteger put: aCharacter                   "<modified:pgmr=mdr,time=01/04/13 at 06:54:16 pm>   "                        "Answer aCharacter.  At index position                         anInteger in the receiver put the                         character aCharacter."                	<jprim: /ByteStringPrims primStringAtPut>                    self checkIndex: anInteger.                    self checkCharacter: aCharacter.                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=String,selector=before:,codeType=rtalkbefore:aString                        "used to do a alphanumeric sort"                    |a b |                                    self isEmpty ifTrue:[^true].                    aString isEmpty ifTrue:[^false].                    a := self asArrayOfWordsOrNumbers.                    b := aString asArrayOfWordsOrNumbers.                                    1 to: (a size) do:                    [ : i |                        (b size) < i ifTrue: [ ^false ].                                        (a at: i ) = (b at: i)                        ifFalse:                        [                            (a at:i) isNumber                            ifTrue:                            [                                (b at: i) isNumber                                ifTrue:                                [                                    ^(a at:i) < (b at:i)                                ]                                ifFalse:                                [                                    ^true                                ].                            ]                            ifFalse:                            [                                (b at: i) isNumber                                ifTrue:                                [                                    ^false                                ]                                ifFalse:                                [                                    ^(a at:i) < (b at:i)                                ].                            ].                        ].                    ].                                    ^true.               :SOURCE,type=instanceMethod,class=String,selector=findByte:startingAt:,codeType=rtalkfindByte: aChar startingAt: aMutInt                   "<modified:pgmr=mdr,time=01/04/13 at 06:55:29 pm>   "                        "searches for a match and updates aMutInt to the position of the match                         inf no match sets aMutInt to the end of the array"                	<jprim: /ByteStringPrims primMatchByte>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=String,selector=riAsFloat,codeType=rtalkriAsFloat                   "<modified:sys=GAKRE8CA,time=05/03/11 at 04:37:06 pm>   "                    "Answer the float conversion of the receiver; the                     receiver is expected to be a sequence of digits with                     optional minus and decimal point. or alpha multiplier"                   | temp integerPart fraction exponent  string neg dp exp|                    string := self riNumericTrim.                    string isEmpty ifTrue:[^0.0].                   (self at:1) = $-    ifTrue:[ neg := true ]                                             ifFalse:[ neg := false].                    temp :=1.                    string do:[:c| (c = $. and:[ dp = nil])  ifTrue:[dp := temp].                                      (c isLetter and:[exp = nil]) ifTrue:[exp := temp].                                      temp := temp + 1.].                    dp isNil ifTrue:[exp isNil ifFalse:[dp := exp - 1]                                                            ifTrue:[ dp := string size]].                    integerPart := (string copyFrom:1 to:dp) asInteger asFloat.                    exp isNil ifTrue:[temp := string size]                                    ifFalse:[temp := exp - 1 ].                    fraction :=  (string copyFrom:(dp + 1) to:temp) asInteger.                    fraction := fraction / (10 raisedTo:(temp - dp)).                    exponent := 1.0.                    exp isNil ifFalse:[ temp := string at:exp.                       $E = temp asUpperCase ifTrue:[ exponent := 10 raisedTo:(string copyFrom:(exp + 1) to:(string size))asInteger]                                     ifFalse:[ temp = $G ifTrue:[exponent := 10 raisedTo:9]                                        ifFalse:[temp = $M ifTrue:[exponent := 10 raisedTo:6 ]                                           ifFalse:[temp = $K ifTrue:[exponent := 10 raisedTo:3]                                                ifFalse:[ temp = $m ifTrue:[exponent := 10 raisedTo:-3]                                                     ifFalse:[temp = $u ifTrue:[exponent := 10 raisedTo:-6]                                                         ifFalse:[temp = $n ifTrue:[exponent := 10 raisedTo:-9 ]                                                             ifFalse:[temp = $p ifTrue:[exponent := 10 raisedTo:-12 ]]]]]]]]].                    neg ifTrue:[ fraction := fraction * -1].                   ^ (integerPart  + fraction) *exponent               :SOURCE,type=instanceMethod,class=String,selector=asString,codeType=rtalkasString                        "Answer the string representing the                         receiver (the receiver itself)."                    ^self               :SOURCE,type=instanceMethod,class=String,selector=asCharacter,codeType=rtalkasCharacter                "                    Return the first character.  Intended for easy conversion from single-byte strings to                    characters.                "                    ^self at: 1               :SOURCE,type=instanceMethod,class=String,selector=withCrs,codeType=rtalkwithCrs                   "<modified:sys=GAKRE8CA,time=05/11/11 at 10:12:14 am>   "                        "Answer the receiver string where each                         occurrence of the character \ has been                         replaced with a line-feed character."                    1 to: self size do: [ :index |                        (self at: index) = $\                            ifTrue: [self at: index put: (Character lf)]]               :SOURCE,type=instanceMethod,class=String,selector=asArrayOfSubstringsSepAt:,codeType=rtalkasArrayOfSubstringsSepAt:aCharacter                                        "Answer an array of substrings from the receiver. The receiver                        is divided into substrings by one occurrences of <aCharacter>.                        The first element must be aCharacter,  if not the entire string is returned                        unless is inside of a double quote string. delimiters in a row give a empty entry                        trailing sep gives a empty last element"                                    | answer startIndex stopIndex size quot delimiter c0 |                    size := self size.                    answer := OrderedCollection new.                    size = 0 ifTrue:[^answer].                    quot := $".                    delimiter := aCharacter.                    ((self at:1) = delimiter)  ifFalse:[answer add:self. ^answer].  " clearly an error"                    (self size = 1) ifTrue:[answer add:''. ^answer].                    startIndex := 2.                                           [ startIndex <= size ] whileTrue: [                        [startIndex <= size and: [ ( c0 := self at: startIndex ) = delimiter | (c0 = quot)]] whileTrue:[                            c0 = aCharacter                                 ifTrue:[                                    delimiter := aCharacter.                                    answer add: '']                                ifFalse:[ delimiter := quot ].                            startIndex := startIndex + 1].                        stopIndex := startIndex.                        [ stopIndex <= size and: [ ( self at: stopIndex ) ~= delimiter ] ]                            whileTrue: [ stopIndex := stopIndex + 1 ].                        stopIndex >= startIndex                            ifTrue: [                                    ((stopIndex >= size) & (startIndex = stopIndex))                                        ifFalse:[answer add: ( self copyFrom: startIndex to: stopIndex - 1 )].                                        delimiter := aCharacter ].                        (stopIndex >= size and:[(self at:size) = aCharacter])                            ifTrue:[answer add:''].                                        startIndex := stopIndex + 1.                         (startIndex < size and:[( self at: stopIndex ) = quot])                             ifTrue:[startIndex := startIndex + 1]                    ].                    ^answer asArray               :SOURCE,type=instanceMethod,class=String,selector=asFloat,codeType=rtalkasFloat                        "Answer an instance of Float which is a conversion self;                         self is expected to be a sequence of                         the form [(+|-)] [digits] [decSep [digits] ] [(E|e) [(+|-) digits]]."                    ^Float fromString: self               :SOURCE,type=instanceMethod,class=String,selector=trimBlanks,codeType=rtalktrimBlanks                        "Answer a String containing the receiver string                         with leading and trailing blanks removed."                    | nonBlank index aStream |                    nonBlank := false.                    aStream := ReadStream on: self.                    [aStream atEnd or: [nonBlank := aStream next isWhitespace not]]                        whileFalse:[].                    nonBlank                        ifTrue: [index := aStream position]                        ifFalse: [^String new: 0].                    aStream position: self size - 1.                    [aStream next isWhitespace not]                        whileFalse: [aStream skip: -2].                    ^self copyFrom: index to: aStream position               :SOURCE,type=instanceMethod,class=String,selector=asCompactString,codeType=rtalkasCompactString                        " Answer the most compact string containing the                         characters of the receiver. "                    ^self               :SOURCE,type=instanceMethod,class=String,selector=basicAt:,codeType=rtalkbasicAt: anInteger                   "<modified:pgmr=mdr,time=01/04/13 at 06:54:05 pm>   "                        "Answer the character at position                         anInteger in the receiver string."                	<jprim: /ByteStringPrims primStringAt>                    self checkIndex: anInteger.                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=String,selector=replaceFrom:to:withObject:,codeType=rtalkreplaceFrom: start to: stop withObject: aCharacter                   "<modified:pgmr=mdr,time=01/04/13 at 06:51:11 pm>   "                        "Replace the characters of the receiver                         at index positions start through stop                         with aCharacter.  Answer aCharacter."                    | dbString |                	<jprim: /ByteStringPrims primBytesReplaceFromToWithByte>                    self checkCharacter: aCharacter.                    ^super                        replaceFrom: start                        to: stop                        withObject: aCharacter               :SOURCE,type=instanceMethod,class=String,selector=appendCrLf,codeType=rtalkappendCrLf                   "<modified:sys=GAKRE8CA,time=05/11/11 at 10:11:26 am>   "                   "<modified:sys=G9TQQ5YA,time=12/29/09 at 06:22:58 pm>   "                   "<modified:sys=G9TQQ5YA,time=12/29/09 at 06:22:24 pm>   "                   "<modified:sys=G9TQQ5YA,time=12/29/09 at 06:21:28 pm>   "                        "comment"                    ^self,(String with:(Character cr) with:(Character lf))               :SOURCE,type=instanceMethod,class=String,selector=asInteger,codeType=rtalkasInteger                        "Answer the integer conversion of the receiver;                         the receiver is expected to be a sequence of                         digits with optional leading minus sign."                    | answer char |                    answer := 0.                    self size = 0 ifTrue: [^answer].                    (self at: 1) = $-                        ifTrue: [                            ^(self copyFrom: 2 to: self size)                                asInteger negated].                    (self at: 1) = $+                        ifTrue: [                           ^(self copyFrom: 2 to: self size)                                asInteger ].                    1 to: self size do: [ :index |                        (char := self at: index) isDigit                            ifFalse: [^answer].                        answer := answer * 10 + char digitValue].                    ^answer               :SOURCE,type=instanceMethod,class=Set,selector=includes:,codeType=rtalkincludes: anObject                        "Answer true if the receiver includes anObject                         as one of its elements, else answer false."                    ^((contents at:                        (self findElementIndex: anObject)) == nil) not               :SOURCE,type=instanceMethod,class=Set,selector=at:put:,codeType=rtalkat: anInteger put: anObject                        "Replace the element at index position anInteger                         in the receiver with anObject.  This method                         reports an error since sets are not indexable."                    ^self errorNotIndexable               :SOURCE,type=instanceMethod,class=Set,selector=add:,codeType=rtalkadd: anObject                        "Answer anObject.  Add anObject to the receiver                         if the receiver does not already contain it."                    | index |                    anObject isNil                        ifTrue: [^anObject].                    self adjustSize.                    (contents at:                        (index := self findElementIndex: anObject)) isNil                            ifTrue: [                                elementCount := elementCount + 1.                                ^contents at: index put: anObject].                    ^anObject               :SOURCE,type=instanceMethod,class=Set,selector=grow,codeType=rtalkgrow                        "Private - Answer the receiver expanded                         to accomodate more elements."                    | aSet |                    aSet := self species new: contents size * 4 // 3 + 10.                    self do: [ :element | aSet add: element].                    contents := aSet contents               :SOURCE,type=instanceMethod,class=Set,selector=remove:ifAbsent:,codeType=rtalkremove: anObject ifAbsent: aBlock                        "Answer anObject.  Remove the element anObject from                         the receiver collection.  If anObject is not an                         element of the receiver, aBlock is evaluated                         (with no arguments)."                    | index |                    index := self findElementIndex: anObject.                    (contents at: index) == nil                        ifTrue: [^aBlock value].                    contents at: index put: nil.                    elementCount := elementCount - 1.                    self rehashFrom: index.                    ^anObject               :SOURCE,type=instanceMethod,class=Set,selector=occurrencesOf:,codeType=rtalkoccurrencesOf: anObject                        "Answer 1 if the receiver includes anObject as                         one of its elements, else answer zero."                    (self includes: anObject)                        ifTrue: [^1].                    ^0               :SOURCE,type=instanceMethod,class=Set,selector=size,codeType=rtalksize                        "Answer the number of elements contained                         in the receiver."                    ^elementCount               :SOURCE,type=instanceMethod,class=Set,selector=findElementIndex:,codeType=rtalkfindElementIndex: anObject                        "Private - Answer the index position of anObject in the                         receiver or the first empty element position."                    | index indexedObject lastIndex |                    lastIndex := contents size.                    index := (anObject hash) \\ lastIndex + 1.                    [(indexedObject := contents at: index) = anObject]                        whileFalse: [                            (indexedObject == nil)                                ifTrue: [^index].                            (index := index + 1) > lastIndex                                ifTrue: [ "index wraparound"                                    index := 1]].                    ^index               :SOURCE,type=instanceMethod,class=Set,selector=adjustSize,codeType=rtalkadjustSize                        "Private - Answer the receiver.  If the receiver set is                         getting full, expand it to accomodate more objects."                    (elementCount * 10) >= (contents size - 2 * 9)                        ifTrue: [^self grow]               :SOURCE,type=instanceMethod,class=Set,selector=any,codeType=rtalkany                "                    Return any value in the set.  This is used when                    you just want any item in the set and you don't care which                    one; or if the set only contains one element.                "                    (elementCount = 0) ifTrue: [ ^nil ].                    contents do: [:a |                        a notNil ifTrue: [ ^a ]                    ].               :SOURCE,type=instanceMethod,class=Set,selector=at:,codeType=rtalkat: anInteger                        "Access the element at index position anInteger                         in the receiver.  This method reports                         an error since sets cannot be indexed."                    ^self errorNotIndexable               :SOURCE,type=instanceMethod,class=Set,selector=initialize:,codeType=rtalkinitialize: anInteger                        "Private - Initialize the instance variable                         elementCount to zero, contents to an Array                         of size anInteger."                    elementCount := 0.                    contents := Array new: anInteger               :SOURCE,type=instanceMethod,class=Set,selector=do:,codeType=rtalkdo: aBlock                        "For each element in the receiver, evaluate                         aBlock with that element as the argument."                    | index element |                    index := contents size.                    [index > 0]                        whileTrue: [                            (element := contents at: index) == nil                                ifFalse: [aBlock value: element].                            index := index - 1]               :SOURCE,type=instanceMethod,class=Set,selector=rehashFrom:,codeType=rtalkrehashFrom: anInteger                        "Private - Rehash the receiver from the index                         position anInteger to the last index position."                    | deleteIndex lastIndex searchIndex testObject |                    lastIndex := contents size.                    deleteIndex := anInteger.                    [(deleteIndex := deleteIndex + 1) > lastIndex                        ifTrue: [ "index wraparound"                            deleteIndex := 1].                    (testObject := contents at: deleteIndex) == nil]                        whileFalse: [ "test next object for relocation"                            searchIndex := self findElementIndex: testObject.                            (contents at: searchIndex) == nil                                ifTrue: [ "found object to move"                                    contents at: searchIndex                                        put: testObject.                                    contents at: deleteIndex                                        put: nil]]               :SOURCE,type=instanceMethod,class=Set,selector=contents,codeType=rtalkcontents                        "Private - Answer an Array containing                         contents of the receiver."                    ^contents               :SOURCE,type=instanceMethod,class=Array,selector=isArray,codeType=rtalkisArray                        "Answer true if receiver is a kind of Array."                    ^true               :SOURCE,type=instanceMethod,class=Array,selector=at:ifAbsent:,codeType=rtalkat: indx ifAbsent: aBlock                "                    Provide a way of gracefully handling incorrect array access.                "                    (indx < 0 or: [indx > self size]) ifTrue: [                        ^aBlock value                    ] ifFalse: [                        ^super at: indx                    ]               :SOURCE,type=instanceMethod,class=Array,selector=grow:,codeType=rtalkgrow:aInt                  "<modified:pgmr=mdr,time=07/01/13 at 03:08:34 pm>   "               	" expands the array size by aInt and copies original to beginning "               	<jprim: /ObjectPrims primObjectGrow>                   ^self primitiveFailed               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=addLast:,codeType=rtalkaddLast: anObject                        "Answer anObject.  Add anObject after                         the last element of the receiver."                    endPosition = contents size                        ifTrue: [self putSpaceAtEnd].                    endPosition := endPosition + 1.                    contents at: endPosition put: anObject.                    ^anObject               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=do:,codeType=rtalkdo: aBlock                        "Answer the receiver.  For each element in the receiver,                         evaluate aBlock with that element as the argument."                    | index |                    index := startPosition - 1.                    [(index := index + 1) <= endPosition]                        whileTrue: [aBlock value: (contents at: index)]               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=size,codeType=rtalksize                        "Answer the number of elements contained by                         the receiver collection."                    ^endPosition - (startPosition - 1)               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=insert:after:,codeType=rtalkinsert:aObject after:aIndex                   "<modified:user=Roos Inst,time=01/18/09 at 04:59:00 pm>   "                   "<modified:user=Roos Inst,time=11/16/08 at 06:01:10 pm>   "                        "grows the collection"                    " first extend the collection "                    | index |                    aIndex >= self size ifTrue:[^self add:aObject].                    index := self size.                    index to:(aIndex + 1) by:-1 do:[ :i | self riAt:(index + 1) put:(self at:index)].                    self at:(aIndex + 1) put:aObject.                    ^aObject               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=,codeType=rtalk, aCollection                        "Answer an OrderedCollection containing all                         the elements of the receiver followed by                         all the elements of aCollection."                    aCollection isCollection ifFalse: [ self error: 'Argument must be a Collection' ].                    ^self copy                        addAll: aCollection;                        yourself               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=addFirst:,codeType=rtalkaddFirst: anObject                        "Answer anObject.  Add anObject before                         the first element of the receiver."                    startPosition = 1                        ifTrue: [self putSpaceAtStart].                    startPosition := startPosition - 1.                    contents at: startPosition put: anObject.                    ^anObject               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=initPositions:,codeType=rtalkinitPositions: anInteger                        "Private - Answer the receiver after initializing                         it to be an empty OrderedCollection with                         anInteger number of slots."                    startPosition := 1.                    endPosition := 0.                    contents := Array new: anInteger               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=at:put:,codeType=rtalkat: anInteger put: anObject                        "Answer anObject.  Replace the element of the                         receiver at index position anInteger with the                         anObject.  If anInteger is an invalid index                         for the receiver collection, report an error."                    | index |                    index := anInteger + startPosition - 1.                    (startPosition <= index and: [index <= endPosition])                        ifFalse: [                            ^self errorInBounds: anInteger].                    contents at: index put: anObject.                    ^anObject               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=add:beforeIndex:,codeType=rtalkadd: anObject beforeIndex: anInteger                        "Answer anObject.  Insert anObject at index position                         anInteger - 1 in the receiver collection.  If anInteger                         is out of the collection bounds, report an error."                    self putSpaceAfter: anInteger - 1.                    ^self at: anInteger put: anObject               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=putSpaceAfter:,codeType=rtalkputSpaceAfter: anInteger                        "Private - Answer the receiver with room for an                         element immediately after index position anInteger."                    | index |                    endPosition = contents size                        ifTrue: [self putSpaceAtEnd].                    anInteger = 0                        ifTrue: [                            startPosition = 1                                ifTrue: [self putSpaceAtStart].                            startPosition := startPosition - 1.                            ^self].                    endPosition := endPosition + 1.                    index := self size - 1.                    [index > anInteger]                        whileTrue: [                            self                                at: index + 1                                put: (self at: index).                            index := index - 1]               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=errorAbsentElement,codeType=rtalkerrorAbsentElement                        "Private - Produce a walkback to the effect                         that the desired object was not in the collection."                    ^self error:                        'attempt to access absent element'               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=startPosition:endPosition:,codeType=rtalkstartPosition: start endPosition: end                        "Private - Answer the receiver.  Set the position                         of the first and last elements of the receiver,                         to the arguments start and stop respectively."                    startPosition := start.                    endPosition := end               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=add:after:,codeType=rtalkadd: newObject after: oldObject                        "Answer newObject.  Insert newObject immediately after                         the element oldObject in the receiver collection.  If                         oldObject is not in the collection, report an error."                    | index |                    index := 1.                    [index <= self size]                        whileTrue: [                            oldObject = (self at: index)                                ifTrue: [^self add: newObject afterIndex: index].                            index := index + 1].                    ^self errorAbsentElement               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=shallowCopy,codeType=rtalkshallowCopy                        "Answer a copy of the receiver which shares                         the receiver elements."                    ^self copyFrom: 1 to: self size               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=putSpaceAtStart,codeType=rtalkputSpaceAtStart                        "Private - Answer the receiver with room for more                         elements before the first element of the collection."                    | size index end |                    endPosition = contents size                        ifTrue: [self grow].                    size := self size.                    end := contents size + endPosition + 1 // 2.                    index := 0.                    [index < size]                        whileTrue: [                            contents                                at: end - index                                put: (contents at: endPosition - index).                            index := index + 1].                    startPosition := end - size + 1.                    endPosition := end.                    index := 1.                    [index < startPosition]                        whileTrue: [                            contents at: index put: nil.                            index := index + 1]               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=copyFrom:to:,codeType=rtalkcopyFrom: beginning to: end                        "Answer an OrderedCollection containing the                         elements of the receiver from index position                         beginning through index position end."                    | answer |                    (answer := self species new: self size)                        startPosition: 1                        endPosition: end - beginning + 1.                    ^answer                        replaceFrom: 1                        to: end - beginning + 1                        with: self                        startingAt: beginning               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=riDetectAll:,codeType=rtalkriDetectAll:aBlock                   "<modified:sys=G78T5XCA,time=04/03/10 at 05:36:25 pm>   "                   "<modified:sys=G9TQQ5YA,time=02/24/10 at 09:31:41 pm>   "                        "returns a collection of all items for which the block                        returns true"                    ^super riDetectAll:aBlock               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=putSpaceAtEnd,codeType=rtalkputSpaceAtEnd                        "Private - Answer the receiver with room for more                         elements following the last element of the collection."                    | size index start |                    startPosition = 1                        ifTrue: [^self grow]                        ifFalse: [                            size := self size.                            start := startPosition // 2.                            index := 0.                            [index < size]                                whileTrue: [                                    contents                                        at: start + index                                        put: (contents at: startPosition + index).                                    index := index + 1].                            startPosition := start.                            endPosition := startPosition + size - 1].                    index := contents size.                    [index > endPosition]                        whileTrue: [                            contents at: index put: nil.                            index := index - 1]               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=removeIndex:,codeType=rtalkremoveIndex: anInteger                        "Answer the receiver.  Remove the element of the receiver                         at index position anInteger.  If anInteger is an invalid                         index for the receiver, report an error."                    | index |                    index := anInteger + startPosition - 1.                    (index between: 1 and: endPosition)                        ifFalse: [^self errorAbsentElement].                    [index < endPosition]                        whileTrue: [                            contents                                at: index                                put: (contents at: index + 1).                            index := index + 1].                    contents at: endPosition put: nil.                    endPosition := endPosition - 1               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=replaceFrom:to:with:,codeType=rtalkreplaceFrom: start to: stop with: aCollection                        "Answer a new OrderedCollection containing the                         receiver whose elements at index position start                         through stop have been replaced by the elements                         of aCollection."                    | finalSize size index |                    size := aCollection size.                    finalSize := self size + size -                        (stop - start + 1).                    finalSize > contents size                        ifTrue: [self growTo: finalSize + (finalSize // 3 + 10)].                    self                        startPosition: startPosition                        endPosition: contents size.                    self                        replaceFrom: start + size                        to: finalSize                        with: self                        startingAt: stop + 1.                    self                        replaceFrom: start                        to: start + size - 1                        with: aCollection                        startingAt: 1.                    self                        startPosition: startPosition                        endPosition: startPosition + finalSize - 1.                    index := endPosition + 1.                    [index <= contents basicSize]                        whileTrue: [                            contents at: index put: nil.                            index := index + 1].                    ^self               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=before:,codeType=rtalkbefore: anObject                        "Answer the element that immediately precedes                         anObject in the receiver collection.  If anObject                         is not an element of the receiver, report an error."                    ^self                        before: anObject                        ifNone: [^self errorAbsentElement]               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=riReset,codeType=rtalkriReset                        "Private - Answer the receiver after initializing                         it to be an empty OrderedCollection with                         the same number of slots."                    startPosition := 1.                    endPosition := 0.                    (1 to:contents size) do:[ :i | contents at:i put:nil].               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=addAllFirst:,codeType=rtalkaddAllFirst: aCollection                        "Answer aCollection.  Add all the elements                         contained in aCollection to the receiver                         before its first element."                    | index |                    index := aCollection size.                    [index <= 0]                        whileFalse: [                            self addFirst: (aCollection at: index).                            index := index - 1].                    ^aCollection               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=after:,codeType=rtalkafter: anObject                        "Answer the element that immediately follows                         anObject in the receiver collection.  If anObject                         is not an element of the receiver, report an error."                    ^self                        after: anObject                        ifNone: [^self errorAbsentElement]               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=riRemoveLast,codeType=rtalkriRemoveLast                   "<modified:sys=GAKRE8CA,time=01/21/12 at 01:07:34 pm>   "                        "Remove and answer the last element of the receiver.                         If the collection is empty, return nil. Expected to be used                         for caching riDatas"                    | answer |                    startPosition > endPosition                        ifTrue: [^nil].                    answer := contents at: endPosition.                    contents at: endPosition put: nil.                    endPosition := endPosition - 1.                    ^answer               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=remove:ifAbsent:,codeType=rtalkremove: anObject ifAbsent: aBlock                        "Answer anObject.  Remove the element anObject from                         the receiver collection.  If anObject is not an                         element of the receiver, aBlock is evaluated                         (with no arguments)."                    | index |                    index := startPosition.                    [index <= endPosition]                        whileTrue: [                            anObject = (contents at: index)                                ifTrue: [                                    self removeIndex: index - startPosition + 1.                                    ^anObject].                            index := index + 1].                    ^aBlock value               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=removeFirst,codeType=rtalkremoveFirst                        "Remove and answer the first element of the receiver.                         If the collection is empty, report an error."                    | answer |                    startPosition > endPosition                        ifTrue: [^self errorAbsentElement].                    answer := contents at: startPosition.                    contents at: startPosition put: nil.                    startPosition := startPosition + 1.                    ^answer               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=add:afterIndex:,codeType=rtalkadd: anObject afterIndex: anInteger                        "Answer anObject.  Insert anObject at index position                         anInteger + 1 in the receiver collection.  If anInteger                         is out of the collection bounds, report an error."                    self putSpaceAfter: anInteger.                    ^self at: anInteger + 1 put: anObject               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=growTo:,codeType=rtalkgrowTo: anInteger                        "Private - Answer the receiver expanded                         to accomodate anInteger number of elements."                    | aCollection |                    aCollection := Array new: anInteger.                    aCollection                        replaceFrom: startPosition                        to: endPosition                        with: contents                        startingAt: startPosition.                    contents := aCollection               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=includes:,codeType=rtalkincludes: anObject                        "Answer true if the receiver contains an element                         equal to anObject, else answer false."                    | index |                    index := startPosition - 1.                    [(index := index + 1) > endPosition]                        whileFalse: [                            anObject = (contents at: index)                                ifTrue: [^true]].                    ^false               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=removeLast,codeType=rtalkremoveLast                        "Remove and answer the last element of the receiver.                         If the collection is empty, report an error."                    | answer |                    startPosition > endPosition                        ifTrue: [^self errorAbsentElement].                    answer := contents at: endPosition.                    contents at: endPosition put: nil.                    endPosition := endPosition - 1.                    ^answer               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=riRemoveFirst,codeType=rtalkriRemoveFirst                        "Remove and answer the first element of the receiver.                         If the collection is empty, return nil."                    | answer |                    startPosition > endPosition                        ifTrue: [^nil].                    answer := contents at: startPosition.                    contents at: startPosition put: nil.                    startPosition := startPosition + 1.                    ^answer               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=grow,codeType=rtalkgrow                        "Private - Answer the receiver expanded in                         size to accomodate more elements."                    self growTo: contents size + self growSize               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=add:,codeType=rtalkadd: anObject                        "Answer anObject.  Add anObject after the                         last element of the receiver collection."                    endPosition = contents size                        ifTrue: [self putSpaceAtEnd].                    endPosition := endPosition + 1.                    contents at: endPosition put: anObject.                    ^anObject               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=addAllLast:,codeType=rtalkaddAllLast: aCollection                        "Answer aCollection.  Add all the elements                         contained in aCollection to the receiver                         after its last element."                    | index size |                    size := aCollection size.                    index := 1.                    [index <= size]                        whileTrue: [                            self addLast: (aCollection at: index).                            index := index + 1].                    ^aCollection               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=after:ifNone:,codeType=rtalkafter: anObject ifNone: aBlock                        "Answer the element that immediately follows                         anObject in the receiver collection.  If anObject                         is not an element of the receiver, aBlock is                         evaluated (with no arguments)."                    | index |                    index := startPosition.                    [index < endPosition]                        whileTrue: [                            anObject = (contents at: index)                                ifTrue: [^contents at: index + 1].                            index := index + 1].                    ^aBlock value               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=add:before:,codeType=rtalkadd: newObject before: oldObject                        "Answer newObject.  Insert newObject immediately before                         the element oldObject in the receiver collection.  If                         oldObject is not in the collection, report an error."                    | index |                    index := 1.                    [index <= self size]                        whileTrue: [                            oldObject = (self at: index)                                ifTrue: [^self add: newObject beforeIndex: index].                            index := index + 1].                    ^self errorAbsentElement               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=riAt:put:,codeType=rtalkriAt:aInt put:aObject                        "put where it goes"                    | index |                    index := aInt + startPosition - 1.                    (index < endPosition)                        ifFalse: [index > contents size                                        ifTrue:[ self growTo:index].                                    endPosition := index].                    contents at: index put: aObject.                    ^aObject               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=before:ifNone:,codeType=rtalkbefore: anObject ifNone: aBlock                        "Answer the element that immediately precedes                         anObject in the receiver collection.  If anObject                         is not an element of the receiver, aBlock is                         evaluated (with no arguments)."                    | index |                    index := startPosition + 1.                    [index <= endPosition]                        whileTrue: [                            anObject = (contents at: index)                                ifTrue: [^contents at: index - 1].                            index := index + 1].                    ^aBlock value               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=at:,codeType=rtalkat: anInteger                        "Answer the element of the receiver at index                         position anInteger.  If anInteger is an invalid                         index for the receiver collection, report an error."                    | index |                    index := anInteger + startPosition - 1.                    (startPosition <= index and: [index <= endPosition])                        ifFalse: [                            ^self errorInBounds: anInteger].                    ^contents at: index               :SOURCE,type=instanceMethod,class=OrderedCollection,selector=riAt:,codeType=rtalkriAt:aInt                   "<modified:sys=GAKRE8CA,time=09/26/10 at 01:10:15 pm>   "                        "get this value even if beyone end"                    | index |                    index := aInt + startPosition - 1.                    (index < endPosition)                        ifFalse: [index > contents size                                        ifTrue:[ self growTo:index].                                    endPosition := index].                    ^contents at: index.               :SOURCE,type=instanceMethod,class=RtBlock,selector=tryCatch:,codeType=rtalktryCatch:aExceptionHandler                   "<modified:pgmr=mdr,time=01/04/13 at 05:20:14 pm>   "                        "basic exception handler"                	<jprim: /ObjectPrims primBlockTry>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtBlock,selector=syncronizedTo:,codeType=rtalksyncronizedTo:aSem                   "<modified:pgmr=mdr,time=01/04/13 at 05:20:49 pm>   "                        "execute value as syncronized only one thread can run.                        the lock is aSem"                	<jprim: /ObjectPrims primBlockInvokeSync>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtBlock,selector=whileTrue:,codeType=rtalkwhileTrue: aBlock                        "Repetitively evaluate the receiver block and aBlock,                         until the result of receiver block evaluation is                         false.  Answer nil."                    self value                        ifTrue: [                            aBlock value.                            self whileTrue: aBlock].                    ^nil               :SOURCE,type=instanceMethod,class=RtBlock,selector=forkNamed:priority:semaphore:,codeType=rtalkforkNamed:aString priority:aInt semaphore:aSem                   "<modified:sys=GAKRE8CA,time=02/05/12 at 09:16:21 pm>   "                   "<modified:sys=GAKRE8CA,time=02/05/12 at 02:38:39 pm>   "                        "aString names the thread, aInt is per java range                        aSem is used to cancel etc"                    self debugStep:2 arg:aString arg:aInt arg:aSem               :SOURCE,type=instanceMethod,class=RtBlock,selector=whileFalse:,codeType=rtalkwhileFalse: aBlock                        "Repetitively evaluate the receiver block and aBlock,                         until the result of receiver block evaluation is                         true.  Answer nil."                    self value                        ifFalse: [                            aBlock value.                            self whileFalse: aBlock].                    ^nil               :SOURCE,type=instanceMethod,class=RtBlock,selector=repeatUntil:,codeType=rtalkrepeatUntil: aBlock                        "Repetitively evaluate the receiver block and aBlock,                         until the result of aBlock evaluation is true.  Always                         evaluate the receiver block at least once.  Answer nil."                    self value.                    ^aBlock whileFalse: self               :SOURCE,type=instanceMethod,class=RtBlock,selector=value,codeType=rtalkvalue                   "<modified:pgmr=mdr,time=01/04/13 at 05:20:28 pm>   "                        "comment"                	<jprim: /ObjectPrims primBlockInvoke>                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=isMetaClass,codeType=rtalkisMetaClass                   "<modified:sys=GAKRE8CA,time=04/28/11 at 08:11:12 am>   "                        "Answer true if receiver is a kind of MetaClass."                    ^true               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=canUnderstand:,codeType=rtalkcanUnderstand: aSymbol                   "<modified:pgmr=mdr,time=06/16/14 at 11:40:01 am>   "         "Answer true if the instance class can respond else                         answer false."                	^(self methodDictionary implementsMethod: aSymbol) :SOURCE,type=instanceMethod,class=RtMetaClass,selector=basicNew,codeType=rtalkbasicNew                   "<modified:pgmr=mdr,time=01/04/13 at 05:16:09 pm>   "                        "Private - Answer an instance of the receiver.  If the                         receiver is indexable, then allocate zero indexed                         instance variables.  This method should never be                         reimplemented in any subclass of Behavior since it                         is the primitive object allocation message."                	<jprim: /ObjectPrims primObjectNew>                    self isVariable                        ifTrue: [^self basicNew: 0].                    ^self primitiveFailed               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=instanceClass,codeType=rtalkinstanceClass                   "<modified:pgmr=mdr,time=07/04/13 at 06:26:08 pm>   "                   "comment"                	^self instVarAt:1           :SOURCE,type=instanceMethod,class=RtMetaClass,selector=instancesMethods,codeType=rtalkinstancesMethods                   "<modified:pgmr=mdr,time=08/09/13 at 08:28:28 pm>   "              "Private - Answer the method lookup for the instanceClass"                    ^self instanceClass methodLookup      :SOURCE,type=instanceMethod,class=RtMetaClass,selector=methodDictionary,codeType=rtalkmethodDictionary                   "<modified:pgmr=mdr,time=08/07/13 at 06:55:22 pm>   "               "Answer the method lookup  for the instanceClass"                    ^self instanceClass methodLookup       :SOURCE,type=instanceMethod,class=RtMetaClass,selector=superclass,codeType=rtalksuperclass                   "<modified:pgmr=mdr,time=07/04/13 at 05:04:03 pm>   "                    "Answer the superclass of the receiver."                    ^self instanceClass superclass class            :SOURCE,type=instanceMethod,class=RtMetaClass,selector=compiledMethodAt:,codeType=rtalkcompiledMethodAt: aSymbol                        "Answer the compiled code of the method                         named aSymbol defined in the receiver."                    ^self methodDictionary at: aSymbol ifAbsent: [^nil]               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=sourceCodeAt:,codeType=rtalksourceCodeAt: aSymbol                        "Answer a String of the source code for the method                         named aSymbol in the receiver."                    | method answer |                    method := self compiledMethodAt: aSymbol.                    method isNil                        ifTrue: [^aSymbol]                        ifFalse:[                            (method isCompiledMethod)                                ifTrue: [                                    answer := method sourceString.                                    answer == nil                                        ifTrue: [^aSymbol, ' can''t access source code']                                        ifFalse:[^answer]]                                ifFalse:[^aSymbol, ' can''t access source code']].               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=instanceClass:,codeType=rtalkinstanceClass:aClass                 "<modified:pgmr=mdr,time=07/04/13 at 06:26:18 pm>   "                   "comment"                	self instVarAt:1 put:aClass           :SOURCE,type=instanceMethod,class=RtMetaClass,selector=removeSelector:,codeType=rtalkremoveSelector: aSymbol                        "Remove the method named aSymbol from                         the methods defined in the receiver.                        Note:  This version has been modified so that the selectors                        for public methods are removed from the KmPublicMethods                        dictionary."                    self methodDictionary                        removeKey: aSymbol                        ifAbsent: [].               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=symbol,codeType=rtalksymbol                   "<modified:pgmr=mdr,time=07/04/13 at 05:04:14 pm>   "                    "Private - Answer the symbol for                         the class name of the receiver."                    ^self instanceClass symbol            :SOURCE,type=instanceMethod,class=RtMetaClass,selector=addSelector:withMethod:,codeType=rtalkaddSelector: aSymbol withMethod: aCompiledMethod                        "Add aCompiledMethod to the receiver messageDictionary                         using aSymbol as the key.  If aSymbol is not                         a Symbol report an error."                    Symbol mustBeSymbol: aSymbol.                    self methodDictionary                        at: aSymbol put: aCompiledMethod               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=inheritsFrom:,codeType=rtalkinheritsFrom: aClass                   "<modified:pgmr=mdr,time=06/16/14 at 11:35:02 am>   "         "Answer true if receiver can inherit methods                         from aClass, else answer false."                	^instanceClass inheritsFrom: aClass :SOURCE,type=instanceMethod,class=RtMetaClass,selector=hasClassVarNamed:,codeType=rtalkhasClassVarNamed:aSymbol         "<modified:pgmr=mdr,time=08/09/13 at 08:23:29 pm>   "              "comment"         ^instanceClass hasClassVarNamed:aSymbol      :SOURCE,type=instanceMethod,class=RtMetaClass,selector=hash,codeType=rtalkhash                   "<modified:pgmr=mdr,time=07/01/13 at 03:35:12 pm>   "                       "Answer the integer hash value of the receiver."                    ^self name hash               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=instancesMethods:,codeType=rtalkinstancesMethods: aLookup                   "<modified:pgmr=mdr,time=08/09/13 at 08:29:18 pm>   "              "Private - Change the instances lookup."                	self instanceClass methodLookup:aLookup      :SOURCE,type=instanceMethod,class=RtMetaClass,selector=shallowCopy,codeType=rtalkshallowCopy                   "<modified:sys=GAKRE8CA,time=04/28/11 at 08:10:09 am>   "                        "Answer a copy of the receiver which shares                         the receiver instance variables.  Because                         classes are unique (cannot be copied),                         answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=instSize,codeType=rtalkinstSize                    "<modified:pgmr=mdr,time=07/03/13 at 12:34:56 am>   "                      "Answer the number of named instance variables                         contained in instances of the receiver which are RtClasses"                    ^(RtClass structure bitAnd: 16r0FFFF0000) bitShift:-16              :SOURCE,type=instanceMethod,class=RtMetaClass,selector=includesSelector:,codeType=rtalkincludesSelector: aSymbol                        "Answer true if the message dictionary of the                         receiver includes a method of name aSymbol,                         else answer false."                    ^self methodDictionary includesKey: aSymbol               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=implementorsOf:,codeType=rtalkimplementorsOf: aSymbol                        "Answer a collection of methods of the receiver and its                         subclasses that implement aSymbol."                    | methods  |                    methods := OrderedCollection new: 30.                    self withAllSubclasses do: [:class |                        (class includesSelector: aSymbol)                            ifTrue: [methods add: (class compiledMethodAt: aSymbol)].                        (class class includesSelector: aSymbol)                            ifTrue: [methods add: (class class compiledMethodAt: aSymbol)]].                    ^methods               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=deepCopy,codeType=rtalkdeepCopy                   "<modified:sys=GAKRE8CA,time=04/28/11 at 08:02:29 am>   "                        "Answer a copy of the receiver with shallow                         copies of each instance variable.  Because                         classes are unique (cannot be copied),                         answer the receiver."                    ^self               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=selectors,codeType=rtalkselectors                        "Answer a Set of symbols of the names                         of the methods defined by the receiver."                    ^self methodDictionary keys               :SOURCE,type=instanceMethod,class=RtMetaClass,selector=name,codeType=rtalkname                   "<modified:pgmr=mdr,time=07/04/13 at 05:03:47 pm>   "                    "Answer a String containing the receiver name."               	self instanceClass isNil ifTrue:[^'unknown name'].              	^self instanceClass name,' class'            :SOURCE,type=instanceMethod,class=RtMetaClass,selector=printOn:,codeType=rtalkprintOn: aStream                   "<modified:sys=GAKRE8CA,time=06/07/11 at 09:45:02 pm>   "                   "<modified:sys=GAKRE8CA,time=02/10/11 at 10:11:43 am>   "                        "Append the name"                        aStream nextPutAll: self name               :CHECKSUM54980073zi000